
C:\Users\zepvalue\AppData\Local\arduino\sketches\FF2A98C1CBE33058ABC2D0913DAF4EB1/spinServo_teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200016c0 	.word	0x200016c0
6000142c:	20001b20 	.word	0x20001b20

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9d6 	bl	600017f0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f974 	bl	60001800 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fba2 	bl	60001c94 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fd41 	bl	60001fe8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f9b0 	bl	60001910 <configure_external_ram>
	analog_init();
600015b0:	f000 fcd4 	bl	60001f5c <analog_init>
	pwm_init();
600015b4:	f000 fd1c 	bl	60001ff0 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb9a 	bl	60001cf0 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f91a 	bl	600017f4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fc2b 	bl	60001e20 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f913 	bl	600017fc <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f90f 	bl	600017f8 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fcfd 	bl	60001fd8 <____libc_init_array_veneer>
	main();
600015de:	f000 fcff 	bl	60001fe0 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00003740 	.word	0x00003740
600015f0:	60002200 	.word	0x60002200
600015f4:	00000000 	.word	0x00000000
600015f8:	200016c0 	.word	0x200016c0
600015fc:	60005944 	.word	0x60005944
60001600:	20000000 	.word	0x20000000
60001604:	20001400 	.word	0x20001400
60001608:	000014b5 	.word	0x000014b5
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00000d25 	.word	0x00000d25
6000161c:	20001ac8 	.word	0x20001ac8
60001620:	00000d29 	.word	0x00000d29
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20001acc 	.word	0x20001acc
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaab 	.word	0xaaaaaaab
6000166c:	00200007 	.word	0x00200007
60001670:	20078000 	.word	0x20078000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	200002e8 	.word	0x200002e8
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	200002e8 	.word	0x200002e8

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	200002e8 	.word	0x200002e8
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	200002e8 	.word	0x200002e8

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017f0:	4770      	bx	lr
600017f2:	bf00      	nop

600017f4 <startup_default_middle_hook>:
600017f4:	4770      	bx	lr
600017f6:	bf00      	nop

600017f8 <startup_default_late_hook>:
600017f8:	4770      	bx	lr
600017fa:	bf00      	nop

600017fc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017fc:	bf00      	nop
600017fe:	4770      	bx	lr

60001800 <configure_cache>:
{
60001800:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001806:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001808:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000180a:	4831      	ldr	r0, [pc, #196]	; (600018d0 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000180c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001810:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001814:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001816:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000181a:	482e      	ldr	r0, [pc, #184]	; (600018d4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000181c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001820:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001822:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001826:	482c      	ldr	r0, [pc, #176]	; (600018d8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001828:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000182c:	4a2b      	ldr	r2, [pc, #172]	; (600018dc <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000182e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001832:	4c2b      	ldr	r4, [pc, #172]	; (600018e0 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001834:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001838:	482a      	ldr	r0, [pc, #168]	; (600018e4 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000183a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001842:	4c29      	ldr	r4, [pc, #164]	; (600018e8 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001844:	4829      	ldr	r0, [pc, #164]	; (600018ec <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001846:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000184a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000184e:	4c28      	ldr	r4, [pc, #160]	; (600018f0 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001850:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001854:	4827      	ldr	r0, [pc, #156]	; (600018f4 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001856:	4a28      	ldr	r2, [pc, #160]	; (600018f8 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001858:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000185c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001860:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001864:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001868:	4c24      	ldr	r4, [pc, #144]	; (600018fc <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000186a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000186c:	4824      	ldr	r0, [pc, #144]	; (60001900 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000186e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001872:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001876:	4a23      	ldr	r2, [pc, #140]	; (60001904 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001878:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000187c:	4c22      	ldr	r4, [pc, #136]	; (60001908 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000187e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001882:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001886:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000188a:	4820      	ldr	r0, [pc, #128]	; (6000190c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000188c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001890:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001892:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001896:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000189a:	bf00      	nop
	asm("nop");
6000189c:	bf00      	nop
	asm("nop");
6000189e:	bf00      	nop
	asm("nop");
600018a0:	bf00      	nop
	asm("nop");
600018a2:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a4:	2201      	movs	r2, #1
600018a6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ae:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018b2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ba:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018be:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018c6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600018ca:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600018ce:	4770      	bx	lr
600018d0:	1000003f 	.word	0x1000003f
600018d4:	07080025 	.word	0x07080025
600018d8:	00100009 	.word	0x00100009
600018dc:	20001b20 	.word	0x20001b20
600018e0:	00200013 	.word	0x00200013
600018e4:	07020021 	.word	0x07020021
600018e8:	20000014 	.word	0x20000014
600018ec:	13080025 	.word	0x13080025
600018f0:	10000009 	.word	0x10000009
600018f4:	20200016 	.word	0x20200016
600018f8:	130b0027 	.word	0x130b0027
600018fc:	40000017 	.word	0x40000017
60001900:	60000018 	.word	0x60000018
60001904:	070b002f 	.word	0x070b002f
60001908:	70000019 	.word	0x70000019
6000190c:	8000001a 	.word	0x8000001a

60001910 <configure_external_ram>:
{
60001910:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001912:	4bb8      	ldr	r3, [pc, #736]	; (60001bf4 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001916:	4eb8      	ldr	r6, [pc, #736]	; (60001bf8 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001918:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000191a:	4fb8      	ldr	r7, [pc, #736]	; (60001bfc <configure_external_ram+0x2ec>)
{
6000191c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000191e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001922:	49b7      	ldr	r1, [pc, #732]	; (60001c00 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001924:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001928:	4db6      	ldr	r5, [pc, #728]	; (60001c04 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000192a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000192e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001932:	4cb5      	ldr	r4, [pc, #724]	; (60001c08 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001934:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001938:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000193c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001940:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001944:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001948:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000194c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000194e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001950:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001952:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001954:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
6000195a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000195e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001962:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001966:	4aa9      	ldr	r2, [pc, #676]	; (60001c0c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001968:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
6000196c:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001970:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001974:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001978:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000197c:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000197e:	4ba4      	ldr	r3, [pc, #656]	; (60001c10 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001980:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001982:	48a4      	ldr	r0, [pc, #656]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001986:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001988:	4aa4      	ldr	r2, [pc, #656]	; (60001c1c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000198a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000198c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001990:	f043 030c 	orr.w	r3, r3, #12
60001994:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001998:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000199c:	6803      	ldr	r3, [r0, #0]
6000199e:	f043 0302 	orr.w	r3, r3, #2
600019a2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019a6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019a8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019ac:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ae:	4b9c      	ldr	r3, [pc, #624]	; (60001c20 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019b0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019b2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b6:	4c9b      	ldr	r4, [pc, #620]	; (60001c24 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ba:	4a9b      	ldr	r2, [pc, #620]	; (60001c28 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019c0:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019c2:	68c3      	ldr	r3, [r0, #12]
600019c4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600019c8:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ca:	6a03      	ldr	r3, [r0, #32]
600019cc:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019ce:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d0:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d2:	6a03      	ldr	r3, [r0, #32]
600019d4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019d6:	4a95      	ldr	r2, [pc, #596]	; (60001c2c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d8:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019da:	4c95      	ldr	r4, [pc, #596]	; (60001c30 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019dc:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019de:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019e0:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019e2:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e4:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019ec:	f043 0301 	orr.w	r3, r3, #1
600019f0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f4:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019f8:	498e      	ldr	r1, [pc, #568]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019fe:	f043 0301 	orr.w	r3, r3, #1
60001a02:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a06:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a0a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a0c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a10:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a14:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a16:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a18:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1e:	6803      	ldr	r3, [r0, #0]
60001a20:	f023 0302 	bic.w	r3, r3, #2
60001a24:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a26:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a28:	4b83      	ldr	r3, [pc, #524]	; (60001c38 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2a:	4984      	ldr	r1, [pc, #528]	; (60001c3c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a2c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2e:	f843 2b04 	str.w	r2, [r3], #4
60001a32:	428b      	cmp	r3, r1
60001a34:	d1fb      	bne.n	60001a2e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a36:	4a77      	ldr	r2, [pc, #476]	; (60001c14 <configure_external_ram+0x304>)
60001a38:	6813      	ldr	r3, [r2, #0]
60001a3a:	f043 0301 	orr.w	r3, r3, #1
60001a3e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a40:	6813      	ldr	r3, [r2, #0]
60001a42:	f013 0301 	ands.w	r3, r3, #1
60001a46:	d1fb      	bne.n	60001a40 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a48:	487a      	ldr	r0, [pc, #488]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a4a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a4c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a50:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a52:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a56:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a58:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a5c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a60:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a64:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a68:	4975      	ldr	r1, [pc, #468]	; (60001c40 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a6a:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6e:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a72:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a76:	4873      	ldr	r0, [pc, #460]	; (60001c44 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a78:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a7c:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a80:	4c71      	ldr	r4, [pc, #452]	; (60001c48 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a82:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a86:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a8a:	4970      	ldr	r1, [pc, #448]	; (60001c4c <configure_external_ram+0x33c>)
60001a8c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a90:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a92:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a96:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9a:	485e      	ldr	r0, [pc, #376]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa8:	6943      	ldr	r3, [r0, #20]
60001aaa:	07da      	lsls	r2, r3, #31
60001aac:	d5fc      	bpl.n	60001aa8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aae:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab6:	4957      	ldr	r1, [pc, #348]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001aba:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac6:	694b      	ldr	r3, [r1, #20]
60001ac8:	07db      	lsls	r3, r3, #31
60001aca:	d5fc      	bpl.n	60001ac6 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001acc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ace:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	4a4f      	ldr	r2, [pc, #316]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	6953      	ldr	r3, [r2, #20]
60001ae6:	07df      	lsls	r7, r3, #31
60001ae8:	d5fc      	bpl.n	60001ae4 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aee:	4858      	ldr	r0, [pc, #352]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af0:	4948      	ldr	r1, [pc, #288]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001af8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	694b      	ldr	r3, [r1, #20]
60001b02:	07de      	lsls	r6, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001b06:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b0a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b0e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b10:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b12:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b14:	4293      	cmp	r3, r2
60001b16:	d165      	bne.n	60001be4 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001b18:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b20:	483c      	ldr	r0, [pc, #240]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b22:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b26:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b2a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b2e:	6943      	ldr	r3, [r0, #20]
60001b30:	07dd      	lsls	r5, r3, #31
60001b32:	d5fc      	bpl.n	60001b2e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b34:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b36:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b3c:	4a35      	ldr	r2, [pc, #212]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b40:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b44:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b48:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b4c:	6953      	ldr	r3, [r2, #20]
60001b4e:	07dc      	lsls	r4, r3, #31
60001b50:	d5fc      	bpl.n	60001b4c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b52:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b54:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b5c:	492d      	ldr	r1, [pc, #180]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b60:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b64:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b6c:	694b      	ldr	r3, [r1, #20]
60001b6e:	07d8      	lsls	r0, r3, #31
60001b70:	d5fc      	bpl.n	60001b6c <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b72:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b74:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b7c:	4a25      	ldr	r2, [pc, #148]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b7e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b80:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b84:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b88:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8c:	6953      	ldr	r3, [r2, #20]
60001b8e:	07d9      	lsls	r1, r3, #31
60001b90:	d5fc      	bpl.n	60001b8c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b92:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b94:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b98:	482d      	ldr	r0, [pc, #180]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	491e      	ldr	r1, [pc, #120]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b9c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b9e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ba2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	694b      	ldr	r3, [r1, #20]
60001bac:	07da      	lsls	r2, r3, #31
60001bae:	d5fc      	bpl.n	60001baa <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001bb0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bb8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001bba:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bbc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bbe:	4293      	cmp	r3, r2
60001bc0:	d050      	beq.n	60001c64 <configure_external_ram+0x354>
60001bc2:	2508      	movs	r5, #8
60001bc4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001bc8:	4922      	ldr	r1, [pc, #136]	; (60001c54 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bca:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001bcc:	4b22      	ldr	r3, [pc, #136]	; (60001c58 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001bce:	4a23      	ldr	r2, [pc, #140]	; (60001c5c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd0:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001bd2:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001bd4:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd6:	2301      	movs	r3, #1
60001bd8:	4821      	ldr	r0, [pc, #132]	; (60001c60 <configure_external_ram+0x350>)
60001bda:	4422      	add	r2, r4
60001bdc:	f000 f9f0 	bl	60001fc0 <__sm_set_pool_veneer>
}
60001be0:	b003      	add	sp, #12
60001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001be4:	4b1e      	ldr	r3, [pc, #120]	; (60001c60 <configure_external_ram+0x350>)
60001be6:	2200      	movs	r2, #0
60001be8:	e9c3 2200 	strd	r2, r2, [r3]
60001bec:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bf0:	b003      	add	sp, #12
60001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	401f8400 	.word	0x401f8400
60001c04:	000170f9 	.word	0x000170f9
60001c08:	400fc000 	.word	0x400fc000
60001c0c:	1ffffcff 	.word	0x1ffffcff
60001c10:	a0000300 	.word	0xa0000300
60001c14:	402a4000 	.word	0x402a4000
60001c18:	402a8000 	.word	0x402a8000
60001c1c:	ffff0012 	.word	0xffff0012
60001c20:	00f737ff 	.word	0x00f737ff
60001c24:	80000040 	.word	0x80000040
60001c28:	7cf0ff00 	.word	0x7cf0ff00
60001c2c:	830f00ff 	.word	0x830f00ff
60001c30:	00020063 	.word	0x00020063
60001c34:	5af05af0 	.word	0x5af05af0
60001c38:	402a4200 	.word	0x402a4200
60001c3c:	402a4300 	.word	0x402a4300
60001c40:	3018049f 	.word	0x3018049f
60001c44:	0a1806eb 	.word	0x0a1806eb
60001c48:	0a180638 	.word	0x0a180638
60001c4c:	26013206 	.word	0x26013206
60001c50:	00030004 	.word	0x00030004
60001c54:	70000000 	.word	0x70000000
60001c58:	70000000 	.word	0x70000000
60001c5c:	20001af2 	.word	0x20001af2
60001c60:	20001a40 	.word	0x20001a40
	FLEXSPI2_IPCR0 = addr;
60001c64:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c6c:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c6e:	4808      	ldr	r0, [pc, #32]	; (60001c90 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c70:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c74:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c78:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c7c:	6943      	ldr	r3, [r0, #20]
60001c7e:	07db      	lsls	r3, r3, #31
60001c80:	d5fc      	bpl.n	60001c7c <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c82:	2301      	movs	r3, #1
60001c84:	2510      	movs	r5, #16
60001c86:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c8a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c8c:	e79c      	b.n	60001bc8 <configure_external_ram+0x2b8>
60001c8e:	bf00      	nop
60001c90:	402a4000 	.word	0x402a4000

60001c94 <usb_pll_start>:
{
60001c94:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c96:	4a15      	ldr	r2, [pc, #84]	; (60001cec <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c98:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001ca6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001caa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cae:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001cb0:	f013 0f02 	tst.w	r3, #2
60001cb4:	d10e      	bne.n	60001cd4 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001cba:	d00f      	beq.n	60001cdc <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001cbc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001cc0:	d00e      	beq.n	60001ce0 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001cc2:	2b00      	cmp	r3, #0
60001cc4:	daf3      	bge.n	60001cae <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001cc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001cca:	d10b      	bne.n	60001ce4 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ccc:	065b      	lsls	r3, r3, #25
60001cce:	d50b      	bpl.n	60001ce8 <usb_pll_start+0x54>
}
60001cd0:	bcf0      	pop	{r4, r5, r6, r7}
60001cd2:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cd4:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cd6:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cd8:	6190      	str	r0, [r2, #24]
			continue;
60001cda:	e7e8      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cdc:	6155      	str	r5, [r2, #20]
			continue;
60001cde:	e7e6      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ce0:	6156      	str	r6, [r2, #20]
			continue;
60001ce2:	e7e4      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ce4:	6191      	str	r1, [r2, #24]
			continue;
60001ce6:	e7e2      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ce8:	6157      	str	r7, [r2, #20]
			continue;
60001cea:	e7e0      	b.n	60001cae <usb_pll_start+0x1a>
60001cec:	400d8000 	.word	0x400d8000

60001cf0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cf0:	4a3f      	ldr	r2, [pc, #252]	; (60001df0 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cf2:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cf4:	493f      	ldr	r1, [pc, #252]	; (60001df4 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf6:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cfa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cfe:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d02:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001df8 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d06:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d0a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dfc <tempmon_init+0x10c>
{
60001d0e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d14:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d18:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d1c:	4d38      	ldr	r5, [pc, #224]	; (60001e00 <tempmon_init+0x110>)
60001d1e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d20:	4c38      	ldr	r4, [pc, #224]	; (60001e04 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d22:	4839      	ldr	r0, [pc, #228]	; (60001e08 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d24:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d26:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d2a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d2c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d34:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d38:	ee07 1a10 	vmov	s14, r1
60001d3c:	4b33      	ldr	r3, [pc, #204]	; (60001e0c <tempmon_init+0x11c>)
60001d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d42:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d48:	4931      	ldr	r1, [pc, #196]	; (60001e10 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d52:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d56:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d5a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d5e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d62:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d6a:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d6e:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d76:	4827      	ldr	r0, [pc, #156]	; (60001e14 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d78:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d80:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d84:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d8c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d90:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d98:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001da0:	ee16 3a10 	vmov	r3, s12
60001da4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dac:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001db0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001dbe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001dc2:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001dc4:	4914      	ldr	r1, [pc, #80]	; (60001e18 <tempmon_init+0x128>)
60001dc6:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001dce:	f043 0302 	orr.w	r3, r3, #2
60001dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001dd6:	4b11      	ldr	r3, [pc, #68]	; (60001e1c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001dd8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001ddc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001de4:	2201      	movs	r2, #1
}
60001de6:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dec:	4770      	bx	lr
60001dee:	bf00      	nop
60001df0:	400d8100 	.word	0x400d8100
60001df4:	401f4400 	.word	0x401f4400
60001df8:	42aa0000 	.word	0x42aa0000
60001dfc:	42b40000 	.word	0x42b40000
60001e00:	20001ab8 	.word	0x20001ab8
60001e04:	20001ab4 	.word	0x20001ab4
60001e08:	20001abc 	.word	0x20001abc
60001e0c:	20001ac0 	.word	0x20001ac0
60001e10:	0fff0000 	.word	0x0fff0000
60001e14:	e000e400 	.word	0xe000e400
60001e18:	20001400 	.word	0x20001400
60001e1c:	00001675 	.word	0x00001675

60001e20 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e20:	4b31      	ldr	r3, [pc, #196]	; (60001ee8 <usb_init+0xc8>)
60001e22:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001e26:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e28:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e2c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001e30:	f000 f8e2 	bl	60001ff8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e34:	4a2d      	ldr	r2, [pc, #180]	; (60001eec <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001e36:	492e      	ldr	r1, [pc, #184]	; (60001ef0 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e3c:	482d      	ldr	r0, [pc, #180]	; (60001ef4 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e3e:	f043 0303 	orr.w	r3, r3, #3
60001e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e46:	4b2c      	ldr	r3, [pc, #176]	; (60001ef8 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e48:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e4c:	6802      	ldr	r2, [r0, #0]
60001e4e:	421a      	tst	r2, r3
60001e50:	d103      	bne.n	60001e5a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e52:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e56:	079a      	lsls	r2, r3, #30
60001e58:	d01b      	beq.n	60001e92 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e5a:	4a25      	ldr	r2, [pc, #148]	; (60001ef0 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e60:	4b24      	ldr	r3, [pc, #144]	; (60001ef4 <usb_init+0xd4>)
60001e62:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e64:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e68:	f043 0302 	orr.w	r3, r3, #2
60001e6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e70:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e74:	079b      	lsls	r3, r3, #30
60001e76:	d4fb      	bmi.n	60001e70 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e80:	4b1c      	ldr	r3, [pc, #112]	; (60001ef4 <usb_init+0xd4>)
60001e82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e86:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e8a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e8c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e8e:	f000 f89f 	bl	60001fd0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e92:	4a18      	ldr	r2, [pc, #96]	; (60001ef4 <usb_init+0xd4>)
60001e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e98:	4c15      	ldr	r4, [pc, #84]	; (60001ef0 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e9a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e9c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e9e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea0:	4b16      	ldr	r3, [pc, #88]	; (60001efc <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001ea2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ea8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eac:	4618      	mov	r0, r3
60001eae:	f000 f88b 	bl	60001fc8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001eb2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eb6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001eb8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ebc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001ec0:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001ec2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001ec6:	641a      	str	r2, [r3, #64]	; 0x40
60001ec8:	4b0d      	ldr	r3, [pc, #52]	; (60001f00 <usb_init+0xe0>)
60001eca:	4a0e      	ldr	r2, [pc, #56]	; (60001f04 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ecc:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ed4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ed8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001edc:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ede:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001ee2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ee6:	bd10      	pop	{r4, pc}
60001ee8:	400d8000 	.word	0x400d8000
60001eec:	400fc000 	.word	0x400fc000
60001ef0:	402e0000 	.word	0x402e0000
60001ef4:	400d9000 	.word	0x400d9000
60001ef8:	001e1c00 	.word	0x001e1c00
60001efc:	20000000 	.word	0x20000000
60001f00:	20001400 	.word	0x20001400
60001f04:	0000185d 	.word	0x0000185d

60001f08 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001f08:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001f0a:	4b0e      	ldr	r3, [pc, #56]	; (60001f44 <_reboot_Teensyduino_+0x3c>)
60001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001f0e:	079b      	lsls	r3, r3, #30
60001f10:	d400      	bmi.n	60001f14 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001f12:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001f14:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001f16:	4b0c      	ldr	r3, [pc, #48]	; (60001f48 <_reboot_Teensyduino_+0x40>)
60001f18:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f1a:	4a0c      	ldr	r2, [pc, #48]	; (60001f4c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001f1c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f24:	490a      	ldr	r1, [pc, #40]	; (60001f50 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f26:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f2a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f2c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f2e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001f36:	4807      	ldr	r0, [pc, #28]	; (60001f54 <_reboot_Teensyduino_+0x4c>)
60001f38:	4a07      	ldr	r2, [pc, #28]	; (60001f58 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f3c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3e:	689b      	ldr	r3, [r3, #8]
60001f40:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f42:	bf00      	nop
60001f44:	401f4400 	.word	0x401f4400
60001f48:	402e0000 	.word	0x402e0000
60001f4c:	400ac000 	.word	0x400ac000
60001f50:	00200003 	.word	0x00200003
60001f54:	20208000 	.word	0x20208000
60001f58:	eb120000 	.word	0xeb120000

60001f5c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f5c:	4b10      	ldr	r3, [pc, #64]	; (60001fa0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f5e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f60:	4a10      	ldr	r2, [pc, #64]	; (60001fa4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f62:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f64:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f68:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f6a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f6c:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f72:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f76:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f78:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f7a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f7c:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f7e:	061b      	lsls	r3, r3, #24
60001f80:	d4fc      	bmi.n	60001f7c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f82:	4a09      	ldr	r2, [pc, #36]	; (60001fa8 <analog_init+0x4c>)
60001f84:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f88:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f8a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f8c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f94:	d1fb      	bne.n	60001f8e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f96:	4a05      	ldr	r2, [pc, #20]	; (60001fac <analog_init+0x50>)
60001f98:	7013      	strb	r3, [r2, #0]
}
60001f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f9e:	4770      	bx	lr
60001fa0:	400fc000 	.word	0x400fc000
60001fa4:	400c4000 	.word	0x400c4000
60001fa8:	400c8000 	.word	0x400c8000
60001fac:	20001af1 	.word	0x20001af1

60001fb0 <_init>:
60001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001fb2:	bf00      	nop
60001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001fb6:	bc08      	pop	{r3}
60001fb8:	469e      	mov	lr, r3
60001fba:	4770      	bx	lr
60001fbc:	0000      	movs	r0, r0
	...

60001fc0 <__sm_set_pool_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__sm_set_pool_veneer+0x4>
60001fc4:	00002a51 	.word	0x00002a51

60001fc8 <__memset_veneer>:
60001fc8:	f85f f000 	ldr.w	pc, [pc]	; 60001fcc <__memset_veneer+0x4>
60001fcc:	00003359 	.word	0x00003359

60001fd0 <__delay_veneer>:
60001fd0:	f85f f000 	ldr.w	pc, [pc]	; 60001fd4 <__delay_veneer+0x4>
60001fd4:	0000125d 	.word	0x0000125d

60001fd8 <____libc_init_array_veneer>:
60001fd8:	f85f f000 	ldr.w	pc, [pc]	; 60001fdc <____libc_init_array_veneer+0x4>
60001fdc:	0000342d 	.word	0x0000342d

60001fe0 <__main_veneer>:
60001fe0:	f85f f000 	ldr.w	pc, [pc]	; 60001fe4 <__main_veneer+0x4>
60001fe4:	00001305 	.word	0x00001305

60001fe8 <__set_arm_clock_veneer>:
60001fe8:	f85f f000 	ldr.w	pc, [pc]	; 60001fec <__set_arm_clock_veneer+0x4>
60001fec:	00000f6d 	.word	0x00000f6d

60001ff0 <__pwm_init_veneer>:
60001ff0:	f85f f000 	ldr.w	pc, [pc]	; 60001ff4 <__pwm_init_veneer+0x4>
60001ff4:	000028ed 	.word	0x000028ed

60001ff8 <__usb_init_serialnumber_veneer>:
60001ff8:	f85f f000 	ldr.w	pc, [pc]	; 60001ffc <__usb_init_serialnumber_veneer+0x4>
60001ffc:	00001fcd 	.word	0x00001fcd

60002000 <__frame_dummy_init_array_entry>:
60002000:	00000045 00000361                       E...a...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	200016c0 	.word	0x200016c0
      3c:	200016c0 	.word	0x200016c0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20001a54 	.word	0x20001a54
      64:	60008000 	.word	0x60008000

00000068 <setup>:
      68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Clamp angle to reasonable servo range
  float clampedAngle = constrain(angle, -45, 180);
  
  // Map angle to PWM range
  // -45° = SERVO_MIN (150), +180° = SERVO_MAX (600)
  int pwmValue = map(clampedAngle * 10, -450, 1800, SERVO_MIN, SERVO_MAX);
      6c:	4d23      	ldr	r5, [pc, #140]	; (fc <setup+0x94>)
      6e:	f240 28ee 	movw	r8, #750	; 0x2ee
      72:	4c23      	ldr	r4, [pc, #140]	; (100 <setup+0x98>)
      74:	4f23      	ldr	r7, [pc, #140]	; (104 <setup+0x9c>)
      76:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 128 <setup+0xc0>
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
      7a:	682e      	ldr	r6, [r5, #0]
      7c:	f002 fb8c 	bl	2798 <yield>
			timer->_ms--;
      80:	7823      	ldrb	r3, [r4, #0]
      82:	b373      	cbz	r3, e2 <setup+0x7a>
			break;
      84:	783b      	ldrb	r3, [r7, #0]
      86:	07db      	lsls	r3, r3, #31
      88:	d52b      	bpl.n	e2 <setup+0x7a>
      8a:	682b      	ldr	r3, [r5, #0]
      8c:	f8d9 2000 	ldr.w	r2, [r9]
      90:	1a9b      	subs	r3, r3, r2
      92:	2b0e      	cmp	r3, #14
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	d925      	bls.n	e2 <setup+0x7a>
		buf[sizeof(buf) - 1] = '0';
      96:	2124      	movs	r1, #36	; 0x24
      98:	481b      	ldr	r0, [pc, #108]	; (108 <setup+0xa0>)
		i = sizeof(buf) - 1;
      9a:	f002 faff 	bl	269c <usb_serial_write>
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	481b      	ldr	r0, [pc, #108]	; (10c <setup+0xa4>)
      a0:	f000 fea2 	bl	de8 <Print::println()>
		} while (n > 0);
      a4:	481a      	ldr	r0, [pc, #104]	; (110 <setup+0xa8>)
      a6:	f003 fb47 	bl	3738 <___ZN7TwoWire5beginEv_veneer>
      aa:	2100      	movs	r1, #0
}
      ac:	4819      	ldr	r0, [pc, #100]	; (114 <setup+0xac>)
      ae:	f000 fcf3 	bl	a98 <Adafruit_PWMServoDriver::begin(unsigned char)>
  pwm.setOscillatorFrequency(27000000);
      b2:	4919      	ldr	r1, [pc, #100]	; (118 <setup+0xb0>)
      b4:	4817      	ldr	r0, [pc, #92]	; (114 <setup+0xac>)
      b6:	f000 fd53 	bl	b60 <Adafruit_PWMServoDriver::setOscillatorFrequency(unsigned long)>
  pwm.setPWMFreq(SERVO_FREQ);
      ba:	ed9f 0a18 	vldr	s0, [pc, #96]	; 11c <setup+0xb4>
      be:	4815      	ldr	r0, [pc, #84]	; (114 <setup+0xac>)
      c0:	f000 fc4a 	bl	958 <Adafruit_PWMServoDriver::setPWMFreq(float)>
  delay(10);
      c4:	200a      	movs	r0, #10
      c6:	f001 f8c9 	bl	125c <delay>
      ca:	682a      	ldr	r2, [r5, #0]
  animationStartTime = millis();
      cc:	4b14      	ldr	r3, [pc, #80]	; (120 <setup+0xb8>)
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      ce:	2123      	movs	r1, #35	; 0x23
      d0:	4814      	ldr	r0, [pc, #80]	; (124 <setup+0xbc>)
      d2:	601a      	str	r2, [r3, #0]
      d4:	f002 fae2 	bl	269c <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      d8:	480c      	ldr	r0, [pc, #48]	; (10c <setup+0xa4>)
}
      da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      de:	f000 be83 	b.w	de8 <Print::println()>
			uint32_t elapsed = systick_millis_count - millis_begin;
      e2:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
      e4:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
      e6:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
      e8:	b12a      	cbz	r2, f6 <setup+0x8e>
				if (elapsed > 2000) break;
      ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
      ee:	d8d2      	bhi.n	96 <setup+0x2e>
			yield();
      f0:	f002 fb52 	bl	2798 <yield>
      f4:	e7c2      	b.n	7c <setup+0x14>
				if (elapsed > 750) break;
      f6:	4543      	cmp	r3, r8
      f8:	d9fa      	bls.n	f0 <setup+0x88>
      fa:	e7cc      	b.n	96 <setup+0x2e>
      fc:	20001acc 	.word	0x20001acc
     100:	20001afa 	.word	0x20001afa
     104:	20001af9 	.word	0x20001af9
     108:	20000698 	.word	0x20000698
     10c:	20000890 	.word	0x20000890
     110:	200008a0 	.word	0x200008a0
     114:	20001a6c 	.word	0x20001a6c
     118:	019bfcc0 	.word	0x019bfcc0
     11c:	42480000 	.word	0x42480000
     120:	20001a28 	.word	0x20001a28
     124:	200006c0 	.word	0x200006c0
     128:	20001adc 	.word	0x20001adc

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
     12c:	00000000 	.word	0x00000000

00000130 <getHeadRotationAtTime(float)>:
  if (time > 3.33) {
     130:	ed9f 1b27 	vldr	d1, [pc, #156]	; 1d0 <getHeadRotationAtTime(float)+0xa0>
     134:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
float getHeadRotationAtTime(float time) {
     138:	b510      	push	{r4, lr}
  if (time > 3.33) {
     13a:	eeb4 7bc1 	vcmpe.f64	d7, d1
     13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     142:	dc25      	bgt.n	190 <getHeadRotationAtTime(float)+0x60>
  for (int i = 0; i < numKeyframes - 1; i++) {
     144:	4b24      	ldr	r3, [pc, #144]	; (1d8 <getHeadRotationAtTime(float)+0xa8>)
     146:	4c25      	ldr	r4, [pc, #148]	; (1dc <getHeadRotationAtTime(float)+0xac>)
     148:	6818      	ldr	r0, [r3, #0]
     14a:	3801      	subs	r0, #1
     14c:	2800      	cmp	r0, #0
     14e:	dd18      	ble.n	182 <getHeadRotationAtTime(float)+0x52>
     150:	2301      	movs	r3, #1
     152:	4622      	mov	r2, r4
    if (time >= headRotationKeyframes[i].time && time <= headRotationKeyframes[i + 1].time) {
     154:	edd2 7a01 	vldr	s15, [r2, #4]
     158:	f103 3cff 	add.w	ip, r3, #4294967295
     15c:	4619      	mov	r1, r3
     15e:	eef4 7ac0 	vcmpe.f32	s15, s0
     162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     166:	d806      	bhi.n	176 <getHeadRotationAtTime(float)+0x46>
     168:	ed92 7a04 	vldr	s14, [r2, #16]
     16c:	eeb4 7ac0 	vcmpe.f32	s14, s0
     170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     174:	da13      	bge.n	19e <getHeadRotationAtTime(float)+0x6e>
  for (int i = 0; i < numKeyframes - 1; i++) {
     176:	4288      	cmp	r0, r1
     178:	f102 020c 	add.w	r2, r2, #12
     17c:	f103 0301 	add.w	r3, r3, #1
     180:	dce8      	bgt.n	154 <getHeadRotationAtTime(float)+0x24>
  return headRotationKeyframes[numKeyframes - 1].value;
     182:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     186:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     18a:	ed94 0a02 	vldr	s0, [r4, #8]
}
     18e:	bd10      	pop	{r4, pc}
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
     190:	eeb0 0b47 	vmov.f64	d0, d7
     194:	f002 fca0 	bl	2ad8 <fmod>
    time = fmod(time, 3.33);  // Loop the animation
     198:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     19c:	e7d2      	b.n	144 <getHeadRotationAtTime(float)+0x14>
      float factor = (time - t1) / (t2 - t1);
     19e:	ee30 0a67 	vsub.f32	s0, s0, s15
      float v2 = headRotationKeyframes[i + 1].value;
     1a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      float factor = (time - t1) / (t2 - t1);
     1a6:	ee37 7a67 	vsub.f32	s14, s14, s15
      float v1 = headRotationKeyframes[i].value;
     1aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
     1ae:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
      float factor = (time - t1) / (t2 - t1);
     1b2:	eec0 6a07 	vdiv.f32	s13, s0, s14
      float v2 = headRotationKeyframes[i + 1].value;
     1b6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
      float v1 = headRotationKeyframes[i].value;
     1ba:	ed9c 0a02 	vldr	s0, [ip, #8]
      return v1 + (v2 - v1) * factor;
     1be:	edd4 7a02 	vldr	s15, [r4, #8]
     1c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
     1c6:	eea7 0aa6 	vfma.f32	s0, s15, s13
}
     1ca:	bd10      	pop	{r4, pc}
     1cc:	f3af 8000 	nop.w
     1d0:	0a3d70a4 	.word	0x0a3d70a4
     1d4:	400aa3d7 	.word	0x400aa3d7
     1d8:	2000114c 	.word	0x2000114c
     1dc:	2000108c 	.word	0x2000108c

000001e0 <loop>:
void loop() {
     1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1e2:	4f51      	ldr	r7, [pc, #324]	; (328 <loop+0x148>)
  float animationTime = (currentTime - animationStartTime) / 1000.0;
     1e4:	4e51      	ldr	r6, [pc, #324]	; (32c <loop+0x14c>)
     1e6:	683d      	ldr	r5, [r7, #0]
     1e8:	6833      	ldr	r3, [r6, #0]
     1ea:	1aeb      	subs	r3, r5, r3
     1ec:	ee07 3a90 	vmov	s15, r3
     1f0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 318 <loop+0x138>
     1f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
void loop() {
     1f8:	ed2d 8b04 	vpush	{d8-d9}
  float animationTime = (currentTime - animationStartTime) / 1000.0;
     1fc:	ee87 8b06 	vdiv.f64	d8, d7, d6
     200:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
  float headAngle = getHeadRotationAtTime(animationTime);
     204:	eeb0 0a48 	vmov.f32	s0, s16
     208:	f7ff ff92 	bl	130 <getHeadRotationAtTime(float)>
  float clampedAngle = constrain(angle, -45, 180);
     20c:	eddf 7a48 	vldr	s15, [pc, #288]	; 330 <loop+0x150>
  float headAngle = getHeadRotationAtTime(animationTime);
     210:	eeb0 9a40 	vmov.f32	s18, s0
  float clampedAngle = constrain(angle, -45, 180);
     214:	eeb4 0ae7 	vcmpe.f32	s0, s15
     218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     21c:	d40a      	bmi.n	234 <loop+0x54>
     21e:	eddf 7a45 	vldr	s15, [pc, #276]	; 334 <loop+0x154>
     222:	eeb4 0ae7 	vcmpe.f32	s0, s15
     226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     22a:	dd1f      	ble.n	26c <loop+0x8c>
     22c:	f44f 7316 	mov.w	r3, #600	; 0x258
     230:	461c      	mov	r4, r3
     232:	e001      	b.n	238 <loop+0x58>
     234:	2396      	movs	r3, #150	; 0x96
     236:	461c      	mov	r4, r3
  pwm.setPWM(HEAD_SERVO_CHANNEL, 0, servoPWM);
     238:	2200      	movs	r2, #0
     23a:	483f      	ldr	r0, [pc, #252]	; (338 <loop+0x158>)
     23c:	4611      	mov	r1, r2
     23e:	f000 fc6d 	bl	b1c <Adafruit_PWMServoDriver::setPWM(unsigned char, unsigned short, unsigned short)>
  if (currentTime - lastFrameTime >= 100) {
     242:	4a3e      	ldr	r2, [pc, #248]	; (33c <loop+0x15c>)
     244:	6813      	ldr	r3, [r2, #0]
     246:	1aeb      	subs	r3, r5, r3
     248:	2b63      	cmp	r3, #99	; 0x63
     24a:	d83f      	bhi.n	2cc <loop+0xec>
  if (animationTime >= 3.33) {
     24c:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
     250:	ed9f 7b33 	vldr	d7, [pc, #204]	; 320 <loop+0x140>
     254:	eeb4 8bc7 	vcmpe.f64	d8, d7
     258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     25c:	da26      	bge.n	2ac <loop+0xcc>
  delay(FRAME_DELAY_MS);  // Maintain 60 FPS timing
     25e:	2010      	movs	r0, #16
}
     260:	ecbd 8b04 	vpop	{d8-d9}
     264:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(FRAME_DELAY_MS);  // Maintain 60 FPS timing
     268:	f000 bff8 	b.w	125c <delay>
// mapping.
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	// when the input is a float or double, do all math using the input's type
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
     26c:	eddf 7a34 	vldr	s15, [pc, #208]	; 340 <loop+0x160>
     270:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
     274:	ed9f 6a33 	vldr	s12, [pc, #204]	; 344 <loop+0x164>
     278:	eeb0 7a67 	vmov.f32	s14, s15
     27c:	eddf 6a32 	vldr	s13, [pc, #200]	; 348 <loop+0x168>
     280:	eea0 7a25 	vfma.f32	s14, s0, s11
     284:	ee27 7a27 	vmul.f32	s14, s14, s15
     288:	eec7 7a06 	vdiv.f32	s15, s14, s12
     28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
  int pwmValue = map(clampedAngle * 10, -450, 1800, SERVO_MIN, SERVO_MAX);
     290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     294:	ee17 4a90 	vmov	r4, s15
     298:	f5b4 7f16 	cmp.w	r4, #600	; 0x258
     29c:	bfa8      	it	ge
     29e:	f44f 7416 	movge.w	r4, #600	; 0x258
     2a2:	2c96      	cmp	r4, #150	; 0x96
     2a4:	bfb8      	it	lt
     2a6:	2496      	movlt	r4, #150	; 0x96
  pwm.setPWM(HEAD_SERVO_CHANNEL, 0, servoPWM);
     2a8:	b2a3      	uxth	r3, r4
     2aa:	e7c5      	b.n	238 <loop+0x58>
     2ac:	683b      	ldr	r3, [r7, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2ae:	2117      	movs	r1, #23
     2b0:	4826      	ldr	r0, [pc, #152]	; (34c <loop+0x16c>)
    animationStartTime = millis();
     2b2:	6033      	str	r3, [r6, #0]
     2b4:	f002 f9f2 	bl	269c <usb_serial_write>
     2b8:	4825      	ldr	r0, [pc, #148]	; (350 <loop+0x170>)
     2ba:	f000 fd95 	bl	de8 <Print::println()>
  delay(FRAME_DELAY_MS);  // Maintain 60 FPS timing
     2be:	2010      	movs	r0, #16
}
     2c0:	ecbd 8b04 	vpop	{d8-d9}
     2c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(FRAME_DELAY_MS);  // Maintain 60 FPS timing
     2c8:	f000 bfc8 	b.w	125c <delay>
     2cc:	2106      	movs	r1, #6
     2ce:	4821      	ldr	r0, [pc, #132]	; (354 <loop+0x174>)
    lastFrameTime = currentTime;
     2d0:	6015      	str	r5, [r2, #0]
     2d2:	f002 f9e3 	bl	269c <usb_serial_write>
    Serial.print(animationTime, 2);
     2d6:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     2da:	2102      	movs	r1, #2
     2dc:	481c      	ldr	r0, [pc, #112]	; (350 <loop+0x170>)
     2de:	eeb0 0b48 	vmov.f64	d0, d8
     2e2:	f000 fd91 	bl	e08 <Print::printFloat(double, unsigned char)>
     2e6:	2110      	movs	r1, #16
     2e8:	481b      	ldr	r0, [pc, #108]	; (358 <loop+0x178>)
     2ea:	f002 f9d7 	bl	269c <usb_serial_write>
     2ee:	eeb7 0ac9 	vcvt.f64.f32	d0, s18
     2f2:	2101      	movs	r1, #1
     2f4:	4816      	ldr	r0, [pc, #88]	; (350 <loop+0x170>)
     2f6:	f000 fd87 	bl	e08 <Print::printFloat(double, unsigned char)>
     2fa:	210a      	movs	r1, #10
     2fc:	4817      	ldr	r0, [pc, #92]	; (35c <loop+0x17c>)
     2fe:	f002 f9cd 	bl	269c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     302:	4621      	mov	r1, r4
     304:	4812      	ldr	r0, [pc, #72]	; (350 <loop+0x170>)
     306:	f000 fd63 	bl	dd0 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     30a:	4811      	ldr	r0, [pc, #68]	; (350 <loop+0x170>)
     30c:	f000 fd6c 	bl	de8 <Print::println()>
     310:	e79e      	b.n	250 <loop+0x70>
     312:	bf00      	nop
     314:	f3af 8000 	nop.w
     318:	00000000 	.word	0x00000000
     31c:	408f4000 	.word	0x408f4000
     320:	0a3d70a4 	.word	0x0a3d70a4
     324:	400aa3d7 	.word	0x400aa3d7
     328:	20001acc 	.word	0x20001acc
     32c:	20001a28 	.word	0x20001a28
     330:	c2340000 	.word	0xc2340000
     334:	43340000 	.word	0x43340000
     338:	20001a6c 	.word	0x20001a6c
     33c:	20001a50 	.word	0x20001a50
     340:	43e10000 	.word	0x43e10000
     344:	450ca000 	.word	0x450ca000
     348:	43160000 	.word	0x43160000
     34c:	20000680 	.word	0x20000680
     350:	20000890 	.word	0x20000890
     354:	20000658 	.word	0x20000658
     358:	20000660 	.word	0x20000660
     35c:	20000674 	.word	0x20000674

00000360 <_GLOBAL__sub_I_pwm>:
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();
     360:	4801      	ldr	r0, [pc, #4]	; (368 <_GLOBAL__sub_I_pwm+0x8>)
     362:	f000 ba99 	b.w	898 <Adafruit_PWMServoDriver::Adafruit_PWMServoDriver()>
     366:	bf00      	nop
     368:	20001a6c 	.word	0x20001a6c

0000036c <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     36c:	2000      	movs	r0, #0
     36e:	4770      	bx	lr

00000370 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     370:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     374:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     378:	1a10      	subs	r0, r2, r0
     37a:	4770      	bx	lr

0000037c <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     37c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     380:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     384:	429a      	cmp	r2, r3
     386:	d905      	bls.n	394 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     388:	1c5a      	adds	r2, r3, #1
     38a:	4403      	add	r3, r0
     38c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     390:	7e98      	ldrb	r0, [r3, #26]
     392:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     394:	f04f 30ff 	mov.w	r0, #4294967295
	}
     398:	4770      	bx	lr
     39a:	bf00      	nop

0000039c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     39c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     3a0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     3a4:	429a      	cmp	r2, r3
     3a6:	d902      	bls.n	3ae <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     3a8:	4418      	add	r0, r3
     3aa:	7e80      	ldrb	r0, [r0, #26]
     3ac:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     3ae:	f04f 30ff 	mov.w	r0, #4294967295
	}
     3b2:	4770      	bx	lr

000003b4 <TwoWire::flush()>:
	virtual void flush(void) {
	}
     3b4:	4770      	bx	lr
     3b6:	bf00      	nop

000003b8 <TwoWire::write(unsigned char)>:
{
     3b8:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
     3ba:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
     3be:	b178      	cbz	r0, 3e0 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     3c0:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
     3c4:	2a88      	cmp	r2, #136	; 0x88
     3c6:	d903      	bls.n	3d0 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     3c8:	2201      	movs	r2, #1
			return 0;
     3ca:	2000      	movs	r0, #0
     3cc:	605a      	str	r2, [r3, #4]
     3ce:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
     3d0:	f102 0c01 	add.w	ip, r2, #1
		return 1;
     3d4:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
     3d6:	441a      	add	r2, r3
     3d8:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
     3dc:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop

000003e4 <TwoWire::write(unsigned char const*, unsigned int)>:
{
     3e4:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
     3e6:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
     3ea:	b90c      	cbnz	r4, 3f0 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
     3ec:	4620      	mov	r0, r4
     3ee:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     3f0:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
     3f4:	4605      	mov	r5, r0
     3f6:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
     3fa:	42a2      	cmp	r2, r4
     3fc:	d80d      	bhi.n	41a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     3fe:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
     400:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
     404:	4622      	mov	r2, r4
     406:	4418      	add	r0, r3
     408:	f000 ff84 	bl	1314 <memcpy>
		txBufferLength += quantity;
     40c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
     410:	4620      	mov	r0, r4
		txBufferLength += quantity;
     412:	4423      	add	r3, r4
     414:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
     418:	bd38      	pop	{r3, r4, r5, pc}
     41a:	2201      	movs	r2, #1
     41c:	6042      	str	r2, [r0, #4]
     41e:	e7ef      	b.n	400 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00000420 <TwoWire::force_clock()>:
{
     420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     424:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     428:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     42a:	7e01      	ldrb	r1, [r0, #24]
{
     42c:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     42e:	7e43      	ldrb	r3, [r0, #25]
{
     430:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     432:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     436:	4a38      	ldr	r2, [pc, #224]	; (518 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     438:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     43c:	4f37      	ldr	r7, [pc, #220]	; (51c <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     43e:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     444:	eb02 1501 	add.w	r5, r2, r1, lsl #4
     448:	0109      	lsls	r1, r1, #4
     44a:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
     44c:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     450:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
     454:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     458:	011b      	lsls	r3, r3, #4
     45a:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
     45c:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     45e:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
     462:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
     466:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     46a:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     46c:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
     46e:	492c      	ldr	r1, [pc, #176]	; (520 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
     470:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     472:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     476:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
     478:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
     47c:	686b      	ldr	r3, [r5, #4]
     47e:	4333      	orrs	r3, r6
     480:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     482:	4b28      	ldr	r3, [pc, #160]	; (524 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
     484:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     486:	683a      	ldr	r2, [r7, #0]
     488:	fba3 3202 	umull	r3, r2, r3, r2
     48c:	0c92      	lsrs	r2, r2, #18
     48e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     492:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     494:	684b      	ldr	r3, [r1, #4]
     496:	1b1b      	subs	r3, r3, r4
     498:	429a      	cmp	r2, r3
     49a:	d8fb      	bhi.n	494 <TwoWire::force_clock()+0x74>
     49c:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
     4a0:	4a1f      	ldr	r2, [pc, #124]	; (520 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     4a2:	f8df e080 	ldr.w	lr, [pc, #128]	; 524 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
     4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
     4aa:	4203      	tst	r3, r0
     4ac:	d002      	beq.n	4b4 <TwoWire::force_clock()+0x94>
     4ae:	68ab      	ldr	r3, [r5, #8]
     4b0:	4233      	tst	r3, r6
     4b2:	d12f      	bne.n	514 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
     4b4:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
     4b8:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     4ba:	6839      	ldr	r1, [r7, #0]
     4bc:	fbae 3101 	umull	r3, r1, lr, r1
     4c0:	0c89      	lsrs	r1, r1, #18
     4c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     4c6:	6853      	ldr	r3, [r2, #4]
     4c8:	1b1b      	subs	r3, r3, r4
     4ca:	4299      	cmp	r1, r3
     4cc:	d8fb      	bhi.n	4c6 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
     4ce:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
     4d2:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     4d4:	6839      	ldr	r1, [r7, #0]
     4d6:	fbae 3101 	umull	r3, r1, lr, r1
     4da:	0c89      	lsrs	r1, r1, #18
     4dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     4e0:	6853      	ldr	r3, [r2, #4]
     4e2:	1b1b      	subs	r3, r3, r4
     4e4:	4299      	cmp	r1, r3
     4e6:	d8fb      	bhi.n	4e0 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
     4e8:	f1bc 0c01 	subs.w	ip, ip, #1
     4ec:	d1db      	bne.n	4a6 <TwoWire::force_clock()+0x86>
	bool ret = false;
     4ee:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     4f0:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     4f4:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     4f6:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
     4fa:	68db      	ldr	r3, [r3, #12]
     4fc:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     500:	f899 3019 	ldrb.w	r3, [r9, #25]
     504:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
     508:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
     50c:	6013      	str	r3, [r2, #0]
}
     50e:	b003      	add	sp, #12
     510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
     514:	2001      	movs	r0, #1
     516:	e7eb      	b.n	4f0 <TwoWire::force_clock()+0xd0>
     518:	200002e8 	.word	0x200002e8
     51c:	2000088c 	.word	0x2000088c
     520:	e0001000 	.word	0xe0001000
     524:	431bde83 	.word	0x431bde83

00000528 <TwoWire::wait_idle()>:
	return systick_millis_count;
     528:	4a0e      	ldr	r2, [pc, #56]	; (564 <TwoWire::wait_idle()+0x3c>)
{
     52a:	b510      	push	{r4, lr}
     52c:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     52e:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     530:	e005      	b.n	53e <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     532:	01db      	lsls	r3, r3, #7
     534:	d407      	bmi.n	546 <TwoWire::wait_idle()+0x1e>
     536:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     538:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
     53a:	2b10      	cmp	r3, #16
     53c:	d808      	bhi.n	550 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
     53e:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     540:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
     544:	d1f5      	bne.n	532 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
     546:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     54a:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     54c:	6163      	str	r3, [r4, #20]
}
     54e:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
     550:	f7ff ff66 	bl	420 <TwoWire::force_clock()>
     554:	2800      	cmp	r0, #0
     556:	d0fa      	beq.n	54e <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
     558:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     55c:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     55e:	6163      	str	r3, [r4, #20]
	return true;
     560:	e7f5      	b.n	54e <TwoWire::wait_idle()+0x26>
     562:	bf00      	nop
     564:	20001acc 	.word	0x20001acc

00000568 <TwoWire::endTransmission(unsigned char)>:
{
     568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
     56c:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     570:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
     572:	f1ba 0f00 	cmp.w	sl, #0
     576:	d04f      	beq.n	618 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
     578:	4681      	mov	r9, r0
     57a:	4688      	mov	r8, r1
     57c:	f7ff ffd4 	bl	528 <TwoWire::wait_idle()>
     580:	2800      	cmp	r0, #0
     582:	d049      	beq.n	618 <TwoWire::endTransmission(unsigned char)+0xb0>
     584:	4e37      	ldr	r6, [pc, #220]	; (664 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
     586:	2400      	movs	r4, #0
     588:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     58a:	e018      	b.n	5be <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
     58c:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     58e:	0519      	lsls	r1, r3, #20
     590:	d451      	bmi.n	636 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
     592:	04da      	lsls	r2, r3, #19
     594:	d455      	bmi.n	642 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
     596:	0558      	lsls	r0, r3, #21
     598:	d459      	bmi.n	64e <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
     59a:	0499      	lsls	r1, r3, #18
     59c:	d441      	bmi.n	622 <TwoWire::endTransmission(unsigned char)+0xba>
     59e:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
     5a0:	1bd2      	subs	r2, r2, r7
     5a2:	2a32      	cmp	r2, #50	; 0x32
     5a4:	d83d      	bhi.n	622 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
     5a6:	4554      	cmp	r4, sl
     5a8:	d907      	bls.n	5ba <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
     5aa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     5ac:	0752      	lsls	r2, r2, #29
     5ae:	d104      	bne.n	5ba <TwoWire::endTransmission(unsigned char)+0x52>
     5b0:	059b      	lsls	r3, r3, #22
     5b2:	d455      	bmi.n	660 <TwoWire::endTransmission(unsigned char)+0xf8>
     5b4:	f1b8 0f00 	cmp.w	r8, #0
     5b8:	d052      	beq.n	660 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
     5ba:	f002 f8ed 	bl	2798 <yield>
		if (tx_index <= tx_len) {
     5be:	4554      	cmp	r4, sl
     5c0:	d8e4      	bhi.n	58c <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     5c2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
     5c4:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     5c6:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
     5ca:	d4df      	bmi.n	58c <TwoWire::endTransmission(unsigned char)+0x24>
     5cc:	e013      	b.n	5f6 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     5ce:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
     5d2:	3301      	adds	r3, #1
			while (fifo_used < 4) {
     5d4:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     5d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
     5da:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     5dc:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     5de:	d01e      	beq.n	61e <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
     5e0:	458a      	cmp	sl, r1
				fifo_used++;
     5e2:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     5e6:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     5ea:	d90e      	bls.n	60a <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     5ec:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
     5f0:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     5f2:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     5f4:	d0ca      	beq.n	58c <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
     5f6:	2101      	movs	r1, #1
				if (tx_index == 0) {
     5f8:	2c00      	cmp	r4, #0
     5fa:	d0e8      	beq.n	5ce <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     5fc:	4621      	mov	r1, r4
				fifo_used++;
     5fe:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     600:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
     602:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     604:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     608:	d8f0      	bhi.n	5ec <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     60a:	f1b8 0f00 	cmp.w	r8, #0
     60e:	d0bd      	beq.n	58c <TwoWire::endTransmission(unsigned char)+0x24>
     610:	f44f 7300 	mov.w	r3, #512	; 0x200
     614:	662b      	str	r3, [r5, #96]	; 0x60
					break;
     616:	e7b9      	b.n	58c <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
     618:	2004      	movs	r0, #4
}
     61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
     61e:	2401      	movs	r4, #1
     620:	e7b4      	b.n	58c <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     622:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     624:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
     628:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     62a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     62e:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     630:	662a      	str	r2, [r5, #96]	; 0x60
}
     632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     636:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     638:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     63a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     63e:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     640:	e7eb      	b.n	61a <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     642:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
     644:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     646:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     64a:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
     64c:	e7e5      	b.n	61a <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     64e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     650:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
     654:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     656:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     65a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     65c:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
     65e:	e7dc      	b.n	61a <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
     660:	2000      	movs	r0, #0
     662:	e7da      	b.n	61a <TwoWire::endTransmission(unsigned char)+0xb2>
     664:	20001acc 	.word	0x20001acc

00000668 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
     668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     66c:	4683      	mov	fp, r0
     66e:	460c      	mov	r4, r1
     670:	4615      	mov	r5, r2
     672:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     674:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
     678:	f7ff ff56 	bl	528 <TwoWire::wait_idle()>
     67c:	2800      	cmp	r0, #0
     67e:	f000 809e 	beq.w	7be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
     682:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
     684:	2d01      	cmp	r5, #1
     686:	f8df 813c 	ldr.w	r8, [pc, #316]	; 7c4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     68a:	f240 4601 	movw	r6, #1025	; 0x401
     68e:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
     690:	f04f 0100 	mov.w	r1, #0
     694:	bf38      	it	cc
     696:	2501      	movcc	r5, #1
     698:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
     69c:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     69e:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
     6a0:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     6a4:	e020      	b.n	6e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
     6a6:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
     6aa:	2b87      	cmp	r3, #135	; 0x87
     6ac:	d93f      	bls.n	72e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
     6ae:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
     6b2:	0510      	lsls	r0, r2, #20
     6b4:	d45a      	bmi.n	76c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
     6b6:	f412 5f10 	tst.w	r2, #9216	; 0x2400
     6ba:	d170      	bne.n	79e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
     6bc:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
     6c0:	eba3 0309 	sub.w	r3, r3, r9
     6c4:	2b32      	cmp	r3, #50	; 0x32
     6c6:	d86a      	bhi.n	79e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
     6c8:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
     6cc:	42ab      	cmp	r3, r5
     6ce:	d309      	bcc.n	6e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
     6d0:	2c02      	cmp	r4, #2
     6d2:	d907      	bls.n	6e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
     6d4:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     6d8:	0759      	lsls	r1, r3, #29
     6da:	d103      	bne.n	6e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
     6dc:	0593      	lsls	r3, r2, #22
     6de:	d44b      	bmi.n	778 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
     6e0:	2f00      	cmp	r7, #0
     6e2:	d049      	beq.n	778 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
     6e4:	f002 f858 	bl	2798 <yield>
		if (tx_state < 3) {
     6e8:	2c02      	cmp	r4, #2
     6ea:	d8dc      	bhi.n	6a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     6ec:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
     6f0:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
     6f4:	075b      	lsls	r3, r3, #29
     6f6:	d4d6      	bmi.n	6a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     6f8:	1e68      	subs	r0, r5, #1
     6fa:	4422      	add	r2, r4
     6fc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
     700:	b94c      	cbnz	r4, 716 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     702:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
     706:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
     708:	1b13      	subs	r3, r2, r4
     70a:	2b03      	cmp	r3, #3
     70c:	d8cb      	bhi.n	6a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
     70e:	2c02      	cmp	r4, #2
     710:	d8c9      	bhi.n	6a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
     712:	2c00      	cmp	r4, #0
     714:	d0f5      	beq.n	702 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
     716:	2c01      	cmp	r4, #1
     718:	d037      	beq.n	78a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     71a:	b11f      	cbz	r7, 724 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
     71c:	f44f 7300 	mov.w	r3, #512	; 0x200
     720:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
     724:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
     728:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
     72a:	2b87      	cmp	r3, #135	; 0x87
     72c:	d8bf      	bhi.n	6ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     72e:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     732:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     736:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     73a:	d0b8      	beq.n	6ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
     73c:	1c59      	adds	r1, r3, #1
     73e:	449c      	add	ip, r3
     740:	3319      	adds	r3, #25
     742:	b2c9      	uxtb	r1, r1
     744:	fa5f fc8c 	uxtb.w	ip, ip
     748:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
     74c:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     750:	1c4a      	adds	r2, r1, #1
     752:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
     754:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     758:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
     75a:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     75e:	d0a6      	beq.n	6ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
     760:	2989      	cmp	r1, #137	; 0x89
     762:	d1f3      	bne.n	74c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
     764:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
     768:	0510      	lsls	r0, r2, #20
     76a:	d5a4      	bpl.n	6b6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     76c:	f8da 3010 	ldr.w	r3, [sl, #16]
     770:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     774:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     778:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     77c:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     780:	d106      	bne.n	790 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
     782:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
     786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     78a:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
     78e:	e7ba      	b.n	706 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     790:	f8da 3010 	ldr.w	r3, [sl, #16]
     794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     798:	f8ca 3010 	str.w	r3, [sl, #16]
     79c:	e7f1      	b.n	782 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     79e:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     7a2:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     7a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     7aa:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     7ae:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     7b2:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     7b6:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     7ba:	d0e2      	beq.n	782 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
     7bc:	e7e8      	b.n	790 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
     7be:	2004      	movs	r0, #4
}
     7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7c4:	20001acc 	.word	0x20001acc

000007c8 <TwoWire::isr()>:
{
     7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     7ca:	6906      	ldr	r6, [r0, #16]
{
     7cc:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
     7ce:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
     7d2:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
     7d6:	d001      	beq.n	7dc <TwoWire::isr()+0x14>
     7d8:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
     7dc:	07a8      	lsls	r0, r5, #30
     7de:	d50b      	bpl.n	7f8 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
     7e0:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
     7e4:	0411      	lsls	r1, r2, #16
     7e6:	d53d      	bpl.n	864 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
     7e8:	2300      	movs	r3, #0
     7ea:	2101      	movs	r1, #1
     7ec:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
     7f0:	4423      	add	r3, r4
     7f2:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
     7f6:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
     7f8:	07ea      	lsls	r2, r5, #31
     7fa:	d510      	bpl.n	81e <TwoWire::isr()+0x56>
		if (!transmitting) {
     7fc:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
     800:	b1f7      	cbz	r7, 840 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
     802:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
     806:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
     80a:	42bb      	cmp	r3, r7
     80c:	d926      	bls.n	85c <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
     80e:	1c7b      	adds	r3, r7, #1
     810:	4427      	add	r7, r4
     812:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
     816:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
     81a:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
     81e:	05ab      	lsls	r3, r5, #22
     820:	d50d      	bpl.n	83e <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
     822:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
     826:	b118      	cbz	r0, 830 <TwoWire::isr()+0x68>
     828:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     82c:	b103      	cbz	r3, 830 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
     82e:	4798      	blx	r3
		rxBufferIndex = 0;
     830:	2300      	movs	r3, #0
     832:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
     836:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
     83a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
     83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
     840:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
     844:	b103      	cbz	r3, 848 <TwoWire::isr()+0x80>
				(*user_onRequest)();
     846:	4798      	blx	r3
			txBufferIndex = 0;
     848:	2300      	movs	r3, #0
     84a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
     84e:	2301      	movs	r3, #1
     850:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
     854:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
     858:	42bb      	cmp	r3, r7
     85a:	d8d8      	bhi.n	80e <TwoWire::isr()+0x46>
			port->STDR = 0;
     85c:	2300      	movs	r3, #0
     85e:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
     862:	e7dc      	b.n	81e <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
     864:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
     868:	2b87      	cmp	r3, #135	; 0x87
     86a:	d8c5      	bhi.n	7f8 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
     86c:	1c59      	adds	r1, r3, #1
     86e:	b2c9      	uxtb	r1, r1
     870:	e7be      	b.n	7f0 <TwoWire::isr()+0x28>
     872:	bf00      	nop

00000874 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
     874:	4801      	ldr	r0, [pc, #4]	; (87c <lpi2c1_isr()+0x8>)
     876:	f7ff bfa7 	b.w	7c8 <TwoWire::isr()>
     87a:	bf00      	nop
     87c:	200008a0 	.word	0x200008a0

00000880 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
     880:	4801      	ldr	r0, [pc, #4]	; (888 <lpi2c3_isr()+0x8>)
     882:	f7ff bfa1 	b.w	7c8 <TwoWire::isr()>
     886:	bf00      	nop
     888:	200009e0 	.word	0x200009e0

0000088c <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
     88c:	4801      	ldr	r0, [pc, #4]	; (894 <lpi2c4_isr()+0x8>)
     88e:	f7ff bf9b 	b.w	7c8 <TwoWire::isr()>
     892:	bf00      	nop
     894:	20000b20 	.word	0x20000b20

00000898 <Adafruit_PWMServoDriver::Adafruit_PWMServoDriver()>:
/*!
 *  @brief  Instantiates a new PCA9685 PWM driver chip with the I2C address on a
 * TwoWire interface
 */
Adafruit_PWMServoDriver::Adafruit_PWMServoDriver()
    : _i2caddr(PCA9685_I2C_ADDRESS), _i2c(&Wire) {}
     898:	f04f 0c40 	mov.w	ip, #64	; 0x40
     89c:	4903      	ldr	r1, [pc, #12]	; (8ac <Adafruit_PWMServoDriver::Adafruit_PWMServoDriver()+0x14>)
     89e:	2200      	movs	r2, #0
     8a0:	f880 c000 	strb.w	ip, [r0]
     8a4:	e9c0 1201 	strd	r1, r2, [r0, #4]
     8a8:	4770      	bx	lr
     8aa:	bf00      	nop
     8ac:	200008a0 	.word	0x200008a0

000008b0 <Adafruit_PWMServoDriver::setExtClk(unsigned char)>:
/*!
 *  @brief  Sets EXTCLK pin to use the external clock
 *  @param  prescale
 *          Configures the prescale value to be used by the external clock
 */
void Adafruit_PWMServoDriver::setExtClk(uint8_t prescale) {
     8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8b4:	b084      	sub	sp, #16
  _oscillator_freq = freq;
}

/******************* Low level I2C interface */
uint8_t Adafruit_PWMServoDriver::read8(uint8_t addr) {
  uint8_t buffer[1] = {addr};
     8b6:	2500      	movs	r5, #0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     8b8:	2701      	movs	r7, #1
void Adafruit_PWMServoDriver::setExtClk(uint8_t prescale) {
     8ba:	4606      	mov	r6, r0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     8bc:	ab03      	add	r3, sp, #12
void Adafruit_PWMServoDriver::setExtClk(uint8_t prescale) {
     8be:	4688      	mov	r8, r1
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     8c0:	463a      	mov	r2, r7
  uint8_t buffer[1] = {addr};
     8c2:	f88d 500c 	strb.w	r5, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     8c6:	4619      	mov	r1, r3
     8c8:	e9cd 7500 	strd	r7, r5, [sp]
     8cc:	6880      	ldr	r0, [r0, #8]
     8ce:	f000 f9db 	bl	c88 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
  return buffer[0];
     8d2:	f89d 400c 	ldrb.w	r4, [sp, #12]
}

void Adafruit_PWMServoDriver::write8(uint8_t addr, uint8_t d) {
  uint8_t buffer[2] = {addr, d};
  i2c_dev->write(buffer, 2);
     8d6:	463b      	mov	r3, r7
     8d8:	a903      	add	r1, sp, #12
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
     8da:	f004 046f 	and.w	r4, r4, #111	; 0x6f
  i2c_dev->write(buffer, 2);
     8de:	2202      	movs	r2, #2
  uint8_t buffer[2] = {addr, d};
     8e0:	f88d 500c 	strb.w	r5, [sp, #12]
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
     8e4:	f044 0410 	orr.w	r4, r4, #16
  i2c_dev->write(buffer, 2);
     8e8:	e9cd 5500 	strd	r5, r5, [sp]
  uint8_t buffer[2] = {addr, d};
     8ec:	f88d 400d 	strb.w	r4, [sp, #13]
  write8(PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
     8f0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  i2c_dev->write(buffer, 2);
     8f4:	68b0      	ldr	r0, [r6, #8]
     8f6:	f000 f95b 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
     8fa:	463b      	mov	r3, r7
     8fc:	a903      	add	r1, sp, #12
     8fe:	2202      	movs	r2, #2
  uint8_t buffer[2] = {addr, d};
     900:	f88d 400d 	strb.w	r4, [sp, #13]
  write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);
     904:	f004 044f 	and.w	r4, r4, #79	; 0x4f
  uint8_t buffer[2] = {addr, d};
     908:	f88d 500c 	strb.w	r5, [sp, #12]
  write8(PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);
     90c:	f064 045f 	orn	r4, r4, #95	; 0x5f
  i2c_dev->write(buffer, 2);
     910:	e9cd 5500 	strd	r5, r5, [sp]
     914:	68b0      	ldr	r0, [r6, #8]
     916:	f000 f94b 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  uint8_t buffer[2] = {addr, d};
     91a:	23fe      	movs	r3, #254	; 0xfe
  i2c_dev->write(buffer, 2);
     91c:	a903      	add	r1, sp, #12
     91e:	2202      	movs	r2, #2
  uint8_t buffer[2] = {addr, d};
     920:	f88d 300c 	strb.w	r3, [sp, #12]
  i2c_dev->write(buffer, 2);
     924:	463b      	mov	r3, r7
  uint8_t buffer[2] = {addr, d};
     926:	f88d 800d 	strb.w	r8, [sp, #13]
  i2c_dev->write(buffer, 2);
     92a:	e9cd 5500 	strd	r5, r5, [sp]
     92e:	68b0      	ldr	r0, [r6, #8]
     930:	f000 f93e 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(5);
     934:	2005      	movs	r0, #5
     936:	f000 fc91 	bl	125c <delay>
  i2c_dev->write(buffer, 2);
     93a:	463b      	mov	r3, r7
     93c:	a903      	add	r1, sp, #12
     93e:	2202      	movs	r2, #2
     940:	68b0      	ldr	r0, [r6, #8]
  uint8_t buffer[2] = {addr, d};
     942:	f88d 500c 	strb.w	r5, [sp, #12]
     946:	f88d 400d 	strb.w	r4, [sp, #13]
  i2c_dev->write(buffer, 2);
     94a:	e9cd 5500 	strd	r5, r5, [sp]
     94e:	f000 f92f 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
     952:	b004      	add	sp, #16
     954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000958 <Adafruit_PWMServoDriver::setPWMFreq(float)>:
  if (freq < 1)
     958:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
     95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (freq < 1)
     960:	eeb4 0ae7 	vcmpe.f32	s0, s15
void Adafruit_PWMServoDriver::setPWMFreq(float freq) {
     964:	b086      	sub	sp, #24
     966:	4605      	mov	r5, r0
  if (freq < 1)
     968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     96c:	d476      	bmi.n	a5c <Adafruit_PWMServoDriver::setPWMFreq(float)+0x104>
  if (freq > 3500)
     96e:	eddf 7a48 	vldr	s15, [pc, #288]	; a90 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x138>
     972:	eeb4 0ae7 	vcmpe.f32	s0, s15
     976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     97a:	dd72      	ble.n	a62 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x10a>
     97c:	ed9f 6b40 	vldr	d6, [pc, #256]	; a80 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x128>
  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
     980:	edd5 7a03 	vldr	s15, [r5, #12]
     984:	eeb6 2b00 	vmov.f64	d2, #96	; 0x3f000000  0.5
     988:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
     98c:	eeb8 5b67 	vcvt.f64.u32	d5, s15
  if (prescaleval < PCA9685_PRESCALE_MIN)
     990:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
     994:	ee85 7b06 	vdiv.f64	d7, d5, d6
     998:	ee37 7b02 	vadd.f64	d7, d7, d2
     99c:	ee37 7b43 	vsub.f64	d7, d7, d3
     9a0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  if (prescaleval < PCA9685_PRESCALE_MIN)
     9a4:	eeb4 7ae4 	vcmpe.f32	s14, s9
     9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9ac:	d453      	bmi.n	a56 <Adafruit_PWMServoDriver::setPWMFreq(float)+0xfe>
  if (prescaleval > PCA9685_PRESCALE_MAX)
     9ae:	eddf 7a39 	vldr	s15, [pc, #228]	; a94 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x13c>
     9b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
     9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9ba:	dd59      	ble.n	a70 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x118>
     9bc:	f04f 08ff 	mov.w	r8, #255	; 0xff
  uint8_t buffer[1] = {addr};
     9c0:	2400      	movs	r4, #0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     9c2:	2601      	movs	r6, #1
     9c4:	ab05      	add	r3, sp, #20
     9c6:	4632      	mov	r2, r6
     9c8:	9401      	str	r4, [sp, #4]
     9ca:	4619      	mov	r1, r3
     9cc:	9600      	str	r6, [sp, #0]
     9ce:	68a8      	ldr	r0, [r5, #8]
  uint8_t buffer[1] = {addr};
     9d0:	f88d 4014 	strb.w	r4, [sp, #20]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     9d4:	f000 f958 	bl	c88 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
  return buffer[0];
     9d8:	f89d 7014 	ldrb.w	r7, [sp, #20]
  i2c_dev->write(buffer, 2);
     9dc:	4633      	mov	r3, r6
     9de:	a905      	add	r1, sp, #20
  uint8_t buffer[2] = {addr, d};
     9e0:	f88d 4014 	strb.w	r4, [sp, #20]
  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
     9e4:	f007 026f 	and.w	r2, r7, #111	; 0x6f
     9e8:	f042 0210 	orr.w	r2, r2, #16
  i2c_dev->write(buffer, 2);
     9ec:	e9cd 4400 	strd	r4, r4, [sp]
  uint8_t buffer[2] = {addr, d};
     9f0:	f88d 2015 	strb.w	r2, [sp, #21]
  i2c_dev->write(buffer, 2);
     9f4:	2202      	movs	r2, #2
     9f6:	68a8      	ldr	r0, [r5, #8]
     9f8:	f000 f8da 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  uint8_t buffer[2] = {addr, d};
     9fc:	23fe      	movs	r3, #254	; 0xfe
  i2c_dev->write(buffer, 2);
     9fe:	a905      	add	r1, sp, #20
     a00:	2202      	movs	r2, #2
  uint8_t buffer[2] = {addr, d};
     a02:	f88d 3014 	strb.w	r3, [sp, #20]
  i2c_dev->write(buffer, 2);
     a06:	4633      	mov	r3, r6
  uint8_t buffer[2] = {addr, d};
     a08:	f88d 8015 	strb.w	r8, [sp, #21]
  i2c_dev->write(buffer, 2);
     a0c:	e9cd 4400 	strd	r4, r4, [sp]
     a10:	68a8      	ldr	r0, [r5, #8]
     a12:	f000 f8cd 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
     a16:	4633      	mov	r3, r6
     a18:	a905      	add	r1, sp, #20
     a1a:	2202      	movs	r2, #2
  uint8_t buffer[2] = {addr, d};
     a1c:	f88d 7015 	strb.w	r7, [sp, #21]
  write8(PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
     a20:	f067 075f 	orn	r7, r7, #95	; 0x5f
  uint8_t buffer[2] = {addr, d};
     a24:	f88d 4014 	strb.w	r4, [sp, #20]
  i2c_dev->write(buffer, 2);
     a28:	e9cd 4400 	strd	r4, r4, [sp]
     a2c:	68a8      	ldr	r0, [r5, #8]
     a2e:	f000 f8bf 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(5);
     a32:	2005      	movs	r0, #5
     a34:	f000 fc12 	bl	125c <delay>
  i2c_dev->write(buffer, 2);
     a38:	4633      	mov	r3, r6
     a3a:	a905      	add	r1, sp, #20
     a3c:	2202      	movs	r2, #2
     a3e:	68a8      	ldr	r0, [r5, #8]
  uint8_t buffer[2] = {addr, d};
     a40:	f88d 4014 	strb.w	r4, [sp, #20]
     a44:	f88d 7015 	strb.w	r7, [sp, #21]
  i2c_dev->write(buffer, 2);
     a48:	e9cd 4400 	strd	r4, r4, [sp]
     a4c:	f000 f8b0 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
     a50:	b006      	add	sp, #24
     a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a56:	f04f 0803 	mov.w	r8, #3
     a5a:	e7b1      	b.n	9c0 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x68>
     a5c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; a88 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x130>
     a60:	e78e      	b.n	980 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x28>
  float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
     a62:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
     a66:	ed9f 7b08 	vldr	d7, [pc, #32]	; a88 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x130>
     a6a:	ee26 6b07 	vmul.f64	d6, d6, d7
     a6e:	e787      	b.n	980 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x28>
  uint8_t prescale = (uint8_t)prescaleval;
     a70:	eefc 7ac7 	vcvt.u32.f32	s15, s14
     a74:	edcd 7a03 	vstr	s15, [sp, #12]
     a78:	f89d 800c 	ldrb.w	r8, [sp, #12]
     a7c:	e7a0      	b.n	9c0 <Adafruit_PWMServoDriver::setPWMFreq(float)+0x68>
     a7e:	bf00      	nop
     a80:	00000000 	.word	0x00000000
     a84:	416b5800 	.word	0x416b5800
     a88:	00000000 	.word	0x00000000
     a8c:	40b00000 	.word	0x40b00000
     a90:	455ac000 	.word	0x455ac000
     a94:	437f0000 	.word	0x437f0000

00000a98 <Adafruit_PWMServoDriver::begin(unsigned char)>:
bool Adafruit_PWMServoDriver::begin(uint8_t prescale) {
     a98:	b570      	push	{r4, r5, r6, lr}
     a9a:	4604      	mov	r4, r0
  if (i2c_dev)
     a9c:	6880      	ldr	r0, [r0, #8]
bool Adafruit_PWMServoDriver::begin(uint8_t prescale) {
     a9e:	b084      	sub	sp, #16
     aa0:	460e      	mov	r6, r1
  if (i2c_dev)
     aa2:	b110      	cbz	r0, aaa <Adafruit_PWMServoDriver::begin(unsigned char)+0x12>
    delete i2c_dev;
     aa4:	2110      	movs	r1, #16
     aa6:	f000 fcd1 	bl	144c <operator delete(void*, unsigned int)>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
     aaa:	2010      	movs	r0, #16
     aac:	f000 fccc 	bl	1448 <operator new(unsigned int)>
     ab0:	4605      	mov	r5, r0
     ab2:	6862      	ldr	r2, [r4, #4]
     ab4:	7821      	ldrb	r1, [r4, #0]
     ab6:	f000 f855 	bl	b64 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
  if (!i2c_dev->begin())
     aba:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
     abc:	60a5      	str	r5, [r4, #8]
  if (!i2c_dev->begin())
     abe:	2101      	movs	r1, #1
     ac0:	f000 f85a 	bl	b78 <Adafruit_I2CDevice::begin(bool)>
     ac4:	4605      	mov	r5, r0
     ac6:	b910      	cbnz	r0, ace <Adafruit_PWMServoDriver::begin(unsigned char)+0x36>
}
     ac8:	4628      	mov	r0, r5
     aca:	b004      	add	sp, #16
     acc:	bd70      	pop	{r4, r5, r6, pc}
  i2c_dev->write(buffer, 2);
     ace:	2300      	movs	r3, #0
  uint8_t buffer[2] = {addr, d};
     ad0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  i2c_dev->write(buffer, 2);
     ad4:	a903      	add	r1, sp, #12
  uint8_t buffer[2] = {addr, d};
     ad6:	f8ad 200c 	strh.w	r2, [sp, #12]
  i2c_dev->write(buffer, 2);
     ada:	2202      	movs	r2, #2
     adc:	e9cd 3300 	strd	r3, r3, [sp]
     ae0:	2301      	movs	r3, #1
     ae2:	68a0      	ldr	r0, [r4, #8]
     ae4:	f000 f864 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(10);
     ae8:	200a      	movs	r0, #10
     aea:	f000 fbb7 	bl	125c <delay>
  _oscillator_freq = freq;
     aee:	4b09      	ldr	r3, [pc, #36]	; (b14 <Adafruit_PWMServoDriver::begin(unsigned char)+0x7c>)
     af0:	60e3      	str	r3, [r4, #12]
  if (prescale) {
     af2:	b136      	cbz	r6, b02 <Adafruit_PWMServoDriver::begin(unsigned char)+0x6a>
    setExtClk(prescale);
     af4:	4620      	mov	r0, r4
     af6:	4631      	mov	r1, r6
     af8:	f7ff feda 	bl	8b0 <Adafruit_PWMServoDriver::setExtClk(unsigned char)>
}
     afc:	4628      	mov	r0, r5
     afe:	b004      	add	sp, #16
     b00:	bd70      	pop	{r4, r5, r6, pc}
    setPWMFreq(1000);
     b02:	4620      	mov	r0, r4
     b04:	ed9f 0a04 	vldr	s0, [pc, #16]	; b18 <Adafruit_PWMServoDriver::begin(unsigned char)+0x80>
     b08:	f7ff ff26 	bl	958 <Adafruit_PWMServoDriver::setPWMFreq(float)>
}
     b0c:	4628      	mov	r0, r5
     b0e:	b004      	add	sp, #16
     b10:	bd70      	pop	{r4, r5, r6, pc}
     b12:	bf00      	nop
     b14:	017d7840 	.word	0x017d7840
     b18:	447a0000 	.word	0x447a0000

00000b1c <Adafruit_PWMServoDriver::setPWM(unsigned char, unsigned short, unsigned short)>:
  buffer[0] = PCA9685_LED0_ON_L + 4 * num;
     b1c:	0089      	lsls	r1, r1, #2
                                        uint16_t off) {
     b1e:	469c      	mov	ip, r3
  if (i2c_dev->write(buffer, 5)) {
     b20:	2300      	movs	r3, #0
     b22:	6880      	ldr	r0, [r0, #8]
  buffer[0] = PCA9685_LED0_ON_L + 4 * num;
     b24:	3106      	adds	r1, #6
                                        uint16_t off) {
     b26:	b500      	push	{lr}
  buffer[2] = on >> 8;
     b28:	ea4f 2e12 	mov.w	lr, r2, lsr #8
                                        uint16_t off) {
     b2c:	b085      	sub	sp, #20
  buffer[2] = on >> 8;
     b2e:	f88d e00a 	strb.w	lr, [sp, #10]
  buffer[4] = off >> 8;
     b32:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
  buffer[0] = PCA9685_LED0_ON_L + 4 * num;
     b36:	f88d 1008 	strb.w	r1, [sp, #8]
  if (i2c_dev->write(buffer, 5)) {
     b3a:	a902      	add	r1, sp, #8
  buffer[1] = on;
     b3c:	f88d 2009 	strb.w	r2, [sp, #9]
  if (i2c_dev->write(buffer, 5)) {
     b40:	2205      	movs	r2, #5
  buffer[3] = off;
     b42:	f88d c00b 	strb.w	ip, [sp, #11]
  buffer[4] = off >> 8;
     b46:	f88d e00c 	strb.w	lr, [sp, #12]
  if (i2c_dev->write(buffer, 5)) {
     b4a:	e9cd 3300 	strd	r3, r3, [sp]
     b4e:	2301      	movs	r3, #1
     b50:	f000 f82e 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
     b54:	f080 0001 	eor.w	r0, r0, #1
}
     b58:	b2c0      	uxtb	r0, r0
     b5a:	b005      	add	sp, #20
     b5c:	f85d fb04 	ldr.w	pc, [sp], #4

00000b60 <Adafruit_PWMServoDriver::setOscillatorFrequency(unsigned long)>:
  _oscillator_freq = freq;
     b60:	60c1      	str	r1, [r0, #12]
}
     b62:	4770      	bx	lr

00000b64 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
     b64:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
     b68:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
     b6a:	2220      	movs	r2, #32
  _addr = addr;
     b6c:	7001      	strb	r1, [r0, #0]
  _begun = false;
     b6e:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
     b72:	60c2      	str	r2, [r0, #12]
}
     b74:	4770      	bx	lr
     b76:	bf00      	nop

00000b78 <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
     b78:	b538      	push	{r3, r4, r5, lr}
     b7a:	4604      	mov	r4, r0
  _wire->begin();
     b7c:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
     b7e:	460d      	mov	r5, r1
  _wire->begin();
     b80:	f002 fdda 	bl	3738 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
     b84:	2101      	movs	r1, #1
     b86:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
     b88:	b90d      	cbnz	r5, b8e <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
     b8a:	4608      	mov	r0, r1
}
     b8c:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
     b8e:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
     b90:	6862      	ldr	r2, [r4, #4]
     b92:	4088      	lsls	r0, r1
		transmitting = 1;
     b94:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
     b98:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
     b9c:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
     ba0:	6860      	ldr	r0, [r4, #4]
     ba2:	f7ff fce1 	bl	568 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
     ba6:	fab0 f080 	clz	r0, r0
     baa:	0940      	lsrs	r0, r0, #5
}
     bac:	bd38      	pop	{r3, r4, r5, pc}
     bae:	bf00      	nop

00000bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
     bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bb4:	9f07      	ldr	r7, [sp, #28]
     bb6:	4615      	mov	r5, r2
     bb8:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
     bba:	68c3      	ldr	r3, [r0, #12]
     bbc:	443a      	add	r2, r7
     bbe:	429a      	cmp	r2, r3
     bc0:	d816      	bhi.n	bf0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
     bc2:	7802      	ldrb	r2, [r0, #0]
     bc4:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
     bc6:	6843      	ldr	r3, [r0, #4]
     bc8:	460e      	mov	r6, r1
     bca:	0052      	lsls	r2, r2, #1
     bcc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
     bd0:	2201      	movs	r2, #1
     bd2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
     bd6:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
     bda:	b167      	cbz	r7, bf6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
     bdc:	9b06      	ldr	r3, [sp, #24]
     bde:	b153      	cbz	r3, bf6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
     be0:	6840      	ldr	r0, [r0, #4]
     be2:	463a      	mov	r2, r7
     be4:	9906      	ldr	r1, [sp, #24]
     be6:	6803      	ldr	r3, [r0, #0]
     be8:	685b      	ldr	r3, [r3, #4]
     bea:	4798      	blx	r3
     bec:	4287      	cmp	r7, r0
     bee:	d002      	beq.n	bf6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
     bf0:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
     bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
     bf6:	6860      	ldr	r0, [r4, #4]
     bf8:	4631      	mov	r1, r6
     bfa:	462a      	mov	r2, r5
     bfc:	6803      	ldr	r3, [r0, #0]
     bfe:	685b      	ldr	r3, [r3, #4]
     c00:	4798      	blx	r3
     c02:	4285      	cmp	r5, r0
     c04:	d1f4      	bne.n	bf0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
     c06:	4641      	mov	r1, r8
     c08:	6860      	ldr	r0, [r4, #4]
     c0a:	f7ff fcad 	bl	568 <TwoWire::endTransmission(unsigned char)>
     c0e:	fab0 f080 	clz	r0, r0
     c12:	0940      	lsrs	r0, r0, #5
}
     c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000c18 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
     c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     c1c:	4615      	mov	r5, r2
     c1e:	4606      	mov	r6, r0
     c20:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
     c22:	b2d2      	uxtb	r2, r2
     c24:	7801      	ldrb	r1, [r0, #0]
     c26:	6840      	ldr	r0, [r0, #4]
     c28:	f7ff fd1e 	bl	668 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
     c2c:	4285      	cmp	r5, r0
     c2e:	d124      	bne.n	c7a <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
     c30:	b305      	cbz	r5, c74 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
     c32:	2400      	movs	r4, #0
     c34:	f8df 904c 	ldr.w	r9, [pc, #76]	; c84 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
     c38:	46a0      	mov	r8, r4
     c3a:	e013      	b.n	c64 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
     c3c:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
     c40:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     c44:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
     c46:	f10c 0201 	add.w	r2, ip, #1
     c4a:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
     c4c:	d918      	bls.n	c80 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
     c4e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     c52:	f89c 301a 	ldrb.w	r3, [ip, #26]
     c56:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
     c58:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
     c5c:	b2a4      	uxth	r4, r4
     c5e:	42a5      	cmp	r5, r4
     c60:	46a0      	mov	r8, r4
     c62:	d907      	bls.n	c74 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
     c64:	6870      	ldr	r0, [r6, #4]
     c66:	6802      	ldr	r2, [r0, #0]
     c68:	6952      	ldr	r2, [r2, #20]
     c6a:	454a      	cmp	r2, r9
     c6c:	d0e6      	beq.n	c3c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
     c6e:	4790      	blx	r2
     c70:	b2c3      	uxtb	r3, r0
     c72:	e7f0      	b.n	c56 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
     c74:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
     c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
     c7a:	2000      	movs	r0, #0
}
     c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     c80:	23ff      	movs	r3, #255	; 0xff
     c82:	e7e8      	b.n	c56 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
     c84:	0000037d 	.word	0x0000037d

00000c88 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
     c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
     c8c:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
     c8e:	b082      	sub	sp, #8
     c90:	461f      	mov	r7, r3
     c92:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
     c94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
     c98:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
     c9a:	e9cd 4400 	strd	r4, r4, [sp]
     c9e:	f7ff ff87 	bl	bb0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
     ca2:	b928      	cbnz	r0, cb0 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
     ca4:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
     ca8:	4640      	mov	r0, r8
     caa:	b002      	add	sp, #8
     cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
     cb0:	4680      	mov	r8, r0
     cb2:	b915      	cbnz	r5, cba <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
     cb4:	e7f8      	b.n	ca8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
     cb6:	42a5      	cmp	r5, r4
     cb8:	d9f6      	bls.n	ca8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
     cba:	1b2a      	subs	r2, r5, r4
     cbc:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
     cbe:	1939      	adds	r1, r7, r4
     cc0:	4630      	mov	r0, r6
     cc2:	429a      	cmp	r2, r3
     cc4:	bf28      	it	cs
     cc6:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
     cc8:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
     cca:	42a3      	cmp	r3, r4
    pos += read_len;
     ccc:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
     cce:	bf8c      	ite	hi
     cd0:	2300      	movhi	r3, #0
     cd2:	2301      	movls	r3, #1
     cd4:	f7ff ffa0 	bl	c18 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
     cd8:	2800      	cmp	r0, #0
     cda:	d1ec      	bne.n	cb6 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
     cdc:	e7e2      	b.n	ca4 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
     cde:	bf00      	nop

00000ce0 <EventResponder::runFromInterrupt()>:
{
     ce0:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     ce2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
     ce6:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
     ce8:	4c0c      	ldr	r4, [pc, #48]	; (d1c <EventResponder::runFromInterrupt()+0x3c>)
     cea:	6820      	ldr	r0, [r4, #0]
		if (first) {
     cec:	b180      	cbz	r0, d10 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
     cee:	4e0c      	ldr	r6, [pc, #48]	; (d20 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
     cf0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
     cf2:	6943      	ldr	r3, [r0, #20]
     cf4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
     cf6:	b173      	cbz	r3, d16 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
     cf8:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
     cfa:	b902      	cbnz	r2, cfe <EventResponder::runFromInterrupt()+0x1e>
     cfc:	b662      	cpsie	i
			(*(first->_function))(*first);
     cfe:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
     d00:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
     d02:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
     d04:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
     d08:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
     d0a:	6820      	ldr	r0, [r4, #0]
		if (first) {
     d0c:	2800      	cmp	r0, #0
     d0e:	d1f0      	bne.n	cf2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
     d10:	b902      	cbnz	r2, d14 <EventResponder::runFromInterrupt()+0x34>
     d12:	b662      	cpsie	i
}
     d14:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
     d16:	6033      	str	r3, [r6, #0]
     d18:	e7ef      	b.n	cfa <EventResponder::runFromInterrupt()+0x1a>
     d1a:	bf00      	nop
     d1c:	20001890 	.word	0x20001890
     d20:	2000188c 	.word	0x2000188c

00000d24 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
     d24:	f7ff bfdc 	b.w	ce0 <EventResponder::runFromInterrupt()>

00000d28 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
     d28:	4904      	ldr	r1, [pc, #16]	; (d3c <systick_isr+0x14>)
	systick_millis_count++;
     d2a:	4a05      	ldr	r2, [pc, #20]	; (d40 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
     d2c:	6849      	ldr	r1, [r1, #4]
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <systick_isr+0x1c>)
     d30:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
     d32:	6813      	ldr	r3, [r2, #0]
     d34:	3301      	adds	r3, #1
     d36:	6013      	str	r3, [r2, #0]
}
     d38:	4770      	bx	lr
     d3a:	bf00      	nop
     d3c:	e0001000 	.word	0xe0001000
     d40:	20001acc 	.word	0x20001acc
     d44:	20001ac8 	.word	0x20001ac8

00000d48 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d48:	4608      	mov	r0, r1
     d4a:	f001 bc91 	b.w	2670 <usb_serial_putchar>
     d4e:	bf00      	nop

00000d50 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
     d50:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     d52:	b570      	push	{r4, r5, r6, lr}
		base = 10;
     d54:	bf08      	it	eq
     d56:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
     d58:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
     d5a:	b391      	cbz	r1, dc2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
     d5c:	f04f 0e21 	mov.w	lr, #33	; 0x21
     d60:	e001      	b.n	d66 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
     d62:	fa5f fe86 	uxtb.w	lr, r6
     d66:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
     d6a:	fbb1 f5f2 	udiv	r5, r1, r2
     d6e:	fb02 1415 	mls	r4, r2, r5, r1
     d72:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     d76:	2c09      	cmp	r4, #9
     d78:	f10c 0437 	add.w	r4, ip, #55	; 0x37
     d7c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
     d80:	bf98      	it	ls
     d82:	fa5f f48c 	uxtbls.w	r4, ip
     d86:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
     d8a:	bf88      	it	hi
     d8c:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
     d8e:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     d90:	44ec      	add	ip, sp
			n /= base;
     d92:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     d94:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
     d98:	d2e3      	bcs.n	d62 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
     d9a:	b14b      	cbz	r3, db0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
     d9c:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
     da0:	222d      	movs	r2, #45	; 0x2d
		i--;
     da2:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
     da6:	f10e 0328 	add.w	r3, lr, #40	; 0x28
     daa:	446b      	add	r3, sp
     dac:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
     db0:	6803      	ldr	r3, [r0, #0]
     db2:	a901      	add	r1, sp, #4
     db4:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
     db8:	685b      	ldr	r3, [r3, #4]
     dba:	4471      	add	r1, lr
     dbc:	4798      	blx	r3
}
     dbe:	b00a      	add	sp, #40	; 0x28
     dc0:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
     dc2:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
     dc4:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
     dc8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
     dcc:	e7e5      	b.n	d9a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
     dce:	bf00      	nop

00000dd0 <Print::print(long)>:
	if (n < 0) {
     dd0:	2900      	cmp	r1, #0
     dd2:	db03      	blt.n	ddc <Print::print(long)+0xc>
	uint8_t sign=0;
     dd4:	2300      	movs	r3, #0
	if (base == 0) {
     dd6:	220a      	movs	r2, #10
     dd8:	f7ff bfba 	b.w	d50 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
     ddc:	4249      	negs	r1, r1
		sign = '-';
     dde:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
     de0:	220a      	movs	r2, #10
     de2:	f7ff bfb5 	b.w	d50 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
     de6:	bf00      	nop

00000de8 <Print::println()>:
{
     de8:	b500      	push	{lr}
	return write(buf, 2);
     dea:	6803      	ldr	r3, [r0, #0]
{
     dec:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
     dee:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
     df2:	2202      	movs	r2, #2
     df4:	a901      	add	r1, sp, #4
     df6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
     df8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
     dfc:	4798      	blx	r3
}
     dfe:	b003      	add	sp, #12
     e00:	f85d fb04 	ldr.w	pc, [sp], #4
     e04:	0000      	movs	r0, r0
	...

00000e08 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
     e08:	eeb4 0b40 	vcmp.f64	d0, d0
{
     e0c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
     e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
     e12:	4605      	mov	r5, r0
     e14:	ed2d 8b02 	vpush	{d8}
     e18:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
     e1a:	d67c      	bvs.n	f16 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
     e1c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
     e20:	ed9f 6b47 	vldr	d6, [pc, #284]	; f40 <Print::printFloat(double, unsigned char)+0x138>
     e24:	eeb4 7b46 	vcmp.f64	d7, d6
     e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e2c:	dc6b      	bgt.n	f06 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
     e2e:	ed9f 7b46 	vldr	d7, [pc, #280]	; f48 <Print::printFloat(double, unsigned char)+0x140>
     e32:	eeb4 0bc7 	vcmpe.f64	d0, d7
     e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e3a:	dc5a      	bgt.n	ef2 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
     e3c:	ed9f 7b44 	vldr	d7, [pc, #272]	; f50 <Print::printFloat(double, unsigned char)+0x148>
     e40:	eeb4 0bc7 	vcmpe.f64	d0, d7
     e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e48:	d453      	bmi.n	ef2 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
     e4a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
     e4e:	460c      	mov	r4, r1
     e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e54:	d45b      	bmi.n	f0e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
     e56:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
     e58:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
     e5c:	2c00      	cmp	r4, #0
     e5e:	d05e      	beq.n	f1e <Print::printFloat(double, unsigned char)+0x116>
     e60:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
     e64:	ed9f 6b3c 	vldr	d6, [pc, #240]	; f58 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
     e68:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
     e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
     e70:	fa5f f28c 	uxtb.w	r2, ip
     e74:	42a2      	cmp	r2, r4
     e76:	d3f7      	bcc.n	e68 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
     e78:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
     e7c:	220a      	movs	r2, #10
     e7e:	4628      	mov	r0, r5
     e80:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
     e84:	eeb8 8b67 	vcvt.f64.u32	d8, s15
     e88:	ee17 1a90 	vmov	r1, s15
     e8c:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
     e90:	f7ff ff5e 	bl	d50 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
     e94:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
     e96:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
     e9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
     e9e:	4606      	mov	r6, r0
		buf[0] = '.';
     ea0:	bf28      	it	cs
     ea2:	240f      	movcs	r4, #15
     ea4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
     ea8:	f10d 0309 	add.w	r3, sp, #9
     eac:	aa02      	add	r2, sp, #8
     eae:	1e61      	subs	r1, r4, #1
     eb0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
     eb4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
     eb8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
     ebc:	edcd 7a01 	vstr	s15, [sp, #4]
     ec0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
     ec4:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
     ec8:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
     eca:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
     ece:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
     ed2:	4291      	cmp	r1, r2
			remainder -= n; 
     ed4:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
     ed8:	d1ec      	bne.n	eb4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
     eda:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
     edc:	3401      	adds	r4, #1
		count += write(buf, count);
     ede:	a902      	add	r1, sp, #8
     ee0:	4628      	mov	r0, r5
     ee2:	685b      	ldr	r3, [r3, #4]
     ee4:	b2e2      	uxtb	r2, r4
     ee6:	4798      	blx	r3
	}
	return count;
}
     ee8:	4630      	mov	r0, r6
     eea:	b006      	add	sp, #24
     eec:	ecbd 8b02 	vpop	{d8}
     ef0:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
     ef2:	682b      	ldr	r3, [r5, #0]
     ef4:	2203      	movs	r2, #3
     ef6:	491a      	ldr	r1, [pc, #104]	; (f60 <Print::printFloat(double, unsigned char)+0x158>)
     ef8:	685b      	ldr	r3, [r3, #4]
     efa:	b006      	add	sp, #24
     efc:	ecbd 8b02 	vpop	{d8}
     f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     f04:	4718      	bx	r3
     f06:	6803      	ldr	r3, [r0, #0]
     f08:	2203      	movs	r2, #3
     f0a:	4916      	ldr	r1, [pc, #88]	; (f64 <Print::printFloat(double, unsigned char)+0x15c>)
     f0c:	e7f4      	b.n	ef8 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
     f0e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
     f12:	2301      	movs	r3, #1
     f14:	e7a0      	b.n	e58 <Print::printFloat(double, unsigned char)+0x50>
     f16:	6803      	ldr	r3, [r0, #0]
     f18:	2203      	movs	r2, #3
     f1a:	4913      	ldr	r1, [pc, #76]	; (f68 <Print::printFloat(double, unsigned char)+0x160>)
     f1c:	e7ec      	b.n	ef8 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
     f1e:	ee30 0b07 	vadd.f64	d0, d0, d7
     f22:	220a      	movs	r2, #10
     f24:	4628      	mov	r0, r5
     f26:	eefc 7bc0 	vcvt.u32.f64	s15, d0
     f2a:	ee17 1a90 	vmov	r1, s15
}
     f2e:	b006      	add	sp, #24
     f30:	ecbd 8b02 	vpop	{d8}
     f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     f38:	f7ff bf0a 	b.w	d50 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
     f3c:	f3af 8000 	nop.w
     f40:	ffffffff 	.word	0xffffffff
     f44:	7fefffff 	.word	0x7fefffff
     f48:	e0000000 	.word	0xe0000000
     f4c:	41efffff 	.word	0x41efffff
     f50:	e0000000 	.word	0xe0000000
     f54:	c1efffff 	.word	0xc1efffff
     f58:	9999999a 	.word	0x9999999a
     f5c:	3fb99999 	.word	0x3fb99999
     f60:	20000298 	.word	0x20000298
     f64:	20000294 	.word	0x20000294
     f68:	20000290 	.word	0x20000290

00000f6c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     f6c:	49a2      	ldr	r1, [pc, #648]	; (11f8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     f6e:	4ba3      	ldr	r3, [pc, #652]	; (11fc <set_arm_clock+0x290>)
	if (frequency > 528000000) {
     f70:	4288      	cmp	r0, r1
{
     f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
     f76:	4ca2      	ldr	r4, [pc, #648]	; (1200 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     f78:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     f7a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     f7c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
     f80:	d91b      	bls.n	fba <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     f82:	4ba0      	ldr	r3, [pc, #640]	; (1204 <set_arm_clock+0x298>)
     f84:	4298      	cmp	r0, r3
     f86:	f240 8102 	bls.w	118e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     f8a:	1ac3      	subs	r3, r0, r3
     f8c:	499e      	ldr	r1, [pc, #632]	; (1208 <set_arm_clock+0x29c>)
     f8e:	0a1b      	lsrs	r3, r3, #8
     f90:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     f94:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     f98:	09db      	lsrs	r3, r3, #7
     f9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     f9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     fa2:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     fa6:	428b      	cmp	r3, r1
     fa8:	bf28      	it	cs
     faa:	460b      	movcs	r3, r1
     fac:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
     fb0:	4b96      	ldr	r3, [pc, #600]	; (120c <set_arm_clock+0x2a0>)
     fb2:	fba3 3707 	umull	r3, r7, r3, r7
     fb6:	08ff      	lsrs	r7, r7, #3
     fb8:	e004      	b.n	fc4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
     fba:	4f95      	ldr	r7, [pc, #596]	; (1210 <set_arm_clock+0x2a4>)
     fbc:	42b8      	cmp	r0, r7
     fbe:	bf8c      	ite	hi
     fc0:	270e      	movhi	r7, #14
     fc2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     fc4:	498d      	ldr	r1, [pc, #564]	; (11fc <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     fc6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     fca:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     fce:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     fd4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     fd8:	d20c      	bcs.n	ff4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     fda:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     fde:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     fe2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
     fe6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     fea:	680b      	ldr	r3, [r1, #0]
     fec:	2b00      	cmp	r3, #0
     fee:	dafc      	bge.n	fea <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     ff0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     ff4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
     ff8:	d124      	bne.n	1044 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     ffa:	4986      	ldr	r1, [pc, #536]	; (1214 <set_arm_clock+0x2a8>)
     ffc:	690c      	ldr	r4, [r1, #16]
     ffe:	4986      	ldr	r1, [pc, #536]	; (1218 <set_arm_clock+0x2ac>)
    1000:	43a1      	bics	r1, r4
    1002:	f000 80ea 	beq.w	11da <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1006:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    100a:	4634      	mov	r4, r6
    100c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1010:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1014:	d004      	beq.n	1020 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1016:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    101a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    101c:	4b77      	ldr	r3, [pc, #476]	; (11fc <set_arm_clock+0x290>)
    101e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1020:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    1024:	d007      	beq.n	1036 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1026:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    102a:	4974      	ldr	r1, [pc, #464]	; (11fc <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    102c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    102e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1030:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    1032:	071a      	lsls	r2, r3, #28
    1034:	d4fc      	bmi.n	1030 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1036:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    103a:	4a70      	ldr	r2, [pc, #448]	; (11fc <set_arm_clock+0x290>)
    103c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    103e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1040:	069b      	lsls	r3, r3, #26
    1042:	d4fc      	bmi.n	103e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    1044:	4c75      	ldr	r4, [pc, #468]	; (121c <set_arm_clock+0x2b0>)
    1046:	42a0      	cmp	r0, r4
    1048:	f200 80ce 	bhi.w	11e8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    104c:	f04f 0c01 	mov.w	ip, #1
    1050:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    1052:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    1054:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    1058:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    105c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1060:	42a2      	cmp	r2, r4
    1062:	d818      	bhi.n	1096 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    1064:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    1068:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    106c:	f040 808d 	bne.w	118a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    1070:	f1bc 0f04 	cmp.w	ip, #4
    1074:	f200 8091 	bhi.w	119a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    1078:	180a      	adds	r2, r1, r0
    107a:	42a2      	cmp	r2, r4
    107c:	f200 80a4 	bhi.w	11c8 <set_arm_clock+0x25c>
    1080:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    1084:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    1086:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    108a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    108e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1092:	42a2      	cmp	r2, r4
    1094:	d9e6      	bls.n	1064 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1096:	f10c 31ff 	add.w	r1, ip, #4294967295
    109a:	028c      	lsls	r4, r1, #10
    109c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    10a0:	485f      	ldr	r0, [pc, #380]	; (1220 <set_arm_clock+0x2b4>)
    10a2:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    10a4:	4a5f      	ldr	r2, [pc, #380]	; (1224 <set_arm_clock+0x2b8>)
    10a6:	4290      	cmp	r0, r2
    10a8:	d97f      	bls.n	11aa <set_arm_clock+0x23e>
    10aa:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 1250 <set_arm_clock+0x2e4>
    10ae:	226c      	movs	r2, #108	; 0x6c
    10b0:	485d      	ldr	r0, [pc, #372]	; (1228 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    10b2:	4d58      	ldr	r5, [pc, #352]	; (1214 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    10b4:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    10b8:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    10bc:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    10c0:	f8df c190 	ldr.w	ip, [pc, #400]	; 1254 <set_arm_clock+0x2e8>
    10c4:	ea0e 0c0c 	and.w	ip, lr, ip
    10c8:	45d4      	cmp	ip, sl
    10ca:	d009      	beq.n	10e0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    10cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    10d0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    10d4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    10d8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    10da:	682a      	ldr	r2, [r5, #0]
    10dc:	2a00      	cmp	r2, #0
    10de:	dafc      	bge.n	10da <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    10e0:	4a46      	ldr	r2, [pc, #280]	; (11fc <set_arm_clock+0x290>)
    10e2:	6915      	ldr	r5, [r2, #16]
    10e4:	f005 0507 	and.w	r5, r5, #7
    10e8:	429d      	cmp	r5, r3
    10ea:	d003      	beq.n	10f4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    10ec:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    10ee:	6c93      	ldr	r3, [r2, #72]	; 0x48
    10f0:	03dd      	lsls	r5, r3, #15
    10f2:	d4fc      	bmi.n	10ee <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    10f4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    10f8:	d009      	beq.n	110e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    10fa:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    10fe:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    1102:	4a3e      	ldr	r2, [pc, #248]	; (11fc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1104:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    1106:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1108:	6c93      	ldr	r3, [r2, #72]	; 0x48
    110a:	0799      	lsls	r1, r3, #30
    110c:	d4fc      	bmi.n	1108 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    110e:	4947      	ldr	r1, [pc, #284]	; (122c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    1110:	4a47      	ldr	r2, [pc, #284]	; (1230 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1112:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    1114:	4291      	cmp	r1, r2
    1116:	d83c      	bhi.n	1192 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1118:	4b46      	ldr	r3, [pc, #280]	; (1234 <set_arm_clock+0x2c8>)
    111a:	09c9      	lsrs	r1, r1, #7
    111c:	fba3 3101 	umull	r3, r1, r3, r1
    1120:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1122:	1e4b      	subs	r3, r1, #1
    1124:	021b      	lsls	r3, r3, #8
    1126:	ea86 0203 	eor.w	r2, r6, r3
    112a:	f412 7f40 	tst.w	r2, #768	; 0x300
    112e:	d006      	beq.n	113e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1130:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1134:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    1138:	4a30      	ldr	r2, [pc, #192]	; (11fc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    113a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    113c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    113e:	4a2f      	ldr	r2, [pc, #188]	; (11fc <set_arm_clock+0x290>)
    1140:	6953      	ldr	r3, [r2, #20]
    1142:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    1146:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1148:	6c93      	ldr	r3, [r2, #72]	; 0x48
    114a:	069b      	lsls	r3, r3, #26
    114c:	d4fc      	bmi.n	1148 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    114e:	4b3a      	ldr	r3, [pc, #232]	; (1238 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1150:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1152:	fba3 2300 	umull	r2, r3, r3, r0
    1156:	f04f 32ff 	mov.w	r2, #4294967295
    115a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    115e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1162:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    1166:	4a35      	ldr	r2, [pc, #212]	; (123c <set_arm_clock+0x2d0>)
    1168:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    116a:	4a35      	ldr	r2, [pc, #212]	; (1240 <set_arm_clock+0x2d4>)
    116c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    116e:	4a35      	ldr	r2, [pc, #212]	; (1244 <set_arm_clock+0x2d8>)
    1170:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1172:	d208      	bcs.n	1186 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1174:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1178:	4a21      	ldr	r2, [pc, #132]	; (1200 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    117a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    117e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1180:	6813      	ldr	r3, [r2, #0]
    1182:	2b00      	cmp	r3, #0
    1184:	dafc      	bge.n	1180 <set_arm_clock+0x214>
	}

	return frequency;
}
    1186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    118a:	4673      	mov	r3, lr
    118c:	e762      	b.n	1054 <set_arm_clock+0xe8>
    118e:	2712      	movs	r7, #18
    1190:	e718      	b.n	fc4 <set_arm_clock+0x58>
    1192:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    1196:	2104      	movs	r1, #4
    1198:	e7c5      	b.n	1126 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    119a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    119e:	4820      	ldr	r0, [pc, #128]	; (1220 <set_arm_clock+0x2b4>)
    11a0:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    11a2:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    11a4:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    11a6:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    11aa:	4a27      	ldr	r2, [pc, #156]	; (1248 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    11ac:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1258 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    11b0:	fba2 2000 	umull	r2, r0, r2, r0
    11b4:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    11b6:	4825      	ldr	r0, [pc, #148]	; (124c <set_arm_clock+0x2e0>)
    11b8:	2a36      	cmp	r2, #54	; 0x36
    11ba:	bf38      	it	cc
    11bc:	2236      	movcc	r2, #54	; 0x36
    11be:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    11c2:	ea42 0a0a 	orr.w	sl, r2, sl
    11c6:	e774      	b.n	10b2 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    11c8:	ea4f 248c 	mov.w	r4, ip, lsl #10
    11cc:	2300      	movs	r3, #0
    11ce:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    11d2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    11d6:	46ac      	mov	ip, r5
    11d8:	e762      	b.n	10a0 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    11da:	461d      	mov	r5, r3
    11dc:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    11e0:	4611      	mov	r1, r2
    11e2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    11e6:	e713      	b.n	1010 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    11e8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    11ea:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    11ee:	4602      	mov	r2, r0
    11f0:	4631      	mov	r1, r6
    11f2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    11f4:	46e6      	mov	lr, ip
    11f6:	e753      	b.n	10a0 <set_arm_clock+0x134>
    11f8:	1f78a400 	.word	0x1f78a400
    11fc:	400fc000 	.word	0x400fc000
    1200:	40080000 	.word	0x40080000
    1204:	23c34600 	.word	0x23c34600
    1208:	004cb223 	.word	0x004cb223
    120c:	51eb851f 	.word	0x51eb851f
    1210:	016e3600 	.word	0x016e3600
    1214:	400d8000 	.word	0x400d8000
    1218:	80003040 	.word	0x80003040
    121c:	269fb1ff 	.word	0x269fb1ff
    1220:	005b8d80 	.word	0x005b8d80
    1224:	4df67eff 	.word	0x4df67eff
    1228:	4d3f6400 	.word	0x4d3f6400
    122c:	08f0d17f 	.word	0x08f0d17f
    1230:	2cb4177f 	.word	0x2cb4177f
    1234:	00e5109f 	.word	0x00e5109f
    1238:	431bde83 	.word	0x431bde83
    123c:	2000088c 	.word	0x2000088c
    1240:	20000888 	.word	0x20000888
    1244:	20001ac4 	.word	0x20001ac4
    1248:	165e9f81 	.word	0x165e9f81
    124c:	00b71b00 	.word	0x00b71b00
    1250:	8000206c 	.word	0x8000206c
    1254:	8001307f 	.word	0x8001307f
    1258:	80002000 	.word	0x80002000

0000125c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    125c:	b900      	cbnz	r0, 1260 <delay+0x4>
    125e:	4770      	bx	lr
{
    1260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1264:	2101      	movs	r1, #1
    1266:	4681      	mov	r9, r0
    1268:	4c21      	ldr	r4, [pc, #132]	; (12f0 <delay+0x94>)
    126a:	4d22      	ldr	r5, [pc, #136]	; (12f4 <delay+0x98>)
    126c:	4e22      	ldr	r6, [pc, #136]	; (12f8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    126e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1272:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1274:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1276:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    127a:	2b00      	cmp	r3, #0
    127c:	d1f7      	bne.n	126e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    127e:	491f      	ldr	r1, [pc, #124]	; (12fc <delay+0xa0>)
    1280:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1282:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1286:	f8df a078 	ldr.w	sl, [pc, #120]	; 1300 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    128a:	1a1b      	subs	r3, r3, r0
    128c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    128e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1292:	f8da 2000 	ldr.w	r2, [sl]
    1296:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    129a:	455a      	cmp	r2, fp
    129c:	bf94      	ite	ls
    129e:	4490      	addls	r8, r2
    12a0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    12a2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    12a6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    12a8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    12aa:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    12ae:	2b00      	cmp	r3, #0
    12b0:	d1f7      	bne.n	12a2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    12b2:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12b4:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    12b8:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    12ba:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    12be:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    12c2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    12c6:	bf94      	ite	ls
    12c8:	4462      	addls	r2, ip
    12ca:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    12ce:	eba2 0208 	sub.w	r2, r2, r8
    12d2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    12d6:	d306      	bcc.n	12e6 <delay+0x8a>
			if (--msec == 0) return;
    12d8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    12dc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    12e0:	d1df      	bne.n	12a2 <delay+0x46>
}
    12e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    12e6:	f001 fa57 	bl	2798 <yield>
		while ((micros() - start) >= 1000) {
    12ea:	4904      	ldr	r1, [pc, #16]	; (12fc <delay+0xa0>)
    12ec:	e7d9      	b.n	12a2 <delay+0x46>
    12ee:	bf00      	nop
    12f0:	20001ad0 	.word	0x20001ad0
    12f4:	20001acc 	.word	0x20001acc
    12f8:	20001ac8 	.word	0x20001ac8
    12fc:	e0001000 	.word	0xe0001000
    1300:	20001ac4 	.word	0x20001ac4

00001304 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1304:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1306:	f7fe feaf 	bl	68 <setup>
	while (1) {
		loop();
    130a:	f7fe ff69 	bl	1e0 <loop>
		yield();
    130e:	f001 fa43 	bl	2798 <yield>
	while (1) {
    1312:	e7fa      	b.n	130a <main+0x6>

00001314 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1314:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1316:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    131a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    131e:	d16d      	bne.n	13fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1320:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1322:	d341      	bcc.n	13a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1324:	f851 3b04 	ldr.w	r3, [r1], #4
    1328:	f840 3b04 	str.w	r3, [r0], #4
    132c:	f851 3b04 	ldr.w	r3, [r1], #4
    1330:	f840 3b04 	str.w	r3, [r0], #4
    1334:	f851 3b04 	ldr.w	r3, [r1], #4
    1338:	f840 3b04 	str.w	r3, [r0], #4
    133c:	f851 3b04 	ldr.w	r3, [r1], #4
    1340:	f840 3b04 	str.w	r3, [r0], #4
    1344:	f851 3b04 	ldr.w	r3, [r1], #4
    1348:	f840 3b04 	str.w	r3, [r0], #4
    134c:	f851 3b04 	ldr.w	r3, [r1], #4
    1350:	f840 3b04 	str.w	r3, [r0], #4
    1354:	f851 3b04 	ldr.w	r3, [r1], #4
    1358:	f840 3b04 	str.w	r3, [r0], #4
    135c:	f851 3b04 	ldr.w	r3, [r1], #4
    1360:	f840 3b04 	str.w	r3, [r0], #4
    1364:	f851 3b04 	ldr.w	r3, [r1], #4
    1368:	f840 3b04 	str.w	r3, [r0], #4
    136c:	f851 3b04 	ldr.w	r3, [r1], #4
    1370:	f840 3b04 	str.w	r3, [r0], #4
    1374:	f851 3b04 	ldr.w	r3, [r1], #4
    1378:	f840 3b04 	str.w	r3, [r0], #4
    137c:	f851 3b04 	ldr.w	r3, [r1], #4
    1380:	f840 3b04 	str.w	r3, [r0], #4
    1384:	f851 3b04 	ldr.w	r3, [r1], #4
    1388:	f840 3b04 	str.w	r3, [r0], #4
    138c:	f851 3b04 	ldr.w	r3, [r1], #4
    1390:	f840 3b04 	str.w	r3, [r0], #4
    1394:	f851 3b04 	ldr.w	r3, [r1], #4
    1398:	f840 3b04 	str.w	r3, [r0], #4
    139c:	f851 3b04 	ldr.w	r3, [r1], #4
    13a0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    13a4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    13a6:	d2bd      	bcs.n	1324 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    13a8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    13aa:	d311      	bcc.n	13d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    13ac:	f851 3b04 	ldr.w	r3, [r1], #4
    13b0:	f840 3b04 	str.w	r3, [r0], #4
    13b4:	f851 3b04 	ldr.w	r3, [r1], #4
    13b8:	f840 3b04 	str.w	r3, [r0], #4
    13bc:	f851 3b04 	ldr.w	r3, [r1], #4
    13c0:	f840 3b04 	str.w	r3, [r0], #4
    13c4:	f851 3b04 	ldr.w	r3, [r1], #4
    13c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    13cc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    13ce:	d2ed      	bcs.n	13ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    13d0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    13d2:	d305      	bcc.n	13e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    13d4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    13d8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    13dc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    13de:	d2f9      	bcs.n	13d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    13e0:	3204      	adds	r2, #4
	beq	.Ldone
    13e2:	d008      	beq.n	13f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    13e4:	07d2      	lsls	r2, r2, #31
	itt ne
    13e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    13e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    13ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    13f0:	d301      	bcc.n	13f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    13f2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    13f4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    13f6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    13f8:	4770      	bx	lr
    13fa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    13fc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    13fe:	d313      	bcc.n	1428 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1400:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1402:	d08d      	beq.n	1320 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1404:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1408:	d08a      	beq.n	1320 <memcpy+0xc>

	rsb	r3, #4
    140a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    140e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1410:	07db      	lsls	r3, r3, #31
	itt ne
    1412:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1414:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1418:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    141c:	d380      	bcc.n	1320 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    141e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1422:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1426:	e77b      	b.n	1320 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1428:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    142a:	d3d9      	bcc.n	13e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    142c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    142e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1432:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1436:	d2f9      	bcs.n	142c <memcpy+0x118>

	ldrb	r3, [r1]
    1438:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    143a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    143c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    143e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1440:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1442:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1444:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1446:	4770      	bx	lr

00001448 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    1448:	f001 bcba 	b.w	2dc0 <malloc>

0000144c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    144c:	f001 bcc0 	b.w	2dd0 <free>

00001450 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    1450:	f101 3cff 	add.w	ip, r1, #4294967295
{
    1454:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    1456:	4666      	mov	r6, ip
	int i=0, j;
    1458:	2400      	movs	r4, #0
    145a:	e000      	b.n	145e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    145c:	3401      	adds	r4, #1
		digit = val % radix;
    145e:	fbb0 f5f2 	udiv	r5, r0, r2
    1462:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1466:	2b09      	cmp	r3, #9
    1468:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    146c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1470:	fa5f fe8e 	uxtb.w	lr, lr
    1474:	bf98      	it	ls
    1476:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    147a:	4290      	cmp	r0, r2
		val /= radix;
    147c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    147e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    1482:	d2eb      	bcs.n	145c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    1484:	1c63      	adds	r3, r4, #1
    1486:	2200      	movs	r2, #0
    1488:	18c8      	adds	r0, r1, r3
    148a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    148c:	b17c      	cbz	r4, 14ae <ultoa+0x5e>
		t = buf[j];
    148e:	4662      	mov	r2, ip
    1490:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    1494:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    1498:	eba1 030c 	sub.w	r3, r1, ip
    149c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    149e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    14a2:	3b01      	subs	r3, #1
    14a4:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    14a6:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    14a8:	4423      	add	r3, r4
    14aa:	429a      	cmp	r2, r3
    14ac:	dbef      	blt.n	148e <ultoa+0x3e>
	}
	return buf;
}
    14ae:	4608      	mov	r0, r1
    14b0:	bd70      	pop	{r4, r5, r6, pc}
    14b2:	bf00      	nop

000014b4 <unused_interrupt_vector>:
	__disable_irq();
    14b4:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    14b6:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    14ba:	4c52      	ldr	r4, [pc, #328]	; (1604 <unused_interrupt_vector+0x150>)
    14bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    14c0:	f01e 0f04 	tst.w	lr, #4
    14c4:	bf0c      	ite	eq
    14c6:	f3ef 8208 	mrseq	r2, MSP
    14ca:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    14ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    14d2:	4e4d      	ldr	r6, [pc, #308]	; (1608 <unused_interrupt_vector+0x154>)
	while (p < end) {
    14d4:	4d4d      	ldr	r5, [pc, #308]	; (160c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    14d6:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    14da:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    14de:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    14e2:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    14e6:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    14ea:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    14ee:	6993      	ldr	r3, [r2, #24]
    14f0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    14f4:	69d3      	ldr	r3, [r2, #28]
    14f6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    14fa:	f000 f8bd 	bl	1678 <tempmonGetTemp>
    14fe:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    1502:	f001 fa6d 	bl	29e0 <rtc_get>
	info->len = sizeof(*info) / 4;
    1506:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    1508:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    150c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    1510:	460b      	mov	r3, r1
    1512:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1516:	493e      	ldr	r1, [pc, #248]	; (1610 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    1518:	1d30      	adds	r0, r6, #4
    151a:	405a      	eors	r2, r3
    151c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    151e:	f002 0301 	and.w	r3, r2, #1
    1522:	3c01      	subs	r4, #1
    1524:	fb01 f303 	mul.w	r3, r1, r3
    1528:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    152c:	d1f7      	bne.n	151e <unused_interrupt_vector+0x6a>
	while (p < end) {
    152e:	42a8      	cmp	r0, r5
    1530:	d002      	beq.n	1538 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    1532:	6873      	ldr	r3, [r6, #4]
    1534:	4606      	mov	r6, r0
    1536:	e7ef      	b.n	1518 <unused_interrupt_vector+0x64>
	info->crc = crc;
    1538:	4b32      	ldr	r3, [pc, #200]	; (1604 <unused_interrupt_vector+0x150>)
    153a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    153e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1542:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1546:	4930      	ldr	r1, [pc, #192]	; (1608 <unused_interrupt_vector+0x154>)
    1548:	4a32      	ldr	r2, [pc, #200]	; (1614 <unused_interrupt_vector+0x160>)
    154a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    154e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    1552:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1556:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    155a:	4a2f      	ldr	r2, [pc, #188]	; (1618 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    155c:	2502      	movs	r5, #2
    155e:	482f      	ldr	r0, [pc, #188]	; (161c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1560:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1562:	492f      	ldr	r1, [pc, #188]	; (1620 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1564:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    1568:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    156a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    156c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    156e:	482d      	ldr	r0, [pc, #180]	; (1624 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1578:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    157a:	680b      	ldr	r3, [r1, #0]
    157c:	4283      	cmp	r3, r0
    157e:	d83d      	bhi.n	15fc <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    1580:	4d26      	ldr	r5, [pc, #152]	; (161c <unused_interrupt_vector+0x168>)
    1582:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    1584:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1588:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    158c:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    158e:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    1590:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1594:	4924      	ldr	r1, [pc, #144]	; (1628 <unused_interrupt_vector+0x174>)
    1596:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    159a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    159e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    15a2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    15a6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    15aa:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    15ae:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    15b2:	e001      	b.n	15b8 <unused_interrupt_vector+0x104>
		usb_isr();
    15b4:	f000 f952 	bl	185c <usb_isr>
		if (PIT_TFLG0) {
    15b8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    15bc:	2b00      	cmp	r3, #0
    15be:	d0f9      	beq.n	15b4 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    15c0:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    15c2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    15c6:	2c4f      	cmp	r4, #79	; 0x4f
    15c8:	d9f4      	bls.n	15b4 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    15ca:	4b18      	ldr	r3, [pc, #96]	; (162c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    15cc:	2002      	movs	r0, #2
    15ce:	4918      	ldr	r1, [pc, #96]	; (1630 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    15d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    15d4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    15d8:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    15da:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    15de:	b93b      	cbnz	r3, 15f0 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    15e0:	4814      	ldr	r0, [pc, #80]	; (1634 <unused_interrupt_vector+0x180>)
    15e2:	4915      	ldr	r1, [pc, #84]	; (1638 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    15e4:	4a0d      	ldr	r2, [pc, #52]	; (161c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    15e6:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    15e8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    15ec:	2b00      	cmp	r3, #0
    15ee:	d0fa      	beq.n	15e6 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    15f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    15f4:	4a11      	ldr	r2, [pc, #68]	; (163c <unused_interrupt_vector+0x188>)
    15f6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    15fa:	e7fe      	b.n	15fa <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    15fc:	f7ff fcb6 	bl	f6c <set_arm_clock>
    1600:	e7be      	b.n	1580 <unused_interrupt_vector+0xcc>
    1602:	bf00      	nop
    1604:	2027ff00 	.word	0x2027ff00
    1608:	2027ff80 	.word	0x2027ff80
    160c:	2027ffa8 	.word	0x2027ffa8
    1610:	edb88320 	.word	0xedb88320
    1614:	2027ffa0 	.word	0x2027ffa0
    1618:	400fc000 	.word	0x400fc000
    161c:	40084000 	.word	0x40084000
    1620:	2000088c 	.word	0x2000088c
    1624:	0bcd3d80 	.word	0x0bcd3d80
    1628:	00249f00 	.word	0x00249f00
    162c:	400d9000 	.word	0x400d9000
    1630:	402e0000 	.word	0x402e0000
    1634:	400f8000 	.word	0x400f8000
    1638:	0bad00f1 	.word	0x0bad00f1
    163c:	05fa0004 	.word	0x05fa0004

00001640 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    1640:	490a      	ldr	r1, [pc, #40]	; (166c <_sbrk+0x2c>)
    1642:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    1644:	b138      	cbz	r0, 1656 <_sbrk+0x16>
{
    1646:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    1648:	1813      	adds	r3, r2, r0
    164a:	4809      	ldr	r0, [pc, #36]	; (1670 <_sbrk+0x30>)
    164c:	4283      	cmp	r3, r0
    164e:	d804      	bhi.n	165a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1650:	4610      	mov	r0, r2
                __brkval = prev + incr;
    1652:	600b      	str	r3, [r1, #0]
}
    1654:	bd08      	pop	{r3, pc}
    1656:	4610      	mov	r0, r2
    1658:	4770      	bx	lr
                        errno = ENOMEM;
    165a:	f001 fee1 	bl	3420 <__errno>
    165e:	230c      	movs	r3, #12
                        return (void *)-1;
    1660:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    1664:	6003      	str	r3, [r0, #0]
}
    1666:	4610      	mov	r0, r2
    1668:	bd08      	pop	{r3, pc}
    166a:	bf00      	nop
    166c:	20000c60 	.word	0x20000c60
    1670:	20280000 	.word	0x20280000

00001674 <Panic_Temp_isr>:
  unused_interrupt_vector();
    1674:	f7ff bf1e 	b.w	14b4 <unused_interrupt_vector>

00001678 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    1678:	4a12      	ldr	r2, [pc, #72]	; (16c4 <tempmonGetTemp+0x4c>)
    167a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    167e:	075b      	lsls	r3, r3, #29
    1680:	d5fb      	bpl.n	167a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1682:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1686:	4810      	ldr	r0, [pc, #64]	; (16c8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1688:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    168c:	490f      	ldr	r1, [pc, #60]	; (16cc <tempmonGetTemp+0x54>)
    168e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1692:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1696:	ed91 6a00 	vldr	s12, [r1]
    169a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    169e:	4a0c      	ldr	r2, [pc, #48]	; (16d0 <tempmonGetTemp+0x58>)
    16a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    16a4:	4b0b      	ldr	r3, [pc, #44]	; (16d4 <tempmonGetTemp+0x5c>)
    16a6:	edd2 6a00 	vldr	s13, [r2]
    16aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
    16ae:	ed93 7a00 	vldr	s14, [r3]
    16b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    16b6:	ee67 7a86 	vmul.f32	s15, s15, s12
    16ba:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    16be:	ee37 0a40 	vsub.f32	s0, s14, s0
    16c2:	4770      	bx	lr
    16c4:	400d8100 	.word	0x400d8100
    16c8:	20001ab4 	.word	0x20001ab4
    16cc:	20001abc 	.word	0x20001abc
    16d0:	20001ac0 	.word	0x20001ac0
    16d4:	20001ab8 	.word	0x20001ab8

000016d8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    16d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    16da:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    16dc:	b11b      	cbz	r3, 16e6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    16de:	6853      	ldr	r3, [r2, #4]
    16e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    16e4:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    16e6:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    16e8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    16ea:	b33c      	cbz	r4, 173c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    16ec:	4b1a      	ldr	r3, [pc, #104]	; (1758 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    16ee:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    16f0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    16f4:	420c      	tst	r4, r1
    16f6:	d11d      	bne.n	1734 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    16f8:	4e18      	ldr	r6, [pc, #96]	; (175c <schedule_transfer+0x84>)
    16fa:	6877      	ldr	r7, [r6, #4]
    16fc:	e004      	b.n	1708 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    16fe:	6874      	ldr	r4, [r6, #4]
    1700:	1be4      	subs	r4, r4, r7
    1702:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1706:	d20b      	bcs.n	1720 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1708:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    170c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1710:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1714:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1718:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    171c:	0464      	lsls	r4, r4, #17
    171e:	d5ee      	bpl.n	16fe <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1720:	400d      	ands	r5, r1
    1722:	d107      	bne.n	1734 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1724:	4c0c      	ldr	r4, [pc, #48]	; (1758 <schedule_transfer+0x80>)
		endpoint->status = 0;
    1726:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    172a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    172e:	430b      	orrs	r3, r1
    1730:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1734:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1736:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1738:	bcf0      	pop	{r4, r5, r6, r7}
    173a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    173c:	4d06      	ldr	r5, [pc, #24]	; (1758 <schedule_transfer+0x80>)
	endpoint->status = 0;
    173e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    1742:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1746:	430b      	orrs	r3, r1
    1748:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    174c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    174e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1750:	b662      	cpsie	i
}
    1752:	bcf0      	pop	{r4, r5, r6, r7}
    1754:	4770      	bx	lr
    1756:	bf00      	nop
    1758:	402e0000 	.word	0x402e0000
    175c:	e0001000 	.word	0xe0001000

00001760 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1760:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1762:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    1764:	b19d      	cbz	r5, 178e <run_callbacks+0x2e>
    1766:	4606      	mov	r6, r0
    1768:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    176a:	2400      	movs	r4, #0
    176c:	e003      	b.n	1776 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    176e:	6812      	ldr	r2, [r2, #0]
		count++;
    1770:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    1772:	2a01      	cmp	r2, #1
    1774:	d00c      	beq.n	1790 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    1776:	6853      	ldr	r3, [r2, #4]
    1778:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    177c:	d0f7      	beq.n	176e <run_callbacks+0xe>
			ep->first_transfer = t;
    177e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1780:	b12c      	cbz	r4, 178e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    1782:	4628      	mov	r0, r5
		ep->callback_function(first);
    1784:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    1786:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    1788:	4798      	blx	r3
	while (count) {
    178a:	3c01      	subs	r4, #1
    178c:	d1f9      	bne.n	1782 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    178e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    1790:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    1794:	e7f4      	b.n	1780 <run_callbacks+0x20>
    1796:	bf00      	nop

00001798 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1798:	b430      	push	{r4, r5}
	if (len > 0) {
    179a:	b9d9      	cbnz	r1, 17d4 <endpoint0_transmit.constprop.0+0x3c>
    179c:	4c1f      	ldr	r4, [pc, #124]	; (181c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    179e:	4b20      	ldr	r3, [pc, #128]	; (1820 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    17a0:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17a2:	4a20      	ldr	r2, [pc, #128]	; (1824 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    17a4:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17a6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    17aa:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    17ac:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    17ae:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17b2:	2480      	movs	r4, #128	; 0x80
    17b4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17b6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    17ba:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    17be:	481a      	ldr	r0, [pc, #104]	; (1828 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    17c0:	432b      	orrs	r3, r5
    17c2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    17c6:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    17c8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    17cc:	2b00      	cmp	r3, #0
    17ce:	d1fb      	bne.n	17c8 <endpoint0_transmit.constprop.0+0x30>
}
    17d0:	bc30      	pop	{r4, r5}
    17d2:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    17d4:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    17d6:	4b15      	ldr	r3, [pc, #84]	; (182c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    17d8:	4c10      	ldr	r4, [pc, #64]	; (181c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    17da:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    17dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    17e0:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    17e2:	4a10      	ldr	r2, [pc, #64]	; (1824 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    17e4:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    17e6:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    17ea:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    17ec:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    17ee:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    17f2:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    17f4:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    17f6:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    17fa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    17fe:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    1800:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1802:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    1804:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    1806:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    180e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1812:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1816:	2b00      	cmp	r3, #0
    1818:	d1fb      	bne.n	1812 <endpoint0_transmit.constprop.0+0x7a>
    181a:	e7c0      	b.n	179e <endpoint0_transmit.constprop.0+0x6>
    181c:	20000000 	.word	0x20000000
    1820:	200016c0 	.word	0x200016c0
    1824:	402e0000 	.word	0x402e0000
    1828:	20001a34 	.word	0x20001a34
    182c:	200016e0 	.word	0x200016e0

00001830 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    1830:	4908      	ldr	r1, [pc, #32]	; (1854 <usb_stop_sof_interrupts+0x24>)
    1832:	2201      	movs	r2, #1
    1834:	780b      	ldrb	r3, [r1, #0]
    1836:	fa02 f000 	lsl.w	r0, r2, r0
    183a:	ea23 0000 	bic.w	r0, r3, r0
    183e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    1840:	b930      	cbnz	r0, 1850 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1842:	4a05      	ldr	r2, [pc, #20]	; (1858 <usb_stop_sof_interrupts+0x28>)
    1844:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    1848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    184c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    1850:	4770      	bx	lr
    1852:	bf00      	nop
    1854:	20001af5 	.word	0x20001af5
    1858:	402e0000 	.word	0x402e0000

0000185c <usb_isr>:
{
    185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    1860:	4c97      	ldr	r4, [pc, #604]	; (1ac0 <usb_isr+0x264>)
{
    1862:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    1864:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1868:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    186a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    186e:	d553      	bpl.n	1918 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1870:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1874:	2a00      	cmp	r2, #0
    1876:	d04a      	beq.n	190e <usb_isr+0xb2>
    1878:	4e92      	ldr	r6, [pc, #584]	; (1ac4 <usb_isr+0x268>)
    187a:	f8df a260 	ldr.w	sl, [pc, #608]	; 1adc <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    187e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1af4 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1882:	f8df b274 	ldr.w	fp, [pc, #628]	; 1af8 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1886:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1afc <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    188a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    188e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1892:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    189a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    189e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    18a2:	049d      	lsls	r5, r3, #18
    18a4:	d5f5      	bpl.n	1892 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    18a6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    18aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    18ae:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    18b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    18b6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    18ba:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    18be:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    18c2:	d1fa      	bne.n	18ba <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    18c4:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    18c6:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    18c8:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    18cc:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    18d0:	f000 81cf 	beq.w	1c72 <usb_isr+0x416>
    18d4:	f200 80db 	bhi.w	1a8e <usb_isr+0x232>
    18d8:	f240 3102 	movw	r1, #770	; 0x302
    18dc:	428b      	cmp	r3, r1
    18de:	f000 81e7 	beq.w	1cb0 <usb_isr+0x454>
    18e2:	f200 809a 	bhi.w	1a1a <usb_isr+0x1be>
    18e6:	2b82      	cmp	r3, #130	; 0x82
    18e8:	f000 81cb 	beq.w	1c82 <usb_isr+0x426>
    18ec:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    18f0:	f040 808a 	bne.w	1a08 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    18f4:	f010 0f78 	tst.w	r0, #120	; 0x78
    18f8:	b283      	uxth	r3, r0
    18fa:	f000 8203 	beq.w	1d04 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    18fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1902:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1906:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    190a:	2a00      	cmp	r2, #0
    190c:	d1bd      	bne.n	188a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    190e:	4a6c      	ldr	r2, [pc, #432]	; (1ac0 <usb_isr+0x264>)
    1910:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1914:	2b00      	cmp	r3, #0
    1916:	d142      	bne.n	199e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1918:	067e      	lsls	r6, r7, #25
    191a:	d516      	bpl.n	194a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    191c:	4b68      	ldr	r3, [pc, #416]	; (1ac0 <usb_isr+0x264>)
    191e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1922:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1926:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    192a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    192e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1932:	2c00      	cmp	r4, #0
    1934:	d1fb      	bne.n	192e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1936:	f04f 32ff 	mov.w	r2, #4294967295
    193a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    193e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    1942:	f000 fd2d 	bl	23a0 <usb_serial_reset>
		endpointN_notify_mask = 0;
    1946:	4b60      	ldr	r3, [pc, #384]	; (1ac8 <usb_isr+0x26c>)
    1948:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    194a:	01fc      	lsls	r4, r7, #7
    194c:	d503      	bpl.n	1956 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    194e:	4b5f      	ldr	r3, [pc, #380]	; (1acc <usb_isr+0x270>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	b103      	cbz	r3, 1956 <usb_isr+0xfa>
    1954:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    1956:	01b8      	lsls	r0, r7, #6
    1958:	d503      	bpl.n	1962 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    195a:	4b5d      	ldr	r3, [pc, #372]	; (1ad0 <usb_isr+0x274>)
    195c:	681b      	ldr	r3, [r3, #0]
    195e:	b103      	cbz	r3, 1962 <usb_isr+0x106>
    1960:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    1962:	0779      	lsls	r1, r7, #29
    1964:	d508      	bpl.n	1978 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1966:	4b56      	ldr	r3, [pc, #344]	; (1ac0 <usb_isr+0x264>)
    1968:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    196c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1970:	d047      	beq.n	1a02 <usb_isr+0x1a6>
			usb_high_speed = 1;
    1972:	4b58      	ldr	r3, [pc, #352]	; (1ad4 <usb_isr+0x278>)
    1974:	2201      	movs	r2, #1
    1976:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1978:	4b51      	ldr	r3, [pc, #324]	; (1ac0 <usb_isr+0x264>)
    197a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    197e:	061a      	lsls	r2, r3, #24
    1980:	d50a      	bpl.n	1998 <usb_isr+0x13c>
    1982:	063b      	lsls	r3, r7, #24
    1984:	d508      	bpl.n	1998 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    1986:	4a54      	ldr	r2, [pc, #336]	; (1ad8 <usb_isr+0x27c>)
    1988:	7813      	ldrb	r3, [r2, #0]
    198a:	b12b      	cbz	r3, 1998 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    198c:	3b01      	subs	r3, #1
    198e:	b2db      	uxtb	r3, r3
    1990:	7013      	strb	r3, [r2, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	f000 8272 	beq.w	1e7c <usb_isr+0x620>
}
    1998:	b003      	add	sp, #12
    199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    199e:	494f      	ldr	r1, [pc, #316]	; (1adc <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    19a0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    19a4:	6808      	ldr	r0, [r1, #0]
    19a6:	4203      	tst	r3, r0
    19a8:	f040 81d1 	bne.w	1d4e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    19ac:	4a46      	ldr	r2, [pc, #280]	; (1ac8 <usb_isr+0x26c>)
    19ae:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    19b0:	401c      	ands	r4, r3
    19b2:	d0b1      	beq.n	1918 <usb_isr+0xbc>
				while (tx) {
    19b4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    19b8:	d010      	beq.n	19dc <usb_isr+0x180>
    19ba:	4e42      	ldr	r6, [pc, #264]	; (1ac4 <usb_isr+0x268>)
					tx &= ~(1<<p);
    19bc:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    19c0:	fa98 f5a8 	rbit	r5, r8
    19c4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    19c8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    19cc:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    19d0:	3040      	adds	r0, #64	; 0x40
    19d2:	f7ff fec5 	bl	1760 <run_callbacks>
				while (tx) {
    19d6:	ea38 0805 	bics.w	r8, r8, r5
    19da:	d1f1      	bne.n	19c0 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    19dc:	b2a4      	uxth	r4, r4
				while(rx) {
    19de:	2c00      	cmp	r4, #0
    19e0:	d09a      	beq.n	1918 <usb_isr+0xbc>
    19e2:	4e38      	ldr	r6, [pc, #224]	; (1ac4 <usb_isr+0x268>)
					rx &= ~(1<<p);
    19e4:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    19e8:	fa94 f5a4 	rbit	r5, r4
    19ec:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    19f0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    19f4:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    19f8:	f7ff feb2 	bl	1760 <run_callbacks>
				while(rx) {
    19fc:	43ac      	bics	r4, r5
    19fe:	d1f3      	bne.n	19e8 <usb_isr+0x18c>
    1a00:	e78a      	b.n	1918 <usb_isr+0xbc>
			usb_high_speed = 0;
    1a02:	4a34      	ldr	r2, [pc, #208]	; (1ad4 <usb_isr+0x278>)
    1a04:	7013      	strb	r3, [r2, #0]
    1a06:	e7b7      	b.n	1978 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    1a08:	2b80      	cmp	r3, #128	; 0x80
    1a0a:	f47f af78 	bne.w	18fe <usb_isr+0xa2>
		reply_buffer[0] = 0;
    1a0e:	4834      	ldr	r0, [pc, #208]	; (1ae0 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    1a10:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    1a12:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1a14:	f7ff fec0 	bl	1798 <endpoint0_transmit.constprop.0>
		return;
    1a18:	e775      	b.n	1906 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    1a1a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1a1e:	f000 810b 	beq.w	1c38 <usb_isr+0x3dc>
    1a22:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    1a26:	2b01      	cmp	r3, #1
    1a28:	f63f af69 	bhi.w	18fe <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1a2c:	4b2d      	ldr	r3, [pc, #180]	; (1ae4 <usb_isr+0x288>)
    1a2e:	685d      	ldr	r5, [r3, #4]
    1a30:	2d00      	cmp	r5, #0
    1a32:	f43f af64 	beq.w	18fe <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1a36:	fa1f fc8c 	uxth.w	ip, ip
    1a3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    1a3e:	e004      	b.n	1a4a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1a40:	691d      	ldr	r5, [r3, #16]
    1a42:	330c      	adds	r3, #12
    1a44:	2d00      	cmp	r5, #0
    1a46:	f43f af5a 	beq.w	18fe <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1a4a:	881a      	ldrh	r2, [r3, #0]
    1a4c:	4572      	cmp	r2, lr
    1a4e:	d1f7      	bne.n	1a40 <usb_isr+0x1e4>
    1a50:	885a      	ldrh	r2, [r3, #2]
    1a52:	4562      	cmp	r2, ip
    1a54:	d1f4      	bne.n	1a40 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    1a56:	ea4f 221e 	mov.w	r2, lr, lsr #8
    1a5a:	2a03      	cmp	r2, #3
    1a5c:	f000 81a5 	beq.w	1daa <usb_isr+0x54e>
					datalen = list->length;
    1a60:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    1a62:	0c00      	lsrs	r0, r0, #16
    1a64:	4282      	cmp	r2, r0
    1a66:	bf28      	it	cs
    1a68:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    1a6a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1a6e:	f040 81a1 	bne.w	1db4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    1a72:	4b18      	ldr	r3, [pc, #96]	; (1ad4 <usb_isr+0x278>)
    1a74:	491c      	ldr	r1, [pc, #112]	; (1ae8 <usb_isr+0x28c>)
    1a76:	7818      	ldrb	r0, [r3, #0]
    1a78:	4b1c      	ldr	r3, [pc, #112]	; (1aec <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1a7a:	9201      	str	r2, [sp, #4]
    1a7c:	2800      	cmp	r0, #0
    1a7e:	bf18      	it	ne
    1a80:	4619      	movne	r1, r3
    1a82:	481b      	ldr	r0, [pc, #108]	; (1af0 <usb_isr+0x294>)
    1a84:	f7ff fc46 	bl	1314 <memcpy>
    1a88:	4d19      	ldr	r5, [pc, #100]	; (1af0 <usb_isr+0x294>)
    1a8a:	9a01      	ldr	r2, [sp, #4]
    1a8c:	e1e1      	b.n	1e52 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    1a8e:	f242 2121 	movw	r1, #8737	; 0x2221
    1a92:	428b      	cmp	r3, r1
    1a94:	d07c      	beq.n	1b90 <usb_isr+0x334>
    1a96:	d933      	bls.n	1b00 <usb_isr+0x2a4>
    1a98:	f242 3121 	movw	r1, #8993	; 0x2321
    1a9c:	428b      	cmp	r3, r1
    1a9e:	f000 8081 	beq.w	1ba4 <usb_isr+0x348>
    1aa2:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    1aa6:	428b      	cmp	r3, r1
    1aa8:	f47f af29 	bne.w	18fe <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    1aac:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    1ab0:	b283      	uxth	r3, r0
    1ab2:	f47f af24 	bne.w	18fe <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    1ab6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    1aba:	f363 0c0f 	bfi	ip, r3, #0, #16
    1abe:	e7b5      	b.n	1a2c <usb_isr+0x1d0>
    1ac0:	402e0000 	.word	0x402e0000
    1ac4:	20000000 	.word	0x20000000
    1ac8:	20001a38 	.word	0x20001a38
    1acc:	20001ae0 	.word	0x20001ae0
    1ad0:	20001ae4 	.word	0x20001ae4
    1ad4:	20001afb 	.word	0x20001afb
    1ad8:	20001afc 	.word	0x20001afc
    1adc:	20001a34 	.word	0x20001a34
    1ae0:	20001a7c 	.word	0x20001a7c
    1ae4:	200006e4 	.word	0x200006e4
    1ae8:	6000212c 	.word	0x6000212c
    1aec:	60002190 	.word	0x60002190
    1af0:	20200000 	.word	0x20200000
    1af4:	20001a2c 	.word	0x20001a2c
    1af8:	b8c6cf5d 	.word	0xb8c6cf5d
    1afc:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    1b00:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1b04:	d066      	beq.n	1bd4 <usb_isr+0x378>
    1b06:	f242 0121 	movw	r1, #8225	; 0x2021
    1b0a:	428b      	cmp	r3, r1
    1b0c:	f47f aef7 	bne.w	18fe <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    1b10:	0c03      	lsrs	r3, r0, #16
    1b12:	2b07      	cmp	r3, #7
    1b14:	f47f aef3 	bne.w	18fe <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1b18:	4bb2      	ldr	r3, [pc, #712]	; (1de4 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1b1a:	49b3      	ldr	r1, [pc, #716]	; (1de8 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    1b1c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1b1e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    1b20:	49b2      	ldr	r1, [pc, #712]	; (1dec <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1b22:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1b24:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1b28:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    1b2c:	2201      	movs	r2, #1
    1b2e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1b30:	4aaf      	ldr	r2, [pc, #700]	; (1df0 <usb_isr+0x594>)
    1b32:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1b34:	4aaf      	ldr	r2, [pc, #700]	; (1df4 <usb_isr+0x598>)
    1b36:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    1b38:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    1b3c:	f041 0101 	orr.w	r1, r1, #1
    1b40:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1b44:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1b48:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1b4c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1b4e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    1b50:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1b54:	2b00      	cmp	r3, #0
    1b56:	d1fb      	bne.n	1b50 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1b58:	4aa7      	ldr	r2, [pc, #668]	; (1df8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1b5a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1b5c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    1b5e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1b60:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1b62:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b64:	f248 0380 	movw	r3, #32896	; 0x8080
    1b68:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1b6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1b6e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1b72:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1b7a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1b82:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    1b86:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d1fb      	bne.n	1b86 <usb_isr+0x32a>
    1b8e:	e6ba      	b.n	1906 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1b90:	b280      	uxth	r0, r0
    1b92:	b938      	cbnz	r0, 1ba4 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1b94:	4b99      	ldr	r3, [pc, #612]	; (1dfc <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1b96:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1b9a:	6819      	ldr	r1, [r3, #0]
    1b9c:	4b98      	ldr	r3, [pc, #608]	; (1e00 <usb_isr+0x5a4>)
    1b9e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1ba0:	4b98      	ldr	r3, [pc, #608]	; (1e04 <usb_isr+0x5a8>)
    1ba2:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    1ba4:	4b94      	ldr	r3, [pc, #592]	; (1df8 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    1ba6:	2200      	movs	r2, #0
    1ba8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    1baa:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    1bac:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1bae:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1bb0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1bb2:	2280      	movs	r2, #128	; 0x80
    1bb4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1bb6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1bba:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1bbe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1bc6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1bca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d1fb      	bne.n	1bca <usb_isr+0x36e>
    1bd2:	e698      	b.n	1906 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    1bd4:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1bd8:	4b8b      	ldr	r3, [pc, #556]	; (1e08 <usb_isr+0x5ac>)
    1bda:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1bdc:	4b8b      	ldr	r3, [pc, #556]	; (1e0c <usb_isr+0x5b0>)
    1bde:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1be2:	4b8b      	ldr	r3, [pc, #556]	; (1e10 <usb_isr+0x5b4>)
    1be4:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1be8:	4b8a      	ldr	r3, [pc, #552]	; (1e14 <usb_isr+0x5b8>)
    1bea:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    1bee:	f000 fbd9 	bl	23a4 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    1bf2:	2280      	movs	r2, #128	; 0x80
    1bf4:	4629      	mov	r1, r5
    1bf6:	4888      	ldr	r0, [pc, #544]	; (1e18 <usb_isr+0x5bc>)
    1bf8:	f001 fbae 	bl	3358 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1bfc:	4b87      	ldr	r3, [pc, #540]	; (1e1c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1bfe:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1c00:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1c04:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    1c08:	4b7b      	ldr	r3, [pc, #492]	; (1df8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1c0a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c0c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    1c0e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c10:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    1c12:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1c14:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c16:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1c1a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1c1e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1c26:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1c2a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    1c2e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c32:	2b00      	cmp	r3, #0
    1c34:	d1fb      	bne.n	1c2e <usb_isr+0x3d2>
    1c36:	e666      	b.n	1906 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    1c38:	4b6f      	ldr	r3, [pc, #444]	; (1df8 <usb_isr+0x59c>)
    1c3a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    1c3c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    1c3e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c40:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1c42:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c44:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c46:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c48:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1c4c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1c50:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1c58:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1c5c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c60:	2b00      	cmp	r3, #0
    1c62:	d1fb      	bne.n	1c5c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1c64:	0c13      	lsrs	r3, r2, #16
    1c66:	065b      	lsls	r3, r3, #25
    1c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1c6c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    1c70:	e649      	b.n	1906 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    1c72:	4b65      	ldr	r3, [pc, #404]	; (1e08 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1c74:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    1c76:	486a      	ldr	r0, [pc, #424]	; (1e20 <usb_isr+0x5c4>)
    1c78:	781b      	ldrb	r3, [r3, #0]
    1c7a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1c7c:	f7ff fd8c 	bl	1798 <endpoint0_transmit.constprop.0>
		return;
    1c80:	e641      	b.n	1906 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1c82:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    1c84:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    1c88:	f47f ae39 	bne.w	18fe <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    1c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1c90:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    1c94:	4a62      	ldr	r2, [pc, #392]	; (1e20 <usb_isr+0x5c4>)
    1c96:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1c98:	0618      	lsls	r0, r3, #24
    1c9a:	f100 809e 	bmi.w	1dda <usb_isr+0x57e>
    1c9e:	07cb      	lsls	r3, r1, #31
    1ca0:	d501      	bpl.n	1ca6 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    1ca2:	2301      	movs	r3, #1
    1ca4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1ca6:	2102      	movs	r1, #2
    1ca8:	485d      	ldr	r0, [pc, #372]	; (1e20 <usb_isr+0x5c4>)
    1caa:	f7ff fd75 	bl	1798 <endpoint0_transmit.constprop.0>
		return;
    1cae:	e62a      	b.n	1906 <usb_isr+0xaa>
		if (endpoint > 7) break;
    1cb0:	f010 0f78 	tst.w	r0, #120	; 0x78
    1cb4:	b283      	uxth	r3, r0
    1cb6:	f47f ae22 	bne.w	18fe <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    1cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1cbe:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1cc2:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1cc6:	bf14      	ite	ne
    1cc8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1ccc:	f043 0301 	orreq.w	r3, r3, #1
    1cd0:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1cd4:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1cd6:	4b48      	ldr	r3, [pc, #288]	; (1df8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1cd8:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1cda:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1cdc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1cde:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1ce0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1ce2:	2280      	movs	r2, #128	; 0x80
    1ce4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1ce6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1cea:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1cee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1cf6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1cfa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d1fb      	bne.n	1cfa <usb_isr+0x49e>
    1d02:	e600      	b.n	1906 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1d08:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1d0c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1d10:	bf14      	ite	ne
    1d12:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1d16:	f023 0301 	biceq.w	r3, r3, #1
    1d1a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1d1e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1d20:	4b35      	ldr	r3, [pc, #212]	; (1df8 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1d22:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1d24:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1d26:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1d28:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1d2a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1d2c:	2280      	movs	r2, #128	; 0x80
    1d2e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1d30:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1d34:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1d38:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1d40:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1d44:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d1fb      	bne.n	1d44 <usb_isr+0x4e8>
    1d4c:	e5db      	b.n	1906 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    1d4e:	2000      	movs	r0, #0
    1d50:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1d52:	4926      	ldr	r1, [pc, #152]	; (1dec <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1d54:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1d56:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1d58:	f242 0121 	movw	r1, #8225	; 0x2021
    1d5c:	428c      	cmp	r4, r1
    1d5e:	f47f ae25 	bne.w	19ac <usb_isr+0x150>
    1d62:	b280      	uxth	r0, r0
    1d64:	2800      	cmp	r0, #0
    1d66:	f47f ae21 	bne.w	19ac <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1d6a:	492e      	ldr	r1, [pc, #184]	; (1e24 <usb_isr+0x5c8>)
    1d6c:	4c2e      	ldr	r4, [pc, #184]	; (1e28 <usb_isr+0x5cc>)
    1d6e:	c903      	ldmia	r1, {r0, r1}
    1d70:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    1d72:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1d74:	ea4f 4111 	mov.w	r1, r1, lsr #16
    1d78:	6020      	str	r0, [r4, #0]
    1d7a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    1d7c:	f47f ae16 	bne.w	19ac <usb_isr+0x150>
	__disable_irq();
    1d80:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1d82:	482a      	ldr	r0, [pc, #168]	; (1e2c <usb_isr+0x5d0>)
    1d84:	7801      	ldrb	r1, [r0, #0]
    1d86:	f041 0108 	orr.w	r1, r1, #8
    1d8a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1d8c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1d90:	060d      	lsls	r5, r1, #24
    1d92:	d405      	bmi.n	1da0 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1d94:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1d96:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1d98:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1d9c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    1da0:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1da2:	4a23      	ldr	r2, [pc, #140]	; (1e30 <usb_isr+0x5d4>)
    1da4:	2150      	movs	r1, #80	; 0x50
    1da6:	7011      	strb	r1, [r2, #0]
    1da8:	e600      	b.n	19ac <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    1daa:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    1dac:	782a      	ldrb	r2, [r5, #0]
    1dae:	4282      	cmp	r2, r0
    1db0:	bf28      	it	cs
    1db2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    1db4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    1db8:	d144      	bne.n	1e44 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    1dba:	4b1e      	ldr	r3, [pc, #120]	; (1e34 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1dbc:	4d1e      	ldr	r5, [pc, #120]	; (1e38 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    1dbe:	7818      	ldrb	r0, [r3, #0]
    1dc0:	491e      	ldr	r1, [pc, #120]	; (1e3c <usb_isr+0x5e0>)
    1dc2:	4b1f      	ldr	r3, [pc, #124]	; (1e40 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1dc4:	9201      	str	r2, [sp, #4]
    1dc6:	2800      	cmp	r0, #0
    1dc8:	bf18      	it	ne
    1dca:	4619      	movne	r1, r3
    1dcc:	4628      	mov	r0, r5
    1dce:	f7ff faa1 	bl	1314 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1dd2:	2307      	movs	r3, #7
    1dd4:	706b      	strb	r3, [r5, #1]
    1dd6:	9a01      	ldr	r2, [sp, #4]
    1dd8:	e03b      	b.n	1e52 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1dda:	03c9      	lsls	r1, r1, #15
    1ddc:	f53f af61 	bmi.w	1ca2 <usb_isr+0x446>
    1de0:	e761      	b.n	1ca6 <usb_isr+0x44a>
    1de2:	bf00      	nop
    1de4:	200016e0 	.word	0x200016e0
    1de8:	20002a2c 	.word	0x20002a2c
    1dec:	20001880 	.word	0x20001880
    1df0:	00070080 	.word	0x00070080
    1df4:	20003a2c 	.word	0x20003a2c
    1df8:	200016c0 	.word	0x200016c0
    1dfc:	20001acc 	.word	0x20001acc
    1e00:	20001adc 	.word	0x20001adc
    1e04:	20001af9 	.word	0x20001af9
    1e08:	20001afa 	.word	0x20001afa
    1e0c:	00cc0002 	.word	0x00cc0002
    1e10:	000200c8 	.word	0x000200c8
    1e14:	00c80002 	.word	0x00c80002
    1e18:	20000080 	.word	0x20000080
    1e1c:	74d59319 	.word	0x74d59319
    1e20:	20001a7c 	.word	0x20001a7c
    1e24:	20001a2c 	.word	0x20001a2c
    1e28:	20001ad4 	.word	0x20001ad4
    1e2c:	20001af5 	.word	0x20001af5
    1e30:	20001afc 	.word	0x20001afc
    1e34:	20001afb 	.word	0x20001afb
    1e38:	20200000 	.word	0x20200000
    1e3c:	60002190 	.word	0x60002190
    1e40:	6000212c 	.word	0x6000212c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1e44:	4629      	mov	r1, r5
    1e46:	4d10      	ldr	r5, [pc, #64]	; (1e88 <usb_isr+0x62c>)
    1e48:	9201      	str	r2, [sp, #4]
    1e4a:	4628      	mov	r0, r5
    1e4c:	f7ff fa62 	bl	1314 <memcpy>
    1e50:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1e52:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1e56:	4415      	add	r5, r2
	asm("dsb");
    1e58:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1e5c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1e60:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    1e64:	3320      	adds	r3, #32
	} while (location < end_addr);
    1e66:	429d      	cmp	r5, r3
    1e68:	d8fa      	bhi.n	1e60 <usb_isr+0x604>
	asm("dsb");
    1e6a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1e6e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1e72:	4805      	ldr	r0, [pc, #20]	; (1e88 <usb_isr+0x62c>)
    1e74:	4611      	mov	r1, r2
    1e76:	f7ff fc8f 	bl	1798 <endpoint0_transmit.constprop.0>
				return;
    1e7a:	e544      	b.n	1906 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    1e7c:	2003      	movs	r0, #3
    1e7e:	f7ff fcd7 	bl	1830 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    1e82:	f001 fc51 	bl	3728 <___reboot_Teensyduino__veneer>
    1e86:	bf00      	nop
    1e88:	20200000 	.word	0x20200000

00001e8c <usb_config_rx>:
{
    1e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e90:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1e92:	1e83      	subs	r3, r0, #2
    1e94:	2b02      	cmp	r3, #2
    1e96:	d901      	bls.n	1e9c <usb_config_rx+0x10>
}
    1e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1e9c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1eec <usb_config_rx+0x60>
    1ea0:	4615      	mov	r5, r2
    1ea2:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    1ea4:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1ea6:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    1eaa:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1eac:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    1eb0:	2100      	movs	r1, #0
    1eb2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1eb6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    1eb8:	f001 fa4e 	bl	3358 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ebc:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    1ec0:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ec2:	0952      	lsrs	r2, r2, #5
    1ec4:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    1ec8:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    1ecc:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1ed0:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    1ed4:	2f00      	cmp	r7, #0
    1ed6:	d0df      	beq.n	1e98 <usb_config_rx+0xc>
    1ed8:	4a03      	ldr	r2, [pc, #12]	; (1ee8 <usb_config_rx+0x5c>)
    1eda:	40b3      	lsls	r3, r6
    1edc:	6811      	ldr	r1, [r2, #0]
    1ede:	430b      	orrs	r3, r1
    1ee0:	6013      	str	r3, [r2, #0]
}
    1ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ee6:	bf00      	nop
    1ee8:	20001a38 	.word	0x20001a38
    1eec:	20000000 	.word	0x20000000

00001ef0 <usb_config_tx>:
{
    1ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ef4:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1ef6:	1e81      	subs	r1, r0, #2
    1ef8:	2902      	cmp	r1, #2
    1efa:	d901      	bls.n	1f00 <usb_config_tx+0x10>
}
    1efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1f00:	01c7      	lsls	r7, r0, #7
    1f02:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1f50 <usb_config_tx+0x60>
    1f06:	4692      	mov	sl, r2
    1f08:	4604      	mov	r4, r0
    1f0a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    1f0c:	223c      	movs	r2, #60	; 0x3c
    1f0e:	2100      	movs	r1, #0
    1f10:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1f12:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f16:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1f18:	f108 0004 	add.w	r0, r8, #4
    1f1c:	f001 fa1c 	bl	3358 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1f20:	faba f28a 	clz	r2, sl
    1f24:	0952      	lsrs	r2, r2, #5
    1f26:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    1f2a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    1f2e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1f30:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1f34:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1f38:	2e00      	cmp	r6, #0
    1f3a:	d0df      	beq.n	1efc <usb_config_tx+0xc>
    1f3c:	4b03      	ldr	r3, [pc, #12]	; (1f4c <usb_config_tx+0x5c>)
    1f3e:	3410      	adds	r4, #16
    1f40:	6819      	ldr	r1, [r3, #0]
    1f42:	40a2      	lsls	r2, r4
    1f44:	430a      	orrs	r2, r1
    1f46:	601a      	str	r2, [r3, #0]
}
    1f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f4c:	20001a38 	.word	0x20001a38
    1f50:	20000000 	.word	0x20000000

00001f54 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    1f54:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    1f56:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1f58:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    1f5a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    1f5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    1f62:	b410      	push	{r4}
	transfer->next = 1;
    1f64:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    1f66:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    1f68:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    1f6c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    1f6e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    1f72:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    1f76:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    1f78:	6181      	str	r1, [r0, #24]
}
    1f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    1f7e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    1f82:	4770      	bx	lr

00001f84 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1f84:	1e83      	subs	r3, r0, #2
{
    1f86:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1f88:	2b02      	cmp	r3, #2
    1f8a:	d900      	bls.n	1f8e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    1f8c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1f8e:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    1f90:	f100 0110 	add.w	r1, r0, #16
    1f94:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1f98:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    1f9c:	fa0c f101 	lsl.w	r1, ip, r1
    1fa0:	3040      	adds	r0, #64	; 0x40
    1fa2:	f7ff bb99 	b.w	16d8 <schedule_transfer>
    1fa6:	bf00      	nop
    1fa8:	20000000 	.word	0x20000000

00001fac <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1fac:	1e83      	subs	r3, r0, #2
{
    1fae:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1fb0:	2b02      	cmp	r3, #2
    1fb2:	d900      	bls.n	1fb6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    1fb4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    1fb6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    1fb8:	4b02      	ldr	r3, [pc, #8]	; (1fc4 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    1fba:	4081      	lsls	r1, r0
    1fbc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1fc0:	f7ff bb8a 	b.w	16d8 <schedule_transfer>
    1fc4:	20000000 	.word	0x20000000

00001fc8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1fc8:	6840      	ldr	r0, [r0, #4]
#endif
}
    1fca:	4770      	bx	lr

00001fcc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1fcc:	4a12      	ldr	r2, [pc, #72]	; (2018 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1fce:	4b13      	ldr	r3, [pc, #76]	; (201c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1fd0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1fd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    1fd8:	4298      	cmp	r0, r3
{
    1fda:	b510      	push	{r4, lr}
    1fdc:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    1fde:	d202      	bcs.n	1fe6 <usb_init_serialnumber+0x1a>
    1fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1fe4:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    1fe6:	4c0e      	ldr	r4, [pc, #56]	; (2020 <usb_init_serialnumber+0x54>)
    1fe8:	a901      	add	r1, sp, #4
    1fea:	220a      	movs	r2, #10
    1fec:	f7ff fa30 	bl	1450 <ultoa>
	for (i=0; i<10; i++) {
    1ff0:	a901      	add	r1, sp, #4
    1ff2:	2300      	movs	r3, #0
    1ff4:	4620      	mov	r0, r4
		char c = buf[i];
    1ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    1ffa:	3301      	adds	r3, #1
		if (!c) break;
    1ffc:	b13a      	cbz	r2, 200e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    1ffe:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    2000:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    2004:	d1f7      	bne.n	1ff6 <usb_init_serialnumber+0x2a>
    2006:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2008:	7023      	strb	r3, [r4, #0]
}
    200a:	b004      	add	sp, #16
    200c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    200e:	005b      	lsls	r3, r3, #1
    2010:	b2db      	uxtb	r3, r3
    2012:	7023      	strb	r3, [r4, #0]
}
    2014:	b004      	add	sp, #16
    2016:	bd10      	pop	{r4, pc}
    2018:	401f4400 	.word	0x401f4400
    201c:	00989680 	.word	0x00989680
    2020:	20001150 	.word	0x20001150

00002024 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    2024:	f000 badc 	b.w	25e0 <usb_serial_flush_input>

00002028 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2028:	f000 baac 	b.w	2584 <usb_serial_peekchar>

0000202c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    202c:	f000 bb10 	b.w	2650 <usb_serial_getchar>

00002030 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    2030:	f000 baca 	b.w	25c8 <usb_serial_available>

00002034 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2034:	f000 bb66 	b.w	2704 <usb_serial_flush_output>

00002038 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2038:	f000 bb3c 	b.w	26b4 <usb_serial_write_buffer_free>

0000203c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    203c:	4608      	mov	r0, r1
    203e:	4611      	mov	r1, r2
    2040:	f000 bb2c 	b.w	269c <usb_serial_write>

00002044 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2046:	4c14      	ldr	r4, [pc, #80]	; (2098 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2048:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    204c:	4e13      	ldr	r6, [pc, #76]	; (209c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    204e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2052:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2056:	4f12      	ldr	r7, [pc, #72]	; (20a0 <rx_queue_transfer+0x5c>)
    2058:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    205c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    205e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2062:	4621      	mov	r1, r4
    2064:	883a      	ldrh	r2, [r7, #0]
    2066:	4630      	mov	r0, r6
    2068:	f7ff ff74 	bl	1f54 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    206c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    206e:	4423      	add	r3, r4
	asm("dsb");
    2070:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    2074:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    2078:	3420      	adds	r4, #32
	} while (location < end_addr);
    207a:	42a3      	cmp	r3, r4
    207c:	d8fa      	bhi.n	2074 <rx_queue_transfer+0x30>
	asm("dsb");
    207e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2082:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2086:	2003      	movs	r0, #3
    2088:	4631      	mov	r1, r6
    208a:	f7ff ff8f 	bl	1fac <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    208e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2092:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    2096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2098:	20200080 	.word	0x20200080
    209c:	20001700 	.word	0x20001700
    20a0:	20001ae8 	.word	0x20001ae8

000020a4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    20a4:	4b24      	ldr	r3, [pc, #144]	; (2138 <rx_event+0x94>)
{
    20a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    20aa:	881c      	ldrh	r4, [r3, #0]
    20ac:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    20ae:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    20b0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    20b4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    20b6:	2c00      	cmp	r4, #0
    20b8:	dd24      	ble.n	2104 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    20ba:	4920      	ldr	r1, [pc, #128]	; (213c <rx_event+0x98>)
		if (head != rx_tail) {
    20bc:	4820      	ldr	r0, [pc, #128]	; (2140 <rx_event+0x9c>)
		uint32_t head = rx_head;
    20be:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    20c0:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    20c2:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    20c4:	4e1f      	ldr	r6, [pc, #124]	; (2144 <rx_event+0xa0>)
		if (head != rx_tail) {
    20c6:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    20c8:	481f      	ldr	r0, [pc, #124]	; (2148 <rx_event+0xa4>)
		if (head != rx_tail) {
    20ca:	d007      	beq.n	20dc <rx_event+0x38>
			uint32_t ii = rx_list[head];
    20cc:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    20d0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    20d4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    20d8:	4294      	cmp	r4, r2
    20da:	d918      	bls.n	210e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    20dc:	3301      	adds	r3, #1
		rx_index[i] = 0;
    20de:	2200      	movs	r2, #0
		rx_count[i] = len;
    20e0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    20e4:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    20e6:	4e19      	ldr	r6, [pc, #100]	; (214c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    20e8:	bf88      	it	hi
    20ea:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    20ec:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    20f0:	bf98      	it	ls
    20f2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    20f4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    20f6:	4b16      	ldr	r3, [pc, #88]	; (2150 <rx_event+0xac>)
		rx_head = head;
    20f8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    20fa:	681a      	ldr	r2, [r3, #0]
    20fc:	4414      	add	r4, r2
    20fe:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    2104:	4628      	mov	r0, r5
}
    2106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    210a:	f7ff bf9b 	b.w	2044 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    210e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    2112:	4910      	ldr	r1, [pc, #64]	; (2154 <rx_event+0xb0>)
    2114:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    2116:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2118:	4408      	add	r0, r1
    211a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    211e:	f7ff f8f9 	bl	1314 <memcpy>
				rx_available += len;
    2122:	4a0b      	ldr	r2, [pc, #44]	; (2150 <rx_event+0xac>)
				rx_queue_transfer(i);
    2124:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    2126:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    212a:	6813      	ldr	r3, [r2, #0]
    212c:	4423      	add	r3, r4
}
    212e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    2132:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    2134:	f7ff bf86 	b.w	2044 <rx_queue_transfer>
    2138:	20001ae8 	.word	0x20001ae8
    213c:	20001af3 	.word	0x20001af3
    2140:	20001af4 	.word	0x20001af4
    2144:	20001a88 	.word	0x20001a88
    2148:	20001aa8 	.word	0x20001aa8
    214c:	20001a98 	.word	0x20001a98
    2150:	20001a84 	.word	0x20001a84
    2154:	20200080 	.word	0x20200080

00002158 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    2158:	4b1d      	ldr	r3, [pc, #116]	; (21d0 <usb_serial_flush_callback+0x78>)
    215a:	781a      	ldrb	r2, [r3, #0]
    215c:	2a00      	cmp	r2, #0
    215e:	d136      	bne.n	21ce <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    2160:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2164:	4a1b      	ldr	r2, [pc, #108]	; (21d4 <usb_serial_flush_callback+0x7c>)
    2166:	7812      	ldrb	r2, [r2, #0]
    2168:	b38a      	cbz	r2, 21ce <usb_serial_flush_callback+0x76>
{
    216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    216e:	4d1a      	ldr	r5, [pc, #104]	; (21d8 <usb_serial_flush_callback+0x80>)
    2170:	882a      	ldrh	r2, [r5, #0]
    2172:	b352      	cbz	r2, 21ca <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2174:	4e19      	ldr	r6, [pc, #100]	; (21dc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2176:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    217a:	4f19      	ldr	r7, [pc, #100]	; (21e0 <usb_serial_flush_callback+0x88>)
    217c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    217e:	4c19      	ldr	r4, [pc, #100]	; (21e4 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2180:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2184:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2188:	4642      	mov	r2, r8
    218a:	4638      	mov	r0, r7
    218c:	4621      	mov	r1, r4
    218e:	f7ff fee1 	bl	1f54 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    2192:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    2196:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    219a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    219e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    21a2:	3420      	adds	r4, #32
	} while (location < end_addr);
    21a4:	42a2      	cmp	r2, r4
    21a6:	d8fa      	bhi.n	219e <usb_serial_flush_callback+0x46>
	asm("dsb");
    21a8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    21ac:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    21b0:	2004      	movs	r0, #4
    21b2:	4639      	mov	r1, r7
    21b4:	f7ff fee6 	bl	1f84 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    21b8:	7833      	ldrb	r3, [r6, #0]
    21ba:	3301      	adds	r3, #1
    21bc:	b2db      	uxtb	r3, r3
    21be:	2b03      	cmp	r3, #3
    21c0:	bf88      	it	hi
    21c2:	2300      	movhi	r3, #0
    21c4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    21c6:	2300      	movs	r3, #0
    21c8:	802b      	strh	r3, [r5, #0]
}
    21ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21ce:	4770      	bx	lr
    21d0:	20001af8 	.word	0x20001af8
    21d4:	20001afa 	.word	0x20001afa
    21d8:	20001aea 	.word	0x20001aea
    21dc:	20001af7 	.word	0x20001af7
    21e0:	20001800 	.word	0x20001800
    21e4:	20201080 	.word	0x20201080

000021e8 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    21e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21ec:	b085      	sub	sp, #20
	while (size > 0) {
    21ee:	e9cd 1001 	strd	r1, r0, [sp, #4]
    21f2:	2900      	cmp	r1, #0
    21f4:	f000 80bf 	beq.w	2376 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    21f8:	2300      	movs	r3, #0
    21fa:	4c60      	ldr	r4, [pc, #384]	; (237c <usb_serial_write.part.0+0x194>)
    21fc:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2398 <usb_serial_write.part.0+0x1b0>
    2200:	f8df a198 	ldr.w	sl, [pc, #408]	; 239c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    2204:	4f5e      	ldr	r7, [pc, #376]	; (2380 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    2206:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    2208:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    220a:	4a5e      	ldr	r2, [pc, #376]	; (2384 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    220c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    220e:	4b5e      	ldr	r3, [pc, #376]	; (2388 <usb_serial_write.part.0+0x1a0>)
    2210:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    2212:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    2216:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    221a:	2b00      	cmp	r3, #0
    221c:	f040 80a7 	bne.w	236e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    2220:	461e      	mov	r6, r3
		int waiting=0;
    2222:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    2224:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    2226:	4648      	mov	r0, r9
    2228:	f7ff fece 	bl	1fc8 <usb_transfer_status>
			if (!(status & 0x80)) {
    222c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    2230:	f000 808c 	beq.w	234c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    2234:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    2238:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    223c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    2240:	b905      	cbnz	r5, 2244 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    2242:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    2244:	2b00      	cmp	r3, #0
    2246:	d17d      	bne.n	2344 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2248:	683b      	ldr	r3, [r7, #0]
    224a:	1b9b      	subs	r3, r3, r6
    224c:	2b78      	cmp	r3, #120	; 0x78
    224e:	f200 8087 	bhi.w	2360 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    2252:	4b4e      	ldr	r3, [pc, #312]	; (238c <usb_serial_write.part.0+0x1a4>)
    2254:	781b      	ldrb	r3, [r3, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	d074      	beq.n	2344 <usb_serial_write.part.0+0x15c>
			yield();
    225a:	f000 fa9d 	bl	2798 <yield>
			tx_noautoflush = 1;
    225e:	2201      	movs	r2, #1
		while (!tx_available) {
    2260:	f8b8 3000 	ldrh.w	r3, [r8]
    2264:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    2266:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    2268:	2b00      	cmp	r3, #0
    226a:	d0dc      	beq.n	2226 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    226c:	4a46      	ldr	r2, [pc, #280]	; (2388 <usb_serial_write.part.0+0x1a0>)
    226e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2272:	7811      	ldrb	r1, [r2, #0]
    2274:	461a      	mov	r2, r3
    2276:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    227a:	4d45      	ldr	r5, [pc, #276]	; (2390 <usb_serial_write.part.0+0x1a8>)
    227c:	02c9      	lsls	r1, r1, #11
    227e:	4428      	add	r0, r5
		if (size >= tx_available) {
    2280:	9d01      	ldr	r5, [sp, #4]
    2282:	4295      	cmp	r5, r2
    2284:	d217      	bcs.n	22b6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    2286:	9303      	str	r3, [sp, #12]
    2288:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    228c:	462a      	mov	r2, r5
    228e:	f7ff f841 	bl	1314 <memcpy>
			tx_available -= size;
    2292:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    2294:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    2298:	1b5b      	subs	r3, r3, r5
    229a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    229e:	4b3d      	ldr	r3, [pc, #244]	; (2394 <usb_serial_write.part.0+0x1ac>)
    22a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    22a4:	f3bf 8f4f 	dsb	sy
			sent += size;
    22a8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    22aa:	2300      	movs	r3, #0
			sent += size;
    22ac:	4428      	add	r0, r5
		tx_noautoflush = 0;
    22ae:	7023      	strb	r3, [r4, #0]
}
    22b0:	b005      	add	sp, #20
    22b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    22b6:	4b36      	ldr	r3, [pc, #216]	; (2390 <usb_serial_write.part.0+0x1a8>)
    22b8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    22ba:	9902      	ldr	r1, [sp, #8]
    22bc:	f7ff f82a 	bl	1314 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    22c0:	2300      	movs	r3, #0
    22c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    22c6:	4629      	mov	r1, r5
    22c8:	4648      	mov	r0, r9
    22ca:	f7ff fe43 	bl	1f54 <usb_prepare_transfer>
	asm("dsb");
    22ce:	f3bf 8f4f 	dsb	sy
    22d2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    22d6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    22da:	4293      	cmp	r3, r2
    22dc:	bf34      	ite	cc
    22de:	2301      	movcc	r3, #1
    22e0:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    22e2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    22e6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    22ea:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    22ee:	3520      	adds	r5, #32
	} while (location < end_addr);
    22f0:	42ab      	cmp	r3, r5
    22f2:	d1fa      	bne.n	22ea <usb_serial_write.part.0+0x102>
	asm("dsb");
    22f4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    22f8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    22fc:	2004      	movs	r0, #4
    22fe:	4649      	mov	r1, r9
    2300:	f7ff fe40 	bl	1f84 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    2304:	4a20      	ldr	r2, [pc, #128]	; (2388 <usb_serial_write.part.0+0x1a0>)
    2306:	7813      	ldrb	r3, [r2, #0]
    2308:	3301      	adds	r3, #1
    230a:	b2db      	uxtb	r3, r3
    230c:	2b03      	cmp	r3, #3
    230e:	bf84      	itt	hi
    2310:	2300      	movhi	r3, #0
    2312:	4a1d      	ldrhi	r2, [pc, #116]	; (2388 <usb_serial_write.part.0+0x1a0>)
    2314:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    2316:	f8b8 3000 	ldrh.w	r3, [r8]
    231a:	9a01      	ldr	r2, [sp, #4]
    231c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    231e:	9a00      	ldr	r2, [sp, #0]
    2320:	441a      	add	r2, r3
			size -= tx_available;
    2322:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    2324:	9200      	str	r2, [sp, #0]
			data += tx_available;
    2326:	9a02      	ldr	r2, [sp, #8]
    2328:	441a      	add	r2, r3
			tx_available = 0;
    232a:	2300      	movs	r3, #0
			data += tx_available;
    232c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    232e:	4a19      	ldr	r2, [pc, #100]	; (2394 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    2330:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    2334:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    2338:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    233c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    233e:	2900      	cmp	r1, #0
    2340:	f47f af62 	bne.w	2208 <usb_serial_write.part.0+0x20>
	return sent;
    2344:	9800      	ldr	r0, [sp, #0]
}
    2346:	b005      	add	sp, #20
    2348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    234c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2350:	4b0d      	ldr	r3, [pc, #52]	; (2388 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    2352:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2356:	7819      	ldrb	r1, [r3, #0]
				break;
    2358:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    235a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    235e:	e78a      	b.n	2276 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    2360:	2301      	movs	r3, #1
				return sent;
    2362:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    2364:	f88a 3000 	strb.w	r3, [sl]
}
    2368:	b005      	add	sp, #20
    236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    236e:	461a      	mov	r2, r3
    2370:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    2374:	e77f      	b.n	2276 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    2376:	9801      	ldr	r0, [sp, #4]
	return sent;
    2378:	e7e5      	b.n	2346 <usb_serial_write.part.0+0x15e>
    237a:	bf00      	nop
    237c:	20001af8 	.word	0x20001af8
    2380:	20001acc 	.word	0x20001acc
    2384:	20001800 	.word	0x20001800
    2388:	20001af7 	.word	0x20001af7
    238c:	20001afa 	.word	0x20001afa
    2390:	20201080 	.word	0x20201080
    2394:	402e0000 	.word	0x402e0000
    2398:	20001aea 	.word	0x20001aea
    239c:	20001af6 	.word	0x20001af6

000023a0 <usb_serial_reset>:
}
    23a0:	4770      	bx	lr
    23a2:	bf00      	nop

000023a4 <usb_serial_configure>:
	if (usb_high_speed) {
    23a4:	4b2d      	ldr	r3, [pc, #180]	; (245c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    23a6:	2100      	movs	r1, #0
    23a8:	2280      	movs	r2, #128	; 0x80
    23aa:	482d      	ldr	r0, [pc, #180]	; (2460 <usb_serial_configure+0xbc>)
{
    23ac:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    23ae:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    23b0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    23b2:	4d2c      	ldr	r5, [pc, #176]	; (2464 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    23b4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    23b6:	4e2c      	ldr	r6, [pc, #176]	; (2468 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    23b8:	bf0c      	ite	eq
    23ba:	2340      	moveq	r3, #64	; 0x40
    23bc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    23c0:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    23c2:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    23c4:	f000 ffc8 	bl	3358 <memset>
	tx_head = 0;
    23c8:	4a28      	ldr	r2, [pc, #160]	; (246c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    23ca:	4621      	mov	r1, r4
	tx_available = 0;
    23cc:	4b28      	ldr	r3, [pc, #160]	; (2470 <usb_serial_configure+0xcc>)
	tx_head = 0;
    23ce:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    23d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    23d4:	4827      	ldr	r0, [pc, #156]	; (2474 <usb_serial_configure+0xd0>)
	tx_available = 0;
    23d6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    23d8:	f000 ffbe 	bl	3358 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    23dc:	4a26      	ldr	r2, [pc, #152]	; (2478 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    23de:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    23e0:	4b26      	ldr	r3, [pc, #152]	; (247c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    23e2:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    23e4:	e9c2 4400 	strd	r4, r4, [r2]
    23e8:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    23ec:	4a24      	ldr	r2, [pc, #144]	; (2480 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    23ee:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    23f2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    23f4:	4a23      	ldr	r2, [pc, #140]	; (2484 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    23f6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    23fa:	4b23      	ldr	r3, [pc, #140]	; (2488 <usb_serial_configure+0xe4>)
    23fc:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    23fe:	4623      	mov	r3, r4
	rx_available = 0;
    2400:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2402:	4622      	mov	r2, r4
    2404:	f7ff fd74 	bl	1ef0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    2408:	4622      	mov	r2, r4
    240a:	8831      	ldrh	r1, [r6, #0]
    240c:	2003      	movs	r0, #3
    240e:	4b1f      	ldr	r3, [pc, #124]	; (248c <usb_serial_configure+0xe8>)
    2410:	f7ff fd3c 	bl	1e8c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    2414:	4623      	mov	r3, r4
    2416:	2201      	movs	r2, #1
    2418:	8829      	ldrh	r1, [r5, #0]
    241a:	2004      	movs	r0, #4
    241c:	f7ff fd68 	bl	1ef0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2420:	4620      	mov	r0, r4
    2422:	3401      	adds	r4, #1
    2424:	f7ff fe0e 	bl	2044 <rx_queue_transfer>
    2428:	2c08      	cmp	r4, #8
    242a:	d1f9      	bne.n	2420 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    242c:	4b18      	ldr	r3, [pc, #96]	; (2490 <usb_serial_configure+0xec>)
    242e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    2430:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    2432:	4818      	ldr	r0, [pc, #96]	; (2494 <usb_serial_configure+0xf0>)
    2434:	4c18      	ldr	r4, [pc, #96]	; (2498 <usb_serial_configure+0xf4>)
    2436:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2438:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    243c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2440:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    2444:	4915      	ldr	r1, [pc, #84]	; (249c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2446:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    244a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    244e:	b121      	cbz	r1, 245a <usb_serial_configure+0xb6>
    2450:	4a13      	ldr	r2, [pc, #76]	; (24a0 <usb_serial_configure+0xfc>)
    2452:	7813      	ldrb	r3, [r2, #0]
    2454:	f043 0301 	orr.w	r3, r3, #1
    2458:	7013      	strb	r3, [r2, #0]
}
    245a:	bd70      	pop	{r4, r5, r6, pc}
    245c:	20001afb 	.word	0x20001afb
    2460:	20001800 	.word	0x20001800
    2464:	20001aec 	.word	0x20001aec
    2468:	20001ae8 	.word	0x20001ae8
    246c:	20001af7 	.word	0x20001af7
    2470:	20001aea 	.word	0x20001aea
    2474:	20001700 	.word	0x20001700
    2478:	20001a88 	.word	0x20001a88
    247c:	20001a98 	.word	0x20001a98
    2480:	20001af3 	.word	0x20001af3
    2484:	20001a84 	.word	0x20001a84
    2488:	20001af4 	.word	0x20001af4
    248c:	000020a5 	.word	0x000020a5
    2490:	402e0000 	.word	0x402e0000
    2494:	20001ae0 	.word	0x20001ae0
    2498:	00002159 	.word	0x00002159
    249c:	00000000 	.word	0x00000000
    24a0:	20001afd 	.word	0x20001afd

000024a4 <usb_serial_read>:
{
    24a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    24a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    24ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    24b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 257c <usb_serial_read+0xd8>
{
    24b4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    24b6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    24ba:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    24bc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    24c0:	2900      	cmp	r1, #0
    24c2:	d04f      	beq.n	2564 <usb_serial_read+0xc0>
    24c4:	4680      	mov	r8, r0
    24c6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    24c8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    24ca:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2580 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    24ce:	4b26      	ldr	r3, [pc, #152]	; (2568 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    24d0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    24d4:	4925      	ldr	r1, [pc, #148]	; (256c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    24d6:	781b      	ldrb	r3, [r3, #0]
    24d8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    24da:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    24de:	d03f      	beq.n	2560 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    24e0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    24e2:	4b23      	ldr	r3, [pc, #140]	; (2570 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    24e4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    24e6:	bf28      	it	cs
    24e8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    24ea:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    24ec:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    24f0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    24f4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    24f6:	4b1f      	ldr	r3, [pc, #124]	; (2574 <usb_serial_read+0xd0>)
    24f8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    24fc:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    2500:	42aa      	cmp	r2, r5
    2502:	d21c      	bcs.n	253e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2504:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    2508:	4918      	ldr	r1, [pc, #96]	; (256c <usb_serial_read+0xc8>)
			rx_available -= len;
    250a:	4c1b      	ldr	r4, [pc, #108]	; (2578 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    250c:	4461      	add	r1, ip
    250e:	9201      	str	r2, [sp, #4]
    2510:	f7fe ff00 	bl	1314 <memcpy>
			rx_available -= len;
    2514:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    2516:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    251a:	4658      	mov	r0, fp
			rx_index[i] += len;
    251c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    251e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    2522:	442a      	add	r2, r5
			rx_available -= len;
    2524:	4439      	add	r1, r7
			rx_index[i] += len;
    2526:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    252a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    252c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2530:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2534:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    2538:	b003      	add	sp, #12
    253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    253e:	462a      	mov	r2, r5
			count += avail;
    2540:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2542:	f7fe fee7 	bl	1314 <memcpy>
			rx_available -= avail;
    2546:	490c      	ldr	r1, [pc, #48]	; (2578 <usb_serial_read+0xd4>)
			rx_tail = tail;
    2548:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    254a:	4630      	mov	r0, r6
			rx_available -= avail;
    254c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    254e:	44a8      	add	r8, r5
			rx_available -= avail;
    2550:	1b52      	subs	r2, r2, r5
    2552:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    2554:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    2558:	f7ff fd74 	bl	2044 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    255c:	45bb      	cmp	fp, r7
    255e:	d8b6      	bhi.n	24ce <usb_serial_read+0x2a>
	return count;
    2560:	4638      	mov	r0, r7
    2562:	e7e3      	b.n	252c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    2564:	4608      	mov	r0, r1
    2566:	e7e1      	b.n	252c <usb_serial_read+0x88>
    2568:	20001af3 	.word	0x20001af3
    256c:	20200080 	.word	0x20200080
    2570:	20001aa8 	.word	0x20001aa8
    2574:	20001a88 	.word	0x20001a88
    2578:	20001a84 	.word	0x20001a84
    257c:	20001af4 	.word	0x20001af4
    2580:	20001a98 	.word	0x20001a98

00002584 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    2584:	4b0b      	ldr	r3, [pc, #44]	; (25b4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    2586:	4a0c      	ldr	r2, [pc, #48]	; (25b8 <usb_serial_peekchar+0x34>)
    2588:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    258a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    258c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    258e:	428a      	cmp	r2, r1
    2590:	d00d      	beq.n	25ae <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2592:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    2594:	4809      	ldr	r0, [pc, #36]	; (25bc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2596:	4a0a      	ldr	r2, [pc, #40]	; (25c0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    2598:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    259a:	490a      	ldr	r1, [pc, #40]	; (25c4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    259c:	bf28      	it	cs
    259e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    25a0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    25a2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    25a6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    25aa:	5c58      	ldrb	r0, [r3, r1]
    25ac:	4770      	bx	lr
	if (tail == rx_head) return -1;
    25ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    25b2:	4770      	bx	lr
    25b4:	20001af3 	.word	0x20001af3
    25b8:	20001af4 	.word	0x20001af4
    25bc:	20001aa8 	.word	0x20001aa8
    25c0:	20200080 	.word	0x20200080
    25c4:	20001a98 	.word	0x20001a98

000025c8 <usb_serial_available>:
	uint32_t n = rx_available;
    25c8:	4b04      	ldr	r3, [pc, #16]	; (25dc <usb_serial_available+0x14>)
{
    25ca:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    25cc:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    25ce:	b10c      	cbz	r4, 25d4 <usb_serial_available+0xc>
}
    25d0:	4620      	mov	r0, r4
    25d2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    25d4:	f000 f8e0 	bl	2798 <yield>
}
    25d8:	4620      	mov	r0, r4
    25da:	bd10      	pop	{r4, pc}
    25dc:	20001a84 	.word	0x20001a84

000025e0 <usb_serial_flush_input>:
{
    25e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    25e4:	4e14      	ldr	r6, [pc, #80]	; (2638 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    25e6:	4d15      	ldr	r5, [pc, #84]	; (263c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    25e8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    25ea:	782a      	ldrb	r2, [r5, #0]
    25ec:	4293      	cmp	r3, r2
    25ee:	d021      	beq.n	2634 <usb_serial_flush_input+0x54>
    25f0:	b2dc      	uxtb	r4, r3
    25f2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2644 <usb_serial_flush_input+0x64>
    25f6:	f8df b050 	ldr.w	fp, [pc, #80]	; 2648 <usb_serial_flush_input+0x68>
    25fa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 264c <usb_serial_flush_input+0x6c>
    25fe:	4f10      	ldr	r7, [pc, #64]	; (2640 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    2600:	3401      	adds	r4, #1
    2602:	2c08      	cmp	r4, #8
		rx_tail = tail;
    2604:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    2608:	d901      	bls.n	260e <usb_serial_flush_input+0x2e>
    260a:	2400      	movs	r4, #0
    260c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    260e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2612:	f8db 3000 	ldr.w	r3, [fp]
    2616:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    261a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    261e:	1a52      	subs	r2, r2, r1
    2620:	1a9b      	subs	r3, r3, r2
    2622:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    2626:	f7ff fd0d 	bl	2044 <rx_queue_transfer>
		rx_tail = tail;
    262a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    262e:	782b      	ldrb	r3, [r5, #0]
    2630:	42a3      	cmp	r3, r4
    2632:	d1e5      	bne.n	2600 <usb_serial_flush_input+0x20>
}
    2634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2638:	20001af4 	.word	0x20001af4
    263c:	20001af3 	.word	0x20001af3
    2640:	20001a98 	.word	0x20001a98
    2644:	20001aa8 	.word	0x20001aa8
    2648:	20001a84 	.word	0x20001a84
    264c:	20001a88 	.word	0x20001a88

00002650 <usb_serial_getchar>:
{
    2650:	b500      	push	{lr}
    2652:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    2654:	2101      	movs	r1, #1
    2656:	f10d 0007 	add.w	r0, sp, #7
    265a:	f7ff ff23 	bl	24a4 <usb_serial_read>
    265e:	b120      	cbz	r0, 266a <usb_serial_getchar+0x1a>
    2660:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    2664:	b003      	add	sp, #12
    2666:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    266a:	f04f 30ff 	mov.w	r0, #4294967295
    266e:	e7f9      	b.n	2664 <usb_serial_getchar+0x14>

00002670 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    2670:	4b09      	ldr	r3, [pc, #36]	; (2698 <usb_serial_putchar+0x28>)
{
    2672:	b500      	push	{lr}
    2674:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    2676:	781b      	ldrb	r3, [r3, #0]
{
    2678:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    267c:	b13b      	cbz	r3, 268e <usb_serial_putchar+0x1e>
    267e:	2101      	movs	r1, #1
    2680:	f10d 0007 	add.w	r0, sp, #7
    2684:	f7ff fdb0 	bl	21e8 <usb_serial_write.part.0>
}
    2688:	b003      	add	sp, #12
    268a:	f85d fb04 	ldr.w	pc, [sp], #4
    268e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    2692:	b003      	add	sp, #12
    2694:	f85d fb04 	ldr.w	pc, [sp], #4
    2698:	20001afa 	.word	0x20001afa

0000269c <usb_serial_write>:
	if (!usb_configuration) return 0;
    269c:	4b04      	ldr	r3, [pc, #16]	; (26b0 <usb_serial_write+0x14>)
    269e:	781b      	ldrb	r3, [r3, #0]
    26a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    26a4:	b10b      	cbz	r3, 26aa <usb_serial_write+0xe>
    26a6:	f7ff bd9f 	b.w	21e8 <usb_serial_write.part.0>
}
    26aa:	4610      	mov	r0, r2
    26ac:	4770      	bx	lr
    26ae:	bf00      	nop
    26b0:	20001afa 	.word	0x20001afa

000026b4 <usb_serial_write_buffer_free>:
{
    26b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    26b8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    26ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2700 <usb_serial_write_buffer_free+0x4c>
    26be:	2301      	movs	r3, #1
    26c0:	4d0d      	ldr	r5, [pc, #52]	; (26f8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    26c2:	4627      	mov	r7, r4
    26c4:	4e0d      	ldr	r6, [pc, #52]	; (26fc <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    26c6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    26ca:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    26cc:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    26ce:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    26d0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    26d2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    26d6:	d005      	beq.n	26e4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    26d8:	f7ff fc76 	bl	1fc8 <usb_transfer_status>
    26dc:	0603      	lsls	r3, r0, #24
    26de:	bf58      	it	pl
    26e0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    26e4:	2c04      	cmp	r4, #4
    26e6:	d1f0      	bne.n	26ca <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    26e8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    26ec:	2300      	movs	r3, #0
}
    26ee:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    26f0:	f888 3000 	strb.w	r3, [r8]
}
    26f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26f8:	20001800 	.word	0x20001800
    26fc:	20001af7 	.word	0x20001af7
    2700:	20001af8 	.word	0x20001af8

00002704 <usb_serial_flush_output>:
{
    2704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    2708:	4b1d      	ldr	r3, [pc, #116]	; (2780 <usb_serial_flush_output+0x7c>)
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	b113      	cbz	r3, 2714 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    270e:	4d1d      	ldr	r5, [pc, #116]	; (2784 <usb_serial_flush_output+0x80>)
    2710:	882a      	ldrh	r2, [r5, #0]
    2712:	b90a      	cbnz	r2, 2718 <usb_serial_flush_output+0x14>
}
    2714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    2718:	4e1b      	ldr	r6, [pc, #108]	; (2788 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    271a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    271e:	491b      	ldr	r1, [pc, #108]	; (278c <usb_serial_flush_output+0x88>)
    2720:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2722:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2724:	4c1a      	ldr	r4, [pc, #104]	; (2790 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    2726:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    272a:	4f1a      	ldr	r7, [pc, #104]	; (2794 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    272c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    2730:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2732:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    2734:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2736:	4621      	mov	r1, r4
    2738:	2300      	movs	r3, #0
    273a:	f7ff fc0b 	bl	1f54 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    273e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    2742:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    2746:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    274a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    274e:	3420      	adds	r4, #32
	} while (location < end_addr);
    2750:	42a2      	cmp	r2, r4
    2752:	d8fa      	bhi.n	274a <usb_serial_flush_output+0x46>
	asm("dsb");
    2754:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2758:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    275c:	2004      	movs	r0, #4
    275e:	4641      	mov	r1, r8
    2760:	f7ff fc10 	bl	1f84 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2764:	7833      	ldrb	r3, [r6, #0]
    2766:	3301      	adds	r3, #1
    2768:	b2db      	uxtb	r3, r3
    276a:	2b03      	cmp	r3, #3
    276c:	bf88      	it	hi
    276e:	2300      	movhi	r3, #0
    2770:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    2772:	2300      	movs	r3, #0
    2774:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    2776:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    277a:	703b      	strb	r3, [r7, #0]
}
    277c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2780:	20001afa 	.word	0x20001afa
    2784:	20001aea 	.word	0x20001aea
    2788:	20001af7 	.word	0x20001af7
    278c:	20001800 	.word	0x20001800
    2790:	20201080 	.word	0x20201080
    2794:	20001af8 	.word	0x20001af8

00002798 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    2798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    279c:	4b2d      	ldr	r3, [pc, #180]	; (2854 <yield+0xbc>)
    279e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    27a0:	b166      	cbz	r6, 27bc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    27a2:	4f2d      	ldr	r7, [pc, #180]	; (2858 <yield+0xc0>)
    27a4:	783b      	ldrb	r3, [r7, #0]
    27a6:	b94b      	cbnz	r3, 27bc <yield+0x24>
	running = 1;
    27a8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    27aa:	07f1      	lsls	r1, r6, #31
	running = 1;
    27ac:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    27ae:	d443      	bmi.n	2838 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    27b0:	07b2      	lsls	r2, r6, #30
    27b2:	d426      	bmi.n	2802 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    27b4:	2300      	movs	r3, #0
    27b6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    27b8:	0773      	lsls	r3, r6, #29
    27ba:	d401      	bmi.n	27c0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    27bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    27c0:	4b26      	ldr	r3, [pc, #152]	; (285c <yield+0xc4>)
    27c2:	681a      	ldr	r2, [r3, #0]
    27c4:	2a00      	cmp	r2, #0
    27c6:	d0f9      	beq.n	27bc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    27c8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    27cc:	2a00      	cmp	r2, #0
    27ce:	d1f5      	bne.n	27bc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    27d0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    27d4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    27d6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    27d8:	2800      	cmp	r0, #0
    27da:	d034      	beq.n	2846 <yield+0xae>
		if (runningFromYield) {
    27dc:	4c20      	ldr	r4, [pc, #128]	; (2860 <yield+0xc8>)
    27de:	7821      	ldrb	r1, [r4, #0]
    27e0:	2900      	cmp	r1, #0
    27e2:	d130      	bne.n	2846 <yield+0xae>
		runningFromYield = true;
    27e4:	2201      	movs	r2, #1
    27e6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    27e8:	6942      	ldr	r2, [r0, #20]
    27ea:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    27ec:	2a00      	cmp	r2, #0
    27ee:	d02e      	beq.n	284e <yield+0xb6>
			firstYield->_prev = nullptr;
    27f0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    27f2:	b905      	cbnz	r5, 27f6 <yield+0x5e>
    27f4:	b662      	cpsie	i
		first->_triggered = false;
    27f6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    27f8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    27fa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    27fc:	4798      	blx	r3
		runningFromYield = false;
    27fe:	7025      	strb	r5, [r4, #0]
    2800:	e7dc      	b.n	27bc <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2802:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2868 <yield+0xd0>
    2806:	f898 3000 	ldrb.w	r3, [r8]
    280a:	2b00      	cmp	r3, #0
    280c:	d0d2      	beq.n	27b4 <yield+0x1c>
    280e:	2500      	movs	r5, #0
    2810:	f8df 9058 	ldr.w	r9, [pc, #88]	; 286c <yield+0xd4>
    2814:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    2816:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    281a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    281c:	6823      	ldr	r3, [r4, #0]
    281e:	4620      	mov	r0, r4
    2820:	691b      	ldr	r3, [r3, #16]
    2822:	4798      	blx	r3
    2824:	b110      	cbz	r0, 282c <yield+0x94>
    2826:	6963      	ldr	r3, [r4, #20]
    2828:	689b      	ldr	r3, [r3, #8]
    282a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    282c:	f898 2000 	ldrb.w	r2, [r8]
    2830:	b2eb      	uxtb	r3, r5
    2832:	429a      	cmp	r2, r3
    2834:	d8ef      	bhi.n	2816 <yield+0x7e>
    2836:	e7bd      	b.n	27b4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    2838:	f7ff fec6 	bl	25c8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    283c:	2800      	cmp	r0, #0
    283e:	d0b7      	beq.n	27b0 <yield+0x18>
    2840:	f3af 8000 	nop.w
    2844:	e7b4      	b.n	27b0 <yield+0x18>
		if (doit) __enable_irq();
    2846:	2d00      	cmp	r5, #0
    2848:	d1b8      	bne.n	27bc <yield+0x24>
    284a:	b662      	cpsie	i
    284c:	e7b6      	b.n	27bc <yield+0x24>
			lastYield = nullptr;
    284e:	4b05      	ldr	r3, [pc, #20]	; (2864 <yield+0xcc>)
    2850:	601a      	str	r2, [r3, #0]
    2852:	e7ce      	b.n	27f2 <yield+0x5a>
    2854:	20001afd 	.word	0x20001afd
    2858:	20001af0 	.word	0x20001af0
    285c:	20001888 	.word	0x20001888
    2860:	20001aee 	.word	0x20001aee
    2864:	20001894 	.word	0x20001894
    2868:	20001aef 	.word	0x20001aef
    286c:	20001898 	.word	0x20001898

00002870 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2870:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    2872:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2874:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    2878:	4619      	mov	r1, r3
{
    287a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    287c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2880:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2884:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2888:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    288c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    2890:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    2892:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2896:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    289a:	b29b      	uxth	r3, r3
    289c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    28a0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    28a4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    28a8:	3101      	adds	r1, #1
    28aa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    28ae:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    28b0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    28b2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    28b6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    28b8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    28ba:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    28bc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    28be:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    28c2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    28c4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    28c6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    28c8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    28ca:	d1eb      	bne.n	28a4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    28cc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    28d0:	b29b      	uxth	r3, r3
    28d2:	f043 030f 	orr.w	r3, r3, #15
    28d6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    28da:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    28de:	b29b      	uxth	r3, r3
    28e0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    28e4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    28e8:	bd10      	pop	{r4, pc}
    28ea:	bf00      	nop

000028ec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    28ec:	4b37      	ldr	r3, [pc, #220]	; (29cc <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    28ee:	4a38      	ldr	r2, [pc, #224]	; (29d0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    28f0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    28f2:	4838      	ldr	r0, [pc, #224]	; (29d4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    28f4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    28f8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    28fa:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    28fc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2900:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2904:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2908:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    290c:	430a      	orrs	r2, r1
    290e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    2912:	f7ff ffad 	bl	2870 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    2916:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    291a:	f7ff ffa9 	bl	2870 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    291e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2922:	f7ff ffa5 	bl	2870 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    2926:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    292a:	f7ff ffa1 	bl	2870 <flexpwm_init>
	for (i=0; i < 4; i++) {
    292e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2930:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2934:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    2938:	4611      	mov	r1, r2
    293a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    293e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2942:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2944:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2946:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2948:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    294a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    294e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2950:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2952:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2956:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2958:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    295a:	d1ee      	bne.n	293a <pwm_init+0x4e>
    295c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    295e:	481e      	ldr	r0, [pc, #120]	; (29d8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2960:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2964:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    2968:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    296a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    296e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    2972:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    2976:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    297a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    297c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    297e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2980:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2982:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2986:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2988:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    298a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    298e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2990:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    2992:	d1ee      	bne.n	2972 <pwm_init+0x86>
    2994:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2996:	4811      	ldr	r0, [pc, #68]	; (29dc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2998:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    299a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    299e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    29a0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    29a4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    29a8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    29ac:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    29b0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    29b2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    29b4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    29b6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    29b8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    29ba:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    29bc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    29be:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    29c2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    29c4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    29c8:	d1ee      	bne.n	29a8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    29ca:	bd70      	pop	{r4, r5, r6, pc}
    29cc:	400fc000 	.word	0x400fc000
    29d0:	fc030000 	.word	0xfc030000
    29d4:	403dc000 	.word	0x403dc000
    29d8:	401e0000 	.word	0x401e0000
    29dc:	401e4000 	.word	0x401e4000

000029e0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    29e0:	4a07      	ldr	r2, [pc, #28]	; (2a00 <rtc_get+0x20>)
    29e2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    29e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    29e6:	4619      	mov	r1, r3
    29e8:	4684      	mov	ip, r0
    29ea:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    29ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    29ee:	4299      	cmp	r1, r3
    29f0:	d1f9      	bne.n	29e6 <rtc_get+0x6>
    29f2:	4584      	cmp	ip, r0
    29f4:	d1f7      	bne.n	29e6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    29f6:	0bdb      	lsrs	r3, r3, #15
}
    29f8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    29fc:	4770      	bx	lr
    29fe:	bf00      	nop
    2a00:	400d4000 	.word	0x400d4000

00002a04 <sm_align_pool>:
{
    2a04:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    2a06:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    2a0a:	b15b      	cbz	r3, 2a24 <sm_align_pool+0x20>
    2a0c:	b1ba      	cbz	r2, 2a3e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    2a0e:	4b0f      	ldr	r3, [pc, #60]	; (2a4c <sm_align_pool+0x48>)
    2a10:	fba3 1302 	umull	r1, r3, r3, r2
    2a14:	08db      	lsrs	r3, r3, #3
    2a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2a1a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    2a1e:	d10a      	bne.n	2a36 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    2a20:	2001      	movs	r0, #1
}
    2a22:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    2a24:	4b09      	ldr	r3, [pc, #36]	; (2a4c <sm_align_pool+0x48>)
    2a26:	fba3 1302 	umull	r1, r3, r3, r2
    2a2a:	08db      	lsrs	r3, r3, #3
    2a2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    2a30:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    2a34:	d001      	beq.n	2a3a <sm_align_pool+0x36>
    2a36:	1ad2      	subs	r2, r2, r3
    2a38:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    2a3a:	2af0      	cmp	r2, #240	; 0xf0
    2a3c:	d8f0      	bhi.n	2a20 <sm_align_pool+0x1c>
		errno = ENOSPC;
    2a3e:	f000 fcef 	bl	3420 <__errno>
    2a42:	221c      	movs	r2, #28
    2a44:	4603      	mov	r3, r0
    2a46:	2000      	movs	r0, #0
    2a48:	601a      	str	r2, [r3, #0]
}
    2a4a:	bd08      	pop	{r3, pc}
    2a4c:	aaaaaaab 	.word	0xaaaaaaab

00002a50 <sm_set_pool>:
{
    2a50:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    2a52:	4604      	mov	r4, r0
    2a54:	b338      	cbz	r0, 2aa6 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    2a56:	b119      	cbz	r1, 2a60 <sm_set_pool+0x10>
    2a58:	fab2 f682 	clz	r6, r2
    2a5c:	0976      	lsrs	r6, r6, #5
    2a5e:	b9a2      	cbnz	r2, 2a8a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    2a60:	6820      	ldr	r0, [r4, #0]
    2a62:	b300      	cbz	r0, 2aa6 <sm_set_pool+0x56>
    2a64:	6862      	ldr	r2, [r4, #4]
    2a66:	b1f2      	cbz	r2, 2aa6 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    2a68:	4b18      	ldr	r3, [pc, #96]	; (2acc <sm_set_pool+0x7c>)
    2a6a:	4919      	ldr	r1, [pc, #100]	; (2ad0 <sm_set_pool+0x80>)
    2a6c:	fb02 f303 	mul.w	r3, r2, r3
    2a70:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    2a74:	d317      	bcc.n	2aa6 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    2a76:	68a3      	ldr	r3, [r4, #8]
    2a78:	b9e3      	cbnz	r3, 2ab4 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    2a7a:	2200      	movs	r2, #0
			return 1;
    2a7c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    2a7e:	6022      	str	r2, [r4, #0]
    2a80:	6062      	str	r2, [r4, #4]
    2a82:	60a2      	str	r2, [r4, #8]
    2a84:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    2a86:	4618      	mov	r0, r3
    2a88:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    2a8a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    2a8c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    2a8e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    2a92:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    2a94:	f7ff ffb6 	bl	2a04 <sm_align_pool>
    2a98:	4603      	mov	r3, r0
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d0f3      	beq.n	2a86 <sm_set_pool+0x36>
	if (do_zero) {
    2a9e:	b96d      	cbnz	r5, 2abc <sm_set_pool+0x6c>
	return 1;
    2aa0:	2301      	movs	r3, #1
}
    2aa2:	4618      	mov	r0, r3
    2aa4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    2aa6:	f000 fcbb 	bl	3420 <__errno>
    2aaa:	2216      	movs	r2, #22
		return 0;
    2aac:	2300      	movs	r3, #0
		errno = EINVAL;
    2aae:	6002      	str	r2, [r0, #0]
}
    2ab0:	4618      	mov	r0, r3
    2ab2:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    2ab4:	2100      	movs	r1, #0
    2ab6:	f000 fc4f 	bl	3358 <memset>
    2aba:	e7de      	b.n	2a7a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    2abc:	6862      	ldr	r2, [r4, #4]
    2abe:	4631      	mov	r1, r6
    2ac0:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    2ac2:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    2ac4:	f000 fc48 	bl	3358 <memset>
	return 1;
    2ac8:	2301      	movs	r3, #1
    2aca:	e7dc      	b.n	2a86 <sm_set_pool+0x36>
    2acc:	aaaaaaab 	.word	0xaaaaaaab
    2ad0:	15555555 	.word	0x15555555
    2ad4:	00000000 	.word	0x00000000

00002ad8 <fmod>:
    2ad8:	b508      	push	{r3, lr}
    2ada:	ed2d 8b04 	vpush	{d8-d9}
    2ade:	eeb0 9b40 	vmov.f64	d9, d0
    2ae2:	eeb0 8b41 	vmov.f64	d8, d1
    2ae6:	f000 f81f 	bl	2b28 <__ieee754_fmod>
    2aea:	eeb4 9b48 	vcmp.f64	d9, d8
    2aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2af2:	d606      	bvs.n	2b02 <fmod+0x2a>
    2af4:	ed9f 9b0a 	vldr	d9, [pc, #40]	; 2b20 <fmod+0x48>
    2af8:	eeb4 8b49 	vcmp.f64	d8, d9
    2afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b00:	d002      	beq.n	2b08 <fmod+0x30>
    2b02:	ecbd 8b04 	vpop	{d8-d9}
    2b06:	bd08      	pop	{r3, pc}
    2b08:	f000 fc8a 	bl	3420 <__errno>
    2b0c:	ee89 0b09 	vdiv.f64	d0, d9, d9
    2b10:	ecbd 8b04 	vpop	{d8-d9}
    2b14:	2321      	movs	r3, #33	; 0x21
    2b16:	6003      	str	r3, [r0, #0]
    2b18:	bd08      	pop	{r3, pc}
    2b1a:	bf00      	nop
    2b1c:	f3af 8000 	nop.w
	...

00002b28 <__ieee754_fmod>:
    2b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b2c:	b085      	sub	sp, #20
    2b2e:	ed8d 1b00 	vstr	d1, [sp]
    2b32:	e9dd 7c00 	ldrd	r7, ip, [sp]
    2b36:	f02c 4000 	bic.w	r0, ip, #2147483648	; 0x80000000
    2b3a:	ea50 0307 	orrs.w	r3, r0, r7
    2b3e:	ed8d 0b02 	vstr	d0, [sp, #8]
    2b42:	d02f      	beq.n	2ba4 <__ieee754_fmod+0x7c>
    2b44:	9b03      	ldr	r3, [sp, #12]
    2b46:	4a98      	ldr	r2, [pc, #608]	; (2da8 <__ieee754_fmod+0x280>)
    2b48:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
    2b4c:	4596      	cmp	lr, r2
    2b4e:	dc29      	bgt.n	2ba4 <__ieee754_fmod+0x7c>
    2b50:	427a      	negs	r2, r7
    2b52:	4996      	ldr	r1, [pc, #600]	; (2dac <__ieee754_fmod+0x284>)
    2b54:	433a      	orrs	r2, r7
    2b56:	ea40 72d2 	orr.w	r2, r0, r2, lsr #31
    2b5a:	428a      	cmp	r2, r1
    2b5c:	d822      	bhi.n	2ba4 <__ieee754_fmod+0x7c>
    2b5e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2b62:	4586      	cmp	lr, r0
    2b64:	463c      	mov	r4, r7
    2b66:	464a      	mov	r2, r9
    2b68:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    2b6c:	dc06      	bgt.n	2b7c <__ieee754_fmod+0x54>
    2b6e:	f2c0 80c7 	blt.w	2d00 <__ieee754_fmod+0x1d8>
    2b72:	45b9      	cmp	r9, r7
    2b74:	f0c0 80c4 	bcc.w	2d00 <__ieee754_fmod+0x1d8>
    2b78:	f000 80fd 	beq.w	2d76 <__ieee754_fmod+0x24e>
    2b7c:	498b      	ldr	r1, [pc, #556]	; (2dac <__ieee754_fmod+0x284>)
    2b7e:	4019      	ands	r1, r3
    2b80:	b9d9      	cbnz	r1, 2bba <__ieee754_fmod+0x92>
    2b82:	f1be 0f00 	cmp.w	lr, #0
    2b86:	f040 80df 	bne.w	2d48 <__ieee754_fmod+0x220>
    2b8a:	f1b9 0f00 	cmp.w	r9, #0
    2b8e:	464d      	mov	r5, r9
    2b90:	f340 8108 	ble.w	2da4 <__ieee754_fmod+0x27c>
    2b94:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
    2b98:	006d      	lsls	r5, r5, #1
    2b9a:	2d00      	cmp	r5, #0
    2b9c:	f101 31ff 	add.w	r1, r1, #4294967295
    2ba0:	dcfa      	bgt.n	2b98 <__ieee754_fmod+0x70>
    2ba2:	e00e      	b.n	2bc2 <__ieee754_fmod+0x9a>
    2ba4:	ed9d 7b02 	vldr	d7, [sp, #8]
    2ba8:	ed9d 6b00 	vldr	d6, [sp]
    2bac:	ee27 7b06 	vmul.f64	d7, d7, d6
    2bb0:	ee87 0b07 	vdiv.f64	d0, d7, d7
    2bb4:	b005      	add	sp, #20
    2bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2bba:	ea4f 512e 	mov.w	r1, lr, asr #20
    2bbe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    2bc2:	4d7a      	ldr	r5, [pc, #488]	; (2dac <__ieee754_fmod+0x284>)
    2bc4:	ea0c 0505 	and.w	r5, ip, r5
    2bc8:	b985      	cbnz	r5, 2bec <__ieee754_fmod+0xc4>
    2bca:	2800      	cmp	r0, #0
    2bcc:	f040 80ad 	bne.w	2d2a <__ieee754_fmod+0x202>
    2bd0:	2f00      	cmp	r7, #0
    2bd2:	46b8      	mov	r8, r7
    2bd4:	f340 80e4 	ble.w	2da0 <__ieee754_fmod+0x278>
    2bd8:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
    2bdc:	ea4f 0848 	mov.w	r8, r8, lsl #1
    2be0:	f1b8 0f00 	cmp.w	r8, #0
    2be4:	f105 35ff 	add.w	r5, r5, #4294967295
    2be8:	dcf8      	bgt.n	2bdc <__ieee754_fmod+0xb4>
    2bea:	e002      	b.n	2bf2 <__ieee754_fmod+0xca>
    2bec:	1505      	asrs	r5, r0, #20
    2bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    2bf2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2db0 <__ieee754_fmod+0x288>
    2bf6:	4541      	cmp	r1, r8
    2bf8:	db72      	blt.n	2ce0 <__ieee754_fmod+0x1b8>
    2bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2c02:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 2db0 <__ieee754_fmod+0x288>
    2c06:	4575      	cmp	r5, lr
    2c08:	db59      	blt.n	2cbe <__ieee754_fmod+0x196>
    2c0a:	f3cc 0c13 	ubfx	ip, ip, #0, #20
    2c0e:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
    2c12:	1bd0      	subs	r0, r2, r7
    2c14:	1b49      	subs	r1, r1, r5
    2c16:	d10b      	bne.n	2c30 <__ieee754_fmod+0x108>
    2c18:	e01d      	b.n	2c56 <__ieee754_fmod+0x12e>
    2c1a:	ea50 030e 	orrs.w	r3, r0, lr
    2c1e:	d045      	beq.n	2cac <__ieee754_fmod+0x184>
    2c20:	ea4f 73de 	mov.w	r3, lr, lsr #31
    2c24:	3901      	subs	r1, #1
    2c26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    2c2a:	ea4f 024e 	mov.w	r2, lr, lsl #1
    2c2e:	d011      	beq.n	2c54 <__ieee754_fmod+0x12c>
    2c30:	eba3 000c 	sub.w	r0, r3, ip
    2c34:	4294      	cmp	r4, r2
    2c36:	bf88      	it	hi
    2c38:	f100 30ff 	addhi.w	r0, r0, #4294967295
    2c3c:	2800      	cmp	r0, #0
    2c3e:	eba2 0e04 	sub.w	lr, r2, r4
    2c42:	ea4f 77d2 	mov.w	r7, r2, lsr #31
    2c46:	dae8      	bge.n	2c1a <__ieee754_fmod+0xf2>
    2c48:	3901      	subs	r1, #1
    2c4a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    2c4e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    2c52:	d1ed      	bne.n	2c30 <__ieee754_fmod+0x108>
    2c54:	1b10      	subs	r0, r2, r4
    2c56:	eba3 0c0c 	sub.w	ip, r3, ip
    2c5a:	4294      	cmp	r4, r2
    2c5c:	bf88      	it	hi
    2c5e:	f10c 3cff 	addhi.w	ip, ip, #4294967295
    2c62:	f1bc 0f00 	cmp.w	ip, #0
    2c66:	bfa4      	itt	ge
    2c68:	4602      	movge	r2, r0
    2c6a:	4663      	movge	r3, ip
    2c6c:	ea53 0102 	orrs.w	r1, r3, r2
    2c70:	d105      	bne.n	2c7e <__ieee754_fmod+0x156>
    2c72:	e01b      	b.n	2cac <__ieee754_fmod+0x184>
    2c74:	0fd1      	lsrs	r1, r2, #31
    2c76:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    2c7a:	0052      	lsls	r2, r2, #1
    2c7c:	3d01      	subs	r5, #1
    2c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2c82:	dbf7      	blt.n	2c74 <__ieee754_fmod+0x14c>
    2c84:	494a      	ldr	r1, [pc, #296]	; (2db0 <__ieee754_fmod+0x288>)
    2c86:	428d      	cmp	r5, r1
    2c88:	da6a      	bge.n	2d60 <__ieee754_fmod+0x238>
    2c8a:	1b49      	subs	r1, r1, r5
    2c8c:	2914      	cmp	r1, #20
    2c8e:	dc78      	bgt.n	2d82 <__ieee754_fmod+0x25a>
    2c90:	f205 401e 	addw	r0, r5, #1054	; 0x41e
    2c94:	40ca      	lsrs	r2, r1
    2c96:	fa03 f000 	lsl.w	r0, r3, r0
    2c9a:	fa43 f101 	asr.w	r1, r3, r1
    2c9e:	4310      	orrs	r0, r2
    2ca0:	430e      	orrs	r6, r1
    2ca2:	4633      	mov	r3, r6
    2ca4:	4602      	mov	r2, r0
    2ca6:	ec43 2b10 	vmov	d0, r2, r3
    2caa:	e783      	b.n	2bb4 <__ieee754_fmod+0x8c>
    2cac:	4b41      	ldr	r3, [pc, #260]	; (2db4 <__ieee754_fmod+0x28c>)
    2cae:	0ff6      	lsrs	r6, r6, #31
    2cb0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    2cb4:	ed93 0b00 	vldr	d0, [r3]
    2cb8:	b005      	add	sp, #20
    2cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2cbe:	ebae 0405 	sub.w	r4, lr, r5
    2cc2:	2c1f      	cmp	r4, #31
    2cc4:	dd25      	ble.n	2d12 <__ieee754_fmod+0x1ea>
    2cc6:	483c      	ldr	r0, [pc, #240]	; (2db8 <__ieee754_fmod+0x290>)
    2cc8:	1b49      	subs	r1, r1, r5
    2cca:	eba0 0c05 	sub.w	ip, r0, r5
    2cce:	fa07 fc0c 	lsl.w	ip, r7, ip
    2cd2:	bf18      	it	ne
    2cd4:	2400      	movne	r4, #0
    2cd6:	d1ab      	bne.n	2c30 <__ieee754_fmod+0x108>
    2cd8:	eba3 0c0c 	sub.w	ip, r3, ip
    2cdc:	4610      	mov	r0, r2
    2cde:	e7c0      	b.n	2c62 <__ieee754_fmod+0x13a>
    2ce0:	eba8 0801 	sub.w	r8, r8, r1
    2ce4:	f1b8 0f1f 	cmp.w	r8, #31
    2ce8:	dc0d      	bgt.n	2d06 <__ieee754_fmod+0x1de>
    2cea:	f201 431e 	addw	r3, r1, #1054	; 0x41e
    2cee:	fa0e fe08 	lsl.w	lr, lr, r8
    2cf2:	fa29 f303 	lsr.w	r3, r9, r3
    2cf6:	fa09 f208 	lsl.w	r2, r9, r8
    2cfa:	ea43 030e 	orr.w	r3, r3, lr
    2cfe:	e780      	b.n	2c02 <__ieee754_fmod+0xda>
    2d00:	ed9d 0b02 	vldr	d0, [sp, #8]
    2d04:	e756      	b.n	2bb4 <__ieee754_fmod+0x8c>
    2d06:	4b2c      	ldr	r3, [pc, #176]	; (2db8 <__ieee754_fmod+0x290>)
    2d08:	1a5b      	subs	r3, r3, r1
    2d0a:	fa09 f303 	lsl.w	r3, r9, r3
    2d0e:	2200      	movs	r2, #0
    2d10:	e777      	b.n	2c02 <__ieee754_fmod+0xda>
    2d12:	f205 4c1e 	addw	ip, r5, #1054	; 0x41e
    2d16:	fa00 fe04 	lsl.w	lr, r0, r4
    2d1a:	fa27 fc0c 	lsr.w	ip, r7, ip
    2d1e:	fa07 f404 	lsl.w	r4, r7, r4
    2d22:	ea4c 0c0e 	orr.w	ip, ip, lr
    2d26:	1b10      	subs	r0, r2, r4
    2d28:	e774      	b.n	2c14 <__ieee754_fmod+0xec>
    2d2a:	ea4f 28c0 	mov.w	r8, r0, lsl #11
    2d2e:	f1b8 0f00 	cmp.w	r8, #0
    2d32:	4d1f      	ldr	r5, [pc, #124]	; (2db0 <__ieee754_fmod+0x288>)
    2d34:	f77f af5d 	ble.w	2bf2 <__ieee754_fmod+0xca>
    2d38:	ea4f 0848 	mov.w	r8, r8, lsl #1
    2d3c:	f1b8 0f00 	cmp.w	r8, #0
    2d40:	f105 35ff 	add.w	r5, r5, #4294967295
    2d44:	dcf8      	bgt.n	2d38 <__ieee754_fmod+0x210>
    2d46:	e754      	b.n	2bf2 <__ieee754_fmod+0xca>
    2d48:	ea4f 25ce 	mov.w	r5, lr, lsl #11
    2d4c:	2d00      	cmp	r5, #0
    2d4e:	4918      	ldr	r1, [pc, #96]	; (2db0 <__ieee754_fmod+0x288>)
    2d50:	f77f af37 	ble.w	2bc2 <__ieee754_fmod+0x9a>
    2d54:	006d      	lsls	r5, r5, #1
    2d56:	2d00      	cmp	r5, #0
    2d58:	f101 31ff 	add.w	r1, r1, #4294967295
    2d5c:	dcfa      	bgt.n	2d54 <__ieee754_fmod+0x22c>
    2d5e:	e730      	b.n	2bc2 <__ieee754_fmod+0x9a>
    2d60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    2d64:	4333      	orrs	r3, r6
    2d66:	f205 35ff 	addw	r5, r5, #1023	; 0x3ff
    2d6a:	ea43 5105 	orr.w	r1, r3, r5, lsl #20
    2d6e:	4610      	mov	r0, r2
    2d70:	ec41 0b10 	vmov	d0, r0, r1
    2d74:	e71e      	b.n	2bb4 <__ieee754_fmod+0x8c>
    2d76:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <__ieee754_fmod+0x28c>)
    2d78:	eb03 7316 	add.w	r3, r3, r6, lsr #28
    2d7c:	ed93 0b00 	vldr	d0, [r3]
    2d80:	e718      	b.n	2bb4 <__ieee754_fmod+0x8c>
    2d82:	291f      	cmp	r1, #31
    2d84:	dc07      	bgt.n	2d96 <__ieee754_fmod+0x26e>
    2d86:	f205 401e 	addw	r0, r5, #1054	; 0x41e
    2d8a:	fa22 f101 	lsr.w	r1, r2, r1
    2d8e:	fa03 f000 	lsl.w	r0, r3, r0
    2d92:	4308      	orrs	r0, r1
    2d94:	e785      	b.n	2ca2 <__ieee754_fmod+0x17a>
    2d96:	4808      	ldr	r0, [pc, #32]	; (2db8 <__ieee754_fmod+0x290>)
    2d98:	1b40      	subs	r0, r0, r5
    2d9a:	fa43 f000 	asr.w	r0, r3, r0
    2d9e:	e780      	b.n	2ca2 <__ieee754_fmod+0x17a>
    2da0:	4d06      	ldr	r5, [pc, #24]	; (2dbc <__ieee754_fmod+0x294>)
    2da2:	e726      	b.n	2bf2 <__ieee754_fmod+0xca>
    2da4:	4905      	ldr	r1, [pc, #20]	; (2dbc <__ieee754_fmod+0x294>)
    2da6:	e70c      	b.n	2bc2 <__ieee754_fmod+0x9a>
    2da8:	7fefffff 	.word	0x7fefffff
    2dac:	7ff00000 	.word	0x7ff00000
    2db0:	fffffc02 	.word	0xfffffc02
    2db4:	20000280 	.word	0x20000280
    2db8:	fffffbe2 	.word	0xfffffbe2
    2dbc:	fffffbed 	.word	0xfffffbed

00002dc0 <malloc>:
    2dc0:	4b02      	ldr	r3, [pc, #8]	; (2dcc <malloc+0xc>)
    2dc2:	4601      	mov	r1, r0
    2dc4:	6818      	ldr	r0, [r3, #0]
    2dc6:	f000 b80b 	b.w	2de0 <_malloc_r>
    2dca:	bf00      	nop
    2dcc:	20001074 	.word	0x20001074

00002dd0 <free>:
    2dd0:	4b02      	ldr	r3, [pc, #8]	; (2ddc <free+0xc>)
    2dd2:	4601      	mov	r1, r0
    2dd4:	6818      	ldr	r0, [r3, #0]
    2dd6:	f000 bba1 	b.w	351c <_free_r>
    2dda:	bf00      	nop
    2ddc:	20001074 	.word	0x20001074

00002de0 <_malloc_r>:
    2de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2de4:	f101 060b 	add.w	r6, r1, #11
    2de8:	2e16      	cmp	r6, #22
    2dea:	b083      	sub	sp, #12
    2dec:	4604      	mov	r4, r0
    2dee:	d824      	bhi.n	2e3a <_malloc_r+0x5a>
    2df0:	2910      	cmp	r1, #16
    2df2:	f200 80ba 	bhi.w	2f6a <_malloc_r+0x18a>
    2df6:	f000 faa3 	bl	3340 <__malloc_lock>
    2dfa:	2610      	movs	r6, #16
    2dfc:	2218      	movs	r2, #24
    2dfe:	2002      	movs	r0, #2
    2e00:	4fb5      	ldr	r7, [pc, #724]	; (30d8 <_malloc_r+0x2f8>)
    2e02:	443a      	add	r2, r7
    2e04:	f1a2 0108 	sub.w	r1, r2, #8
    2e08:	6853      	ldr	r3, [r2, #4]
    2e0a:	428b      	cmp	r3, r1
    2e0c:	f000 80ba 	beq.w	2f84 <_malloc_r+0x1a4>
    2e10:	685a      	ldr	r2, [r3, #4]
    2e12:	68d9      	ldr	r1, [r3, #12]
    2e14:	f022 0203 	bic.w	r2, r2, #3
    2e18:	441a      	add	r2, r3
    2e1a:	689d      	ldr	r5, [r3, #8]
    2e1c:	60e9      	str	r1, [r5, #12]
    2e1e:	608d      	str	r5, [r1, #8]
    2e20:	6851      	ldr	r1, [r2, #4]
    2e22:	f041 0101 	orr.w	r1, r1, #1
    2e26:	4620      	mov	r0, r4
    2e28:	6051      	str	r1, [r2, #4]
    2e2a:	f103 0508 	add.w	r5, r3, #8
    2e2e:	f000 fa8d 	bl	334c <__malloc_unlock>
    2e32:	4628      	mov	r0, r5
    2e34:	b003      	add	sp, #12
    2e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e3a:	f036 0607 	bics.w	r6, r6, #7
    2e3e:	f100 8094 	bmi.w	2f6a <_malloc_r+0x18a>
    2e42:	42b1      	cmp	r1, r6
    2e44:	f200 8091 	bhi.w	2f6a <_malloc_r+0x18a>
    2e48:	f000 fa7a 	bl	3340 <__malloc_lock>
    2e4c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    2e50:	f0c0 819a 	bcc.w	3188 <_malloc_r+0x3a8>
    2e54:	0a73      	lsrs	r3, r6, #9
    2e56:	f000 808f 	beq.w	2f78 <_malloc_r+0x198>
    2e5a:	2b04      	cmp	r3, #4
    2e5c:	f200 816f 	bhi.w	313e <_malloc_r+0x35e>
    2e60:	09b3      	lsrs	r3, r6, #6
    2e62:	f103 0039 	add.w	r0, r3, #57	; 0x39
    2e66:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    2e6a:	00c3      	lsls	r3, r0, #3
    2e6c:	4f9a      	ldr	r7, [pc, #616]	; (30d8 <_malloc_r+0x2f8>)
    2e6e:	443b      	add	r3, r7
    2e70:	f1a3 0508 	sub.w	r5, r3, #8
    2e74:	685b      	ldr	r3, [r3, #4]
    2e76:	429d      	cmp	r5, r3
    2e78:	d106      	bne.n	2e88 <_malloc_r+0xa8>
    2e7a:	e00c      	b.n	2e96 <_malloc_r+0xb6>
    2e7c:	2900      	cmp	r1, #0
    2e7e:	f280 8127 	bge.w	30d0 <_malloc_r+0x2f0>
    2e82:	68db      	ldr	r3, [r3, #12]
    2e84:	429d      	cmp	r5, r3
    2e86:	d006      	beq.n	2e96 <_malloc_r+0xb6>
    2e88:	685a      	ldr	r2, [r3, #4]
    2e8a:	f022 0203 	bic.w	r2, r2, #3
    2e8e:	1b91      	subs	r1, r2, r6
    2e90:	290f      	cmp	r1, #15
    2e92:	ddf3      	ble.n	2e7c <_malloc_r+0x9c>
    2e94:	4660      	mov	r0, ip
    2e96:	693d      	ldr	r5, [r7, #16]
    2e98:	f8df c250 	ldr.w	ip, [pc, #592]	; 30ec <_malloc_r+0x30c>
    2e9c:	4565      	cmp	r5, ip
    2e9e:	d07c      	beq.n	2f9a <_malloc_r+0x1ba>
    2ea0:	686a      	ldr	r2, [r5, #4]
    2ea2:	f022 0203 	bic.w	r2, r2, #3
    2ea6:	1b93      	subs	r3, r2, r6
    2ea8:	2b0f      	cmp	r3, #15
    2eaa:	f300 817b 	bgt.w	31a4 <_malloc_r+0x3c4>
    2eae:	2b00      	cmp	r3, #0
    2eb0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    2eb4:	f280 816c 	bge.w	3190 <_malloc_r+0x3b0>
    2eb8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2ebc:	f080 811a 	bcs.w	30f4 <_malloc_r+0x314>
    2ec0:	08d3      	lsrs	r3, r2, #3
    2ec2:	6879      	ldr	r1, [r7, #4]
    2ec4:	3301      	adds	r3, #1
    2ec6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    2eca:	2201      	movs	r2, #1
    2ecc:	fa02 f20e 	lsl.w	r2, r2, lr
    2ed0:	430a      	orrs	r2, r1
    2ed2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    2ed6:	f8c5 e008 	str.w	lr, [r5, #8]
    2eda:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    2ede:	3908      	subs	r1, #8
    2ee0:	60e9      	str	r1, [r5, #12]
    2ee2:	607a      	str	r2, [r7, #4]
    2ee4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    2ee8:	f8ce 500c 	str.w	r5, [lr, #12]
    2eec:	1083      	asrs	r3, r0, #2
    2eee:	2101      	movs	r1, #1
    2ef0:	4099      	lsls	r1, r3
    2ef2:	4291      	cmp	r1, r2
    2ef4:	d857      	bhi.n	2fa6 <_malloc_r+0x1c6>
    2ef6:	4211      	tst	r1, r2
    2ef8:	d106      	bne.n	2f08 <_malloc_r+0x128>
    2efa:	f020 0003 	bic.w	r0, r0, #3
    2efe:	0049      	lsls	r1, r1, #1
    2f00:	4211      	tst	r1, r2
    2f02:	f100 0004 	add.w	r0, r0, #4
    2f06:	d0fa      	beq.n	2efe <_malloc_r+0x11e>
    2f08:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2f0c:	464d      	mov	r5, r9
    2f0e:	4686      	mov	lr, r0
    2f10:	f8d5 800c 	ldr.w	r8, [r5, #12]
    2f14:	4545      	cmp	r5, r8
    2f16:	d108      	bne.n	2f2a <_malloc_r+0x14a>
    2f18:	e11d      	b.n	3156 <_malloc_r+0x376>
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	f280 8124 	bge.w	3168 <_malloc_r+0x388>
    2f20:	f8d8 800c 	ldr.w	r8, [r8, #12]
    2f24:	4545      	cmp	r5, r8
    2f26:	f000 8116 	beq.w	3156 <_malloc_r+0x376>
    2f2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2f2e:	f022 0203 	bic.w	r2, r2, #3
    2f32:	1b93      	subs	r3, r2, r6
    2f34:	2b0f      	cmp	r3, #15
    2f36:	ddf0      	ble.n	2f1a <_malloc_r+0x13a>
    2f38:	4620      	mov	r0, r4
    2f3a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    2f3e:	eb08 0106 	add.w	r1, r8, r6
    2f42:	f046 0601 	orr.w	r6, r6, #1
    2f46:	f8c8 6004 	str.w	r6, [r8, #4]
    2f4a:	60ec      	str	r4, [r5, #12]
    2f4c:	60a5      	str	r5, [r4, #8]
    2f4e:	f043 0401 	orr.w	r4, r3, #1
    2f52:	e9c7 1104 	strd	r1, r1, [r7, #16]
    2f56:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    2f5a:	604c      	str	r4, [r1, #4]
    2f5c:	f848 3002 	str.w	r3, [r8, r2]
    2f60:	f000 f9f4 	bl	334c <__malloc_unlock>
    2f64:	f108 0508 	add.w	r5, r8, #8
    2f68:	e002      	b.n	2f70 <_malloc_r+0x190>
    2f6a:	230c      	movs	r3, #12
    2f6c:	6023      	str	r3, [r4, #0]
    2f6e:	2500      	movs	r5, #0
    2f70:	4628      	mov	r0, r5
    2f72:	b003      	add	sp, #12
    2f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f78:	f44f 7300 	mov.w	r3, #512	; 0x200
    2f7c:	2040      	movs	r0, #64	; 0x40
    2f7e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    2f82:	e773      	b.n	2e6c <_malloc_r+0x8c>
    2f84:	68d3      	ldr	r3, [r2, #12]
    2f86:	429a      	cmp	r2, r3
    2f88:	bf08      	it	eq
    2f8a:	3002      	addeq	r0, #2
    2f8c:	f47f af40 	bne.w	2e10 <_malloc_r+0x30>
    2f90:	693d      	ldr	r5, [r7, #16]
    2f92:	f8df c158 	ldr.w	ip, [pc, #344]	; 30ec <_malloc_r+0x30c>
    2f96:	4565      	cmp	r5, ip
    2f98:	d182      	bne.n	2ea0 <_malloc_r+0xc0>
    2f9a:	687a      	ldr	r2, [r7, #4]
    2f9c:	1083      	asrs	r3, r0, #2
    2f9e:	2101      	movs	r1, #1
    2fa0:	4099      	lsls	r1, r3
    2fa2:	4291      	cmp	r1, r2
    2fa4:	d9a7      	bls.n	2ef6 <_malloc_r+0x116>
    2fa6:	68bd      	ldr	r5, [r7, #8]
    2fa8:	686b      	ldr	r3, [r5, #4]
    2faa:	f023 0903 	bic.w	r9, r3, #3
    2fae:	454e      	cmp	r6, r9
    2fb0:	d803      	bhi.n	2fba <_malloc_r+0x1da>
    2fb2:	eba9 0306 	sub.w	r3, r9, r6
    2fb6:	2b0f      	cmp	r3, #15
    2fb8:	dc7a      	bgt.n	30b0 <_malloc_r+0x2d0>
    2fba:	f8df b134 	ldr.w	fp, [pc, #308]	; 30f0 <_malloc_r+0x310>
    2fbe:	4b47      	ldr	r3, [pc, #284]	; (30dc <_malloc_r+0x2fc>)
    2fc0:	f8db 2000 	ldr.w	r2, [fp]
    2fc4:	681b      	ldr	r3, [r3, #0]
    2fc6:	3201      	adds	r2, #1
    2fc8:	4433      	add	r3, r6
    2fca:	eb05 0a09 	add.w	sl, r5, r9
    2fce:	f000 8133 	beq.w	3238 <_malloc_r+0x458>
    2fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2fd6:	330f      	adds	r3, #15
    2fd8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    2fdc:	f028 080f 	bic.w	r8, r8, #15
    2fe0:	4641      	mov	r1, r8
    2fe2:	4620      	mov	r0, r4
    2fe4:	f000 fa0a 	bl	33fc <_sbrk_r>
    2fe8:	1c41      	adds	r1, r0, #1
    2fea:	4602      	mov	r2, r0
    2fec:	f000 80f3 	beq.w	31d6 <_malloc_r+0x3f6>
    2ff0:	4582      	cmp	sl, r0
    2ff2:	f200 80ee 	bhi.w	31d2 <_malloc_r+0x3f2>
    2ff6:	4b3a      	ldr	r3, [pc, #232]	; (30e0 <_malloc_r+0x300>)
    2ff8:	6819      	ldr	r1, [r3, #0]
    2ffa:	4441      	add	r1, r8
    2ffc:	6019      	str	r1, [r3, #0]
    2ffe:	4608      	mov	r0, r1
    3000:	f000 814e 	beq.w	32a0 <_malloc_r+0x4c0>
    3004:	f8db 1000 	ldr.w	r1, [fp]
    3008:	9301      	str	r3, [sp, #4]
    300a:	3101      	adds	r1, #1
    300c:	bf1b      	ittet	ne
    300e:	eba2 010a 	subne.w	r1, r2, sl
    3012:	1809      	addne	r1, r1, r0
    3014:	f8cb 2000 	streq.w	r2, [fp]
    3018:	6019      	strne	r1, [r3, #0]
    301a:	f012 0b07 	ands.w	fp, r2, #7
    301e:	f000 8117 	beq.w	3250 <_malloc_r+0x470>
    3022:	f1cb 0108 	rsb	r1, fp, #8
    3026:	440a      	add	r2, r1
    3028:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    302c:	4490      	add	r8, r2
    302e:	3108      	adds	r1, #8
    3030:	eba1 0108 	sub.w	r1, r1, r8
    3034:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    3038:	4651      	mov	r1, sl
    303a:	4620      	mov	r0, r4
    303c:	9200      	str	r2, [sp, #0]
    303e:	f000 f9dd 	bl	33fc <_sbrk_r>
    3042:	1c42      	adds	r2, r0, #1
    3044:	e9dd 2300 	ldrd	r2, r3, [sp]
    3048:	f000 814f 	beq.w	32ea <_malloc_r+0x50a>
    304c:	1a80      	subs	r0, r0, r2
    304e:	eb00 080a 	add.w	r8, r0, sl
    3052:	6819      	ldr	r1, [r3, #0]
    3054:	60ba      	str	r2, [r7, #8]
    3056:	f048 0001 	orr.w	r0, r8, #1
    305a:	4451      	add	r1, sl
    305c:	42bd      	cmp	r5, r7
    305e:	6050      	str	r0, [r2, #4]
    3060:	6019      	str	r1, [r3, #0]
    3062:	f000 8129 	beq.w	32b8 <_malloc_r+0x4d8>
    3066:	f1b9 0f0f 	cmp.w	r9, #15
    306a:	f240 8127 	bls.w	32bc <_malloc_r+0x4dc>
    306e:	6868      	ldr	r0, [r5, #4]
    3070:	f1a9 0c0c 	sub.w	ip, r9, #12
    3074:	f02c 0c07 	bic.w	ip, ip, #7
    3078:	f000 0001 	and.w	r0, r0, #1
    307c:	ea40 000c 	orr.w	r0, r0, ip
    3080:	6068      	str	r0, [r5, #4]
    3082:	f04f 0e05 	mov.w	lr, #5
    3086:	eb05 000c 	add.w	r0, r5, ip
    308a:	f1bc 0f0f 	cmp.w	ip, #15
    308e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    3092:	f200 8132 	bhi.w	32fa <_malloc_r+0x51a>
    3096:	6850      	ldr	r0, [r2, #4]
    3098:	4615      	mov	r5, r2
    309a:	4b12      	ldr	r3, [pc, #72]	; (30e4 <_malloc_r+0x304>)
    309c:	681a      	ldr	r2, [r3, #0]
    309e:	428a      	cmp	r2, r1
    30a0:	bf38      	it	cc
    30a2:	6019      	strcc	r1, [r3, #0]
    30a4:	4b10      	ldr	r3, [pc, #64]	; (30e8 <_malloc_r+0x308>)
    30a6:	681a      	ldr	r2, [r3, #0]
    30a8:	428a      	cmp	r2, r1
    30aa:	bf38      	it	cc
    30ac:	6019      	strcc	r1, [r3, #0]
    30ae:	e094      	b.n	31da <_malloc_r+0x3fa>
    30b0:	19aa      	adds	r2, r5, r6
    30b2:	f043 0301 	orr.w	r3, r3, #1
    30b6:	f046 0601 	orr.w	r6, r6, #1
    30ba:	606e      	str	r6, [r5, #4]
    30bc:	4620      	mov	r0, r4
    30be:	60ba      	str	r2, [r7, #8]
    30c0:	6053      	str	r3, [r2, #4]
    30c2:	f000 f943 	bl	334c <__malloc_unlock>
    30c6:	3508      	adds	r5, #8
    30c8:	4628      	mov	r0, r5
    30ca:	b003      	add	sp, #12
    30cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30d0:	68d9      	ldr	r1, [r3, #12]
    30d2:	441a      	add	r2, r3
    30d4:	e6a1      	b.n	2e1a <_malloc_r+0x3a>
    30d6:	bf00      	nop
    30d8:	20000c64 	.word	0x20000c64
    30dc:	200018ec 	.word	0x200018ec
    30e0:	200018bc 	.word	0x200018bc
    30e4:	200018e4 	.word	0x200018e4
    30e8:	200018e8 	.word	0x200018e8
    30ec:	20000c6c 	.word	0x20000c6c
    30f0:	2000106c 	.word	0x2000106c
    30f4:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    30f8:	ea4f 2352 	mov.w	r3, r2, lsr #9
    30fc:	d363      	bcc.n	31c6 <_malloc_r+0x3e6>
    30fe:	2b14      	cmp	r3, #20
    3100:	f200 80b7 	bhi.w	3272 <_malloc_r+0x492>
    3104:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    3108:	00c9      	lsls	r1, r1, #3
    310a:	335b      	adds	r3, #91	; 0x5b
    310c:	eb07 0e01 	add.w	lr, r7, r1
    3110:	5879      	ldr	r1, [r7, r1]
    3112:	f1ae 0e08 	sub.w	lr, lr, #8
    3116:	458e      	cmp	lr, r1
    3118:	f000 8091 	beq.w	323e <_malloc_r+0x45e>
    311c:	684b      	ldr	r3, [r1, #4]
    311e:	f023 0303 	bic.w	r3, r3, #3
    3122:	4293      	cmp	r3, r2
    3124:	d902      	bls.n	312c <_malloc_r+0x34c>
    3126:	6889      	ldr	r1, [r1, #8]
    3128:	458e      	cmp	lr, r1
    312a:	d1f7      	bne.n	311c <_malloc_r+0x33c>
    312c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    3130:	687a      	ldr	r2, [r7, #4]
    3132:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    3136:	f8ce 5008 	str.w	r5, [lr, #8]
    313a:	60cd      	str	r5, [r1, #12]
    313c:	e6d6      	b.n	2eec <_malloc_r+0x10c>
    313e:	2b14      	cmp	r3, #20
    3140:	d959      	bls.n	31f6 <_malloc_r+0x416>
    3142:	2b54      	cmp	r3, #84	; 0x54
    3144:	f200 809d 	bhi.w	3282 <_malloc_r+0x4a2>
    3148:	0b33      	lsrs	r3, r6, #12
    314a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    314e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    3152:	00c3      	lsls	r3, r0, #3
    3154:	e68a      	b.n	2e6c <_malloc_r+0x8c>
    3156:	f10e 0e01 	add.w	lr, lr, #1
    315a:	f01e 0f03 	tst.w	lr, #3
    315e:	f105 0508 	add.w	r5, r5, #8
    3162:	f47f aed5 	bne.w	2f10 <_malloc_r+0x130>
    3166:	e051      	b.n	320c <_malloc_r+0x42c>
    3168:	4442      	add	r2, r8
    316a:	4645      	mov	r5, r8
    316c:	6853      	ldr	r3, [r2, #4]
    316e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    3172:	f043 0301 	orr.w	r3, r3, #1
    3176:	6053      	str	r3, [r2, #4]
    3178:	f855 3f08 	ldr.w	r3, [r5, #8]!
    317c:	4620      	mov	r0, r4
    317e:	60d9      	str	r1, [r3, #12]
    3180:	608b      	str	r3, [r1, #8]
    3182:	f000 f8e3 	bl	334c <__malloc_unlock>
    3186:	e6f3      	b.n	2f70 <_malloc_r+0x190>
    3188:	08f0      	lsrs	r0, r6, #3
    318a:	f106 0208 	add.w	r2, r6, #8
    318e:	e637      	b.n	2e00 <_malloc_r+0x20>
    3190:	442a      	add	r2, r5
    3192:	4620      	mov	r0, r4
    3194:	6853      	ldr	r3, [r2, #4]
    3196:	f043 0301 	orr.w	r3, r3, #1
    319a:	6053      	str	r3, [r2, #4]
    319c:	3508      	adds	r5, #8
    319e:	f000 f8d5 	bl	334c <__malloc_unlock>
    31a2:	e6e5      	b.n	2f70 <_malloc_r+0x190>
    31a4:	19a9      	adds	r1, r5, r6
    31a6:	4620      	mov	r0, r4
    31a8:	f046 0601 	orr.w	r6, r6, #1
    31ac:	f043 0401 	orr.w	r4, r3, #1
    31b0:	606e      	str	r6, [r5, #4]
    31b2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    31b6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    31ba:	604c      	str	r4, [r1, #4]
    31bc:	50ab      	str	r3, [r5, r2]
    31be:	f000 f8c5 	bl	334c <__malloc_unlock>
    31c2:	3508      	adds	r5, #8
    31c4:	e6d4      	b.n	2f70 <_malloc_r+0x190>
    31c6:	0993      	lsrs	r3, r2, #6
    31c8:	f103 0139 	add.w	r1, r3, #57	; 0x39
    31cc:	00c9      	lsls	r1, r1, #3
    31ce:	3338      	adds	r3, #56	; 0x38
    31d0:	e79c      	b.n	310c <_malloc_r+0x32c>
    31d2:	42bd      	cmp	r5, r7
    31d4:	d05f      	beq.n	3296 <_malloc_r+0x4b6>
    31d6:	68bd      	ldr	r5, [r7, #8]
    31d8:	6868      	ldr	r0, [r5, #4]
    31da:	f020 0803 	bic.w	r8, r0, #3
    31de:	4546      	cmp	r6, r8
    31e0:	eba8 0306 	sub.w	r3, r8, r6
    31e4:	d802      	bhi.n	31ec <_malloc_r+0x40c>
    31e6:	2b0f      	cmp	r3, #15
    31e8:	f73f af62 	bgt.w	30b0 <_malloc_r+0x2d0>
    31ec:	4620      	mov	r0, r4
    31ee:	f000 f8ad 	bl	334c <__malloc_unlock>
    31f2:	2500      	movs	r5, #0
    31f4:	e6bc      	b.n	2f70 <_malloc_r+0x190>
    31f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    31fa:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    31fe:	00c3      	lsls	r3, r0, #3
    3200:	e634      	b.n	2e6c <_malloc_r+0x8c>
    3202:	f859 3908 	ldr.w	r3, [r9], #-8
    3206:	454b      	cmp	r3, r9
    3208:	f040 8096 	bne.w	3338 <_malloc_r+0x558>
    320c:	f010 0f03 	tst.w	r0, #3
    3210:	f100 30ff 	add.w	r0, r0, #4294967295
    3214:	d1f5      	bne.n	3202 <_malloc_r+0x422>
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	ea23 0301 	bic.w	r3, r3, r1
    321c:	607b      	str	r3, [r7, #4]
    321e:	0049      	lsls	r1, r1, #1
    3220:	4299      	cmp	r1, r3
    3222:	f63f aec0 	bhi.w	2fa6 <_malloc_r+0x1c6>
    3226:	b919      	cbnz	r1, 3230 <_malloc_r+0x450>
    3228:	e6bd      	b.n	2fa6 <_malloc_r+0x1c6>
    322a:	0049      	lsls	r1, r1, #1
    322c:	f10e 0e04 	add.w	lr, lr, #4
    3230:	4219      	tst	r1, r3
    3232:	d0fa      	beq.n	322a <_malloc_r+0x44a>
    3234:	4670      	mov	r0, lr
    3236:	e667      	b.n	2f08 <_malloc_r+0x128>
    3238:	f103 0810 	add.w	r8, r3, #16
    323c:	e6d0      	b.n	2fe0 <_malloc_r+0x200>
    323e:	109a      	asrs	r2, r3, #2
    3240:	f04f 0801 	mov.w	r8, #1
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	fa08 f202 	lsl.w	r2, r8, r2
    324a:	431a      	orrs	r2, r3
    324c:	607a      	str	r2, [r7, #4]
    324e:	e770      	b.n	3132 <_malloc_r+0x352>
    3250:	eb02 0108 	add.w	r1, r2, r8
    3254:	4249      	negs	r1, r1
    3256:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    325a:	4651      	mov	r1, sl
    325c:	4620      	mov	r0, r4
    325e:	9200      	str	r2, [sp, #0]
    3260:	f000 f8cc 	bl	33fc <_sbrk_r>
    3264:	1c43      	adds	r3, r0, #1
    3266:	e9dd 2300 	ldrd	r2, r3, [sp]
    326a:	f47f aeef 	bne.w	304c <_malloc_r+0x26c>
    326e:	46da      	mov	sl, fp
    3270:	e6ef      	b.n	3052 <_malloc_r+0x272>
    3272:	2b54      	cmp	r3, #84	; 0x54
    3274:	d825      	bhi.n	32c2 <_malloc_r+0x4e2>
    3276:	0b13      	lsrs	r3, r2, #12
    3278:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    327c:	00c9      	lsls	r1, r1, #3
    327e:	336e      	adds	r3, #110	; 0x6e
    3280:	e744      	b.n	310c <_malloc_r+0x32c>
    3282:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3286:	d825      	bhi.n	32d4 <_malloc_r+0x4f4>
    3288:	0bf3      	lsrs	r3, r6, #15
    328a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    328e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    3292:	00c3      	lsls	r3, r0, #3
    3294:	e5ea      	b.n	2e6c <_malloc_r+0x8c>
    3296:	4b29      	ldr	r3, [pc, #164]	; (333c <_malloc_r+0x55c>)
    3298:	6818      	ldr	r0, [r3, #0]
    329a:	4440      	add	r0, r8
    329c:	6018      	str	r0, [r3, #0]
    329e:	e6b1      	b.n	3004 <_malloc_r+0x224>
    32a0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    32a4:	f1bc 0f00 	cmp.w	ip, #0
    32a8:	f47f aeac 	bne.w	3004 <_malloc_r+0x224>
    32ac:	68bd      	ldr	r5, [r7, #8]
    32ae:	44c8      	add	r8, r9
    32b0:	f048 0001 	orr.w	r0, r8, #1
    32b4:	6068      	str	r0, [r5, #4]
    32b6:	e6f0      	b.n	309a <_malloc_r+0x2ba>
    32b8:	4615      	mov	r5, r2
    32ba:	e6ee      	b.n	309a <_malloc_r+0x2ba>
    32bc:	2301      	movs	r3, #1
    32be:	6053      	str	r3, [r2, #4]
    32c0:	e794      	b.n	31ec <_malloc_r+0x40c>
    32c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    32c6:	d823      	bhi.n	3310 <_malloc_r+0x530>
    32c8:	0bd3      	lsrs	r3, r2, #15
    32ca:	f103 0178 	add.w	r1, r3, #120	; 0x78
    32ce:	00c9      	lsls	r1, r1, #3
    32d0:	3377      	adds	r3, #119	; 0x77
    32d2:	e71b      	b.n	310c <_malloc_r+0x32c>
    32d4:	f240 5254 	movw	r2, #1364	; 0x554
    32d8:	4293      	cmp	r3, r2
    32da:	d823      	bhi.n	3324 <_malloc_r+0x544>
    32dc:	0cb3      	lsrs	r3, r6, #18
    32de:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    32e2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    32e6:	00c3      	lsls	r3, r0, #3
    32e8:	e5c0      	b.n	2e6c <_malloc_r+0x8c>
    32ea:	f1ab 0b08 	sub.w	fp, fp, #8
    32ee:	44d8      	add	r8, fp
    32f0:	eba8 0802 	sub.w	r8, r8, r2
    32f4:	f04f 0a00 	mov.w	sl, #0
    32f8:	e6ab      	b.n	3052 <_malloc_r+0x272>
    32fa:	f105 0108 	add.w	r1, r5, #8
    32fe:	4620      	mov	r0, r4
    3300:	9300      	str	r3, [sp, #0]
    3302:	f000 f90b 	bl	351c <_free_r>
    3306:	68bd      	ldr	r5, [r7, #8]
    3308:	9b00      	ldr	r3, [sp, #0]
    330a:	6868      	ldr	r0, [r5, #4]
    330c:	6819      	ldr	r1, [r3, #0]
    330e:	e6c4      	b.n	309a <_malloc_r+0x2ba>
    3310:	f240 5154 	movw	r1, #1364	; 0x554
    3314:	428b      	cmp	r3, r1
    3316:	d80b      	bhi.n	3330 <_malloc_r+0x550>
    3318:	0c93      	lsrs	r3, r2, #18
    331a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    331e:	00c9      	lsls	r1, r1, #3
    3320:	337c      	adds	r3, #124	; 0x7c
    3322:	e6f3      	b.n	310c <_malloc_r+0x32c>
    3324:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    3328:	207f      	movs	r0, #127	; 0x7f
    332a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    332e:	e59d      	b.n	2e6c <_malloc_r+0x8c>
    3330:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    3334:	237e      	movs	r3, #126	; 0x7e
    3336:	e6e9      	b.n	310c <_malloc_r+0x32c>
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	e770      	b.n	321e <_malloc_r+0x43e>
    333c:	200018bc 	.word	0x200018bc

00003340 <__malloc_lock>:
    3340:	4801      	ldr	r0, [pc, #4]	; (3348 <__malloc_lock+0x8>)
    3342:	f000 b897 	b.w	3474 <__retarget_lock_acquire_recursive>
    3346:	bf00      	nop
    3348:	200018b8 	.word	0x200018b8

0000334c <__malloc_unlock>:
    334c:	4801      	ldr	r0, [pc, #4]	; (3354 <__malloc_unlock+0x8>)
    334e:	f000 b893 	b.w	3478 <__retarget_lock_release_recursive>
    3352:	bf00      	nop
    3354:	200018b8 	.word	0x200018b8

00003358 <memset>:
    3358:	0783      	lsls	r3, r0, #30
    335a:	b530      	push	{r4, r5, lr}
    335c:	d048      	beq.n	33f0 <memset+0x98>
    335e:	1e54      	subs	r4, r2, #1
    3360:	2a00      	cmp	r2, #0
    3362:	d03f      	beq.n	33e4 <memset+0x8c>
    3364:	b2ca      	uxtb	r2, r1
    3366:	4603      	mov	r3, r0
    3368:	e001      	b.n	336e <memset+0x16>
    336a:	3c01      	subs	r4, #1
    336c:	d33a      	bcc.n	33e4 <memset+0x8c>
    336e:	f803 2b01 	strb.w	r2, [r3], #1
    3372:	079d      	lsls	r5, r3, #30
    3374:	d1f9      	bne.n	336a <memset+0x12>
    3376:	2c03      	cmp	r4, #3
    3378:	d92d      	bls.n	33d6 <memset+0x7e>
    337a:	b2cd      	uxtb	r5, r1
    337c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3380:	2c0f      	cmp	r4, #15
    3382:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3386:	d936      	bls.n	33f6 <memset+0x9e>
    3388:	f1a4 0210 	sub.w	r2, r4, #16
    338c:	f022 0c0f 	bic.w	ip, r2, #15
    3390:	f103 0e20 	add.w	lr, r3, #32
    3394:	44e6      	add	lr, ip
    3396:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    339a:	f103 0210 	add.w	r2, r3, #16
    339e:	e942 5504 	strd	r5, r5, [r2, #-16]
    33a2:	e942 5502 	strd	r5, r5, [r2, #-8]
    33a6:	3210      	adds	r2, #16
    33a8:	4572      	cmp	r2, lr
    33aa:	d1f8      	bne.n	339e <memset+0x46>
    33ac:	f10c 0201 	add.w	r2, ip, #1
    33b0:	f014 0f0c 	tst.w	r4, #12
    33b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    33b8:	f004 0c0f 	and.w	ip, r4, #15
    33bc:	d013      	beq.n	33e6 <memset+0x8e>
    33be:	f1ac 0304 	sub.w	r3, ip, #4
    33c2:	f023 0303 	bic.w	r3, r3, #3
    33c6:	3304      	adds	r3, #4
    33c8:	4413      	add	r3, r2
    33ca:	f842 5b04 	str.w	r5, [r2], #4
    33ce:	4293      	cmp	r3, r2
    33d0:	d1fb      	bne.n	33ca <memset+0x72>
    33d2:	f00c 0403 	and.w	r4, ip, #3
    33d6:	b12c      	cbz	r4, 33e4 <memset+0x8c>
    33d8:	b2c9      	uxtb	r1, r1
    33da:	441c      	add	r4, r3
    33dc:	f803 1b01 	strb.w	r1, [r3], #1
    33e0:	429c      	cmp	r4, r3
    33e2:	d1fb      	bne.n	33dc <memset+0x84>
    33e4:	bd30      	pop	{r4, r5, pc}
    33e6:	4664      	mov	r4, ip
    33e8:	4613      	mov	r3, r2
    33ea:	2c00      	cmp	r4, #0
    33ec:	d1f4      	bne.n	33d8 <memset+0x80>
    33ee:	e7f9      	b.n	33e4 <memset+0x8c>
    33f0:	4603      	mov	r3, r0
    33f2:	4614      	mov	r4, r2
    33f4:	e7bf      	b.n	3376 <memset+0x1e>
    33f6:	461a      	mov	r2, r3
    33f8:	46a4      	mov	ip, r4
    33fa:	e7e0      	b.n	33be <memset+0x66>

000033fc <_sbrk_r>:
    33fc:	b538      	push	{r3, r4, r5, lr}
    33fe:	4d07      	ldr	r5, [pc, #28]	; (341c <_sbrk_r+0x20>)
    3400:	2200      	movs	r2, #0
    3402:	4604      	mov	r4, r0
    3404:	4608      	mov	r0, r1
    3406:	602a      	str	r2, [r5, #0]
    3408:	f7fe f91a 	bl	1640 <_sbrk>
    340c:	1c43      	adds	r3, r0, #1
    340e:	d000      	beq.n	3412 <_sbrk_r+0x16>
    3410:	bd38      	pop	{r3, r4, r5, pc}
    3412:	682b      	ldr	r3, [r5, #0]
    3414:	2b00      	cmp	r3, #0
    3416:	d0fb      	beq.n	3410 <_sbrk_r+0x14>
    3418:	6023      	str	r3, [r4, #0]
    341a:	bd38      	pop	{r3, r4, r5, pc}
    341c:	20001a3c 	.word	0x20001a3c

00003420 <__errno>:
    3420:	4b01      	ldr	r3, [pc, #4]	; (3428 <__errno+0x8>)
    3422:	6818      	ldr	r0, [r3, #0]
    3424:	4770      	bx	lr
    3426:	bf00      	nop
    3428:	20001074 	.word	0x20001074

0000342c <__libc_init_array>:
    342c:	b570      	push	{r4, r5, r6, lr}
    342e:	4e0d      	ldr	r6, [pc, #52]	; (3464 <__libc_init_array+0x38>)
    3430:	4d0d      	ldr	r5, [pc, #52]	; (3468 <__libc_init_array+0x3c>)
    3432:	1b76      	subs	r6, r6, r5
    3434:	10b6      	asrs	r6, r6, #2
    3436:	d006      	beq.n	3446 <__libc_init_array+0x1a>
    3438:	2400      	movs	r4, #0
    343a:	f855 3b04 	ldr.w	r3, [r5], #4
    343e:	3401      	adds	r4, #1
    3440:	4798      	blx	r3
    3442:	42a6      	cmp	r6, r4
    3444:	d1f9      	bne.n	343a <__libc_init_array+0xe>
    3446:	4e09      	ldr	r6, [pc, #36]	; (346c <__libc_init_array+0x40>)
    3448:	4d09      	ldr	r5, [pc, #36]	; (3470 <__libc_init_array+0x44>)
    344a:	1b76      	subs	r6, r6, r5
    344c:	f000 f970 	bl	3730 <___init_veneer>
    3450:	10b6      	asrs	r6, r6, #2
    3452:	d006      	beq.n	3462 <__libc_init_array+0x36>
    3454:	2400      	movs	r4, #0
    3456:	f855 3b04 	ldr.w	r3, [r5], #4
    345a:	3401      	adds	r4, #1
    345c:	4798      	blx	r3
    345e:	42a6      	cmp	r6, r4
    3460:	d1f9      	bne.n	3456 <__libc_init_array+0x2a>
    3462:	bd70      	pop	{r4, r5, r6, pc}
    3464:	60002000 	.word	0x60002000
    3468:	60002000 	.word	0x60002000
    346c:	60002008 	.word	0x60002008
    3470:	60002000 	.word	0x60002000

00003474 <__retarget_lock_acquire_recursive>:
    3474:	4770      	bx	lr
    3476:	bf00      	nop

00003478 <__retarget_lock_release_recursive>:
    3478:	4770      	bx	lr
    347a:	bf00      	nop

0000347c <_malloc_trim_r>:
    347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    347e:	4f24      	ldr	r7, [pc, #144]	; (3510 <_malloc_trim_r+0x94>)
    3480:	460c      	mov	r4, r1
    3482:	4606      	mov	r6, r0
    3484:	f7ff ff5c 	bl	3340 <__malloc_lock>
    3488:	68bb      	ldr	r3, [r7, #8]
    348a:	685d      	ldr	r5, [r3, #4]
    348c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    3490:	310f      	adds	r1, #15
    3492:	f025 0503 	bic.w	r5, r5, #3
    3496:	194b      	adds	r3, r1, r5
    3498:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    349c:	f023 030f 	bic.w	r3, r3, #15
    34a0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    34a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    34a8:	db07      	blt.n	34ba <_malloc_trim_r+0x3e>
    34aa:	2100      	movs	r1, #0
    34ac:	4630      	mov	r0, r6
    34ae:	f7ff ffa5 	bl	33fc <_sbrk_r>
    34b2:	68bb      	ldr	r3, [r7, #8]
    34b4:	442b      	add	r3, r5
    34b6:	4298      	cmp	r0, r3
    34b8:	d004      	beq.n	34c4 <_malloc_trim_r+0x48>
    34ba:	4630      	mov	r0, r6
    34bc:	f7ff ff46 	bl	334c <__malloc_unlock>
    34c0:	2000      	movs	r0, #0
    34c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34c4:	4261      	negs	r1, r4
    34c6:	4630      	mov	r0, r6
    34c8:	f7ff ff98 	bl	33fc <_sbrk_r>
    34cc:	3001      	adds	r0, #1
    34ce:	d00d      	beq.n	34ec <_malloc_trim_r+0x70>
    34d0:	4a10      	ldr	r2, [pc, #64]	; (3514 <_malloc_trim_r+0x98>)
    34d2:	68bb      	ldr	r3, [r7, #8]
    34d4:	1b2d      	subs	r5, r5, r4
    34d6:	f045 0501 	orr.w	r5, r5, #1
    34da:	605d      	str	r5, [r3, #4]
    34dc:	6813      	ldr	r3, [r2, #0]
    34de:	4630      	mov	r0, r6
    34e0:	1b1b      	subs	r3, r3, r4
    34e2:	6013      	str	r3, [r2, #0]
    34e4:	f7ff ff32 	bl	334c <__malloc_unlock>
    34e8:	2001      	movs	r0, #1
    34ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34ec:	2100      	movs	r1, #0
    34ee:	4630      	mov	r0, r6
    34f0:	f7ff ff84 	bl	33fc <_sbrk_r>
    34f4:	68ba      	ldr	r2, [r7, #8]
    34f6:	1a83      	subs	r3, r0, r2
    34f8:	2b0f      	cmp	r3, #15
    34fa:	ddde      	ble.n	34ba <_malloc_trim_r+0x3e>
    34fc:	f043 0301 	orr.w	r3, r3, #1
    3500:	6053      	str	r3, [r2, #4]
    3502:	4b05      	ldr	r3, [pc, #20]	; (3518 <_malloc_trim_r+0x9c>)
    3504:	4903      	ldr	r1, [pc, #12]	; (3514 <_malloc_trim_r+0x98>)
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	1ac0      	subs	r0, r0, r3
    350a:	6008      	str	r0, [r1, #0]
    350c:	e7d5      	b.n	34ba <_malloc_trim_r+0x3e>
    350e:	bf00      	nop
    3510:	20000c64 	.word	0x20000c64
    3514:	200018bc 	.word	0x200018bc
    3518:	2000106c 	.word	0x2000106c

0000351c <_free_r>:
    351c:	2900      	cmp	r1, #0
    351e:	d061      	beq.n	35e4 <_free_r+0xc8>
    3520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3522:	460c      	mov	r4, r1
    3524:	4606      	mov	r6, r0
    3526:	f7ff ff0b 	bl	3340 <__malloc_lock>
    352a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    352e:	4f7b      	ldr	r7, [pc, #492]	; (371c <_free_r+0x200>)
    3530:	f1a4 0508 	sub.w	r5, r4, #8
    3534:	f022 0101 	bic.w	r1, r2, #1
    3538:	eb05 0c01 	add.w	ip, r5, r1
    353c:	68b8      	ldr	r0, [r7, #8]
    353e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    3542:	4560      	cmp	r0, ip
    3544:	f023 0303 	bic.w	r3, r3, #3
    3548:	f000 808b 	beq.w	3662 <_free_r+0x146>
    354c:	07d2      	lsls	r2, r2, #31
    354e:	f8cc 3004 	str.w	r3, [ip, #4]
    3552:	d432      	bmi.n	35ba <_free_r+0x9e>
    3554:	f854 2c08 	ldr.w	r2, [r4, #-8]
    3558:	1aad      	subs	r5, r5, r2
    355a:	4411      	add	r1, r2
    355c:	68aa      	ldr	r2, [r5, #8]
    355e:	f107 0008 	add.w	r0, r7, #8
    3562:	4282      	cmp	r2, r0
    3564:	d06a      	beq.n	363c <_free_r+0x120>
    3566:	eb0c 0403 	add.w	r4, ip, r3
    356a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    356e:	68ec      	ldr	r4, [r5, #12]
    3570:	60d4      	str	r4, [r2, #12]
    3572:	f01e 0f01 	tst.w	lr, #1
    3576:	60a2      	str	r2, [r4, #8]
    3578:	f000 8097 	beq.w	36aa <_free_r+0x18e>
    357c:	f041 0301 	orr.w	r3, r1, #1
    3580:	606b      	str	r3, [r5, #4]
    3582:	f8cc 1000 	str.w	r1, [ip]
    3586:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    358a:	d235      	bcs.n	35f8 <_free_r+0xdc>
    358c:	6878      	ldr	r0, [r7, #4]
    358e:	08cb      	lsrs	r3, r1, #3
    3590:	2201      	movs	r2, #1
    3592:	0949      	lsrs	r1, r1, #5
    3594:	3301      	adds	r3, #1
    3596:	408a      	lsls	r2, r1
    3598:	4302      	orrs	r2, r0
    359a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    359e:	607a      	str	r2, [r7, #4]
    35a0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    35a4:	3a08      	subs	r2, #8
    35a6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    35aa:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    35ae:	60cd      	str	r5, [r1, #12]
    35b0:	4630      	mov	r0, r6
    35b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    35b6:	f7ff bec9 	b.w	334c <__malloc_unlock>
    35ba:	eb0c 0203 	add.w	r2, ip, r3
    35be:	6852      	ldr	r2, [r2, #4]
    35c0:	07d0      	lsls	r0, r2, #31
    35c2:	d410      	bmi.n	35e6 <_free_r+0xca>
    35c4:	4419      	add	r1, r3
    35c6:	f107 0008 	add.w	r0, r7, #8
    35ca:	f8dc 3008 	ldr.w	r3, [ip, #8]
    35ce:	4283      	cmp	r3, r0
    35d0:	d073      	beq.n	36ba <_free_r+0x19e>
    35d2:	f8dc 200c 	ldr.w	r2, [ip, #12]
    35d6:	60da      	str	r2, [r3, #12]
    35d8:	6093      	str	r3, [r2, #8]
    35da:	f041 0301 	orr.w	r3, r1, #1
    35de:	606b      	str	r3, [r5, #4]
    35e0:	5069      	str	r1, [r5, r1]
    35e2:	e7d0      	b.n	3586 <_free_r+0x6a>
    35e4:	4770      	bx	lr
    35e6:	f041 0301 	orr.w	r3, r1, #1
    35ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    35ee:	f844 3c04 	str.w	r3, [r4, #-4]
    35f2:	f8cc 1000 	str.w	r1, [ip]
    35f6:	d3c9      	bcc.n	358c <_free_r+0x70>
    35f8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    35fc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    3600:	d248      	bcs.n	3694 <_free_r+0x178>
    3602:	098b      	lsrs	r3, r1, #6
    3604:	f103 0039 	add.w	r0, r3, #57	; 0x39
    3608:	f103 0238 	add.w	r2, r3, #56	; 0x38
    360c:	00c3      	lsls	r3, r0, #3
    360e:	18f8      	adds	r0, r7, r3
    3610:	58fb      	ldr	r3, [r7, r3]
    3612:	3808      	subs	r0, #8
    3614:	4298      	cmp	r0, r3
    3616:	d059      	beq.n	36cc <_free_r+0x1b0>
    3618:	685a      	ldr	r2, [r3, #4]
    361a:	f022 0203 	bic.w	r2, r2, #3
    361e:	428a      	cmp	r2, r1
    3620:	d902      	bls.n	3628 <_free_r+0x10c>
    3622:	689b      	ldr	r3, [r3, #8]
    3624:	4298      	cmp	r0, r3
    3626:	d1f7      	bne.n	3618 <_free_r+0xfc>
    3628:	68d8      	ldr	r0, [r3, #12]
    362a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    362e:	6085      	str	r5, [r0, #8]
    3630:	60dd      	str	r5, [r3, #12]
    3632:	4630      	mov	r0, r6
    3634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3638:	f7ff be88 	b.w	334c <__malloc_unlock>
    363c:	eb0c 0203 	add.w	r2, ip, r3
    3640:	6852      	ldr	r2, [r2, #4]
    3642:	07d2      	lsls	r2, r2, #31
    3644:	d463      	bmi.n	370e <_free_r+0x1f2>
    3646:	440b      	add	r3, r1
    3648:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    364c:	60ca      	str	r2, [r1, #12]
    364e:	6091      	str	r1, [r2, #8]
    3650:	f043 0201 	orr.w	r2, r3, #1
    3654:	606a      	str	r2, [r5, #4]
    3656:	4630      	mov	r0, r6
    3658:	50eb      	str	r3, [r5, r3]
    365a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    365e:	f7ff be75 	b.w	334c <__malloc_unlock>
    3662:	440b      	add	r3, r1
    3664:	07d1      	lsls	r1, r2, #31
    3666:	d407      	bmi.n	3678 <_free_r+0x15c>
    3668:	f854 2c08 	ldr.w	r2, [r4, #-8]
    366c:	1aad      	subs	r5, r5, r2
    366e:	4413      	add	r3, r2
    3670:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    3674:	60ca      	str	r2, [r1, #12]
    3676:	6091      	str	r1, [r2, #8]
    3678:	f043 0201 	orr.w	r2, r3, #1
    367c:	606a      	str	r2, [r5, #4]
    367e:	4a28      	ldr	r2, [pc, #160]	; (3720 <_free_r+0x204>)
    3680:	60bd      	str	r5, [r7, #8]
    3682:	6812      	ldr	r2, [r2, #0]
    3684:	429a      	cmp	r2, r3
    3686:	d893      	bhi.n	35b0 <_free_r+0x94>
    3688:	4b26      	ldr	r3, [pc, #152]	; (3724 <_free_r+0x208>)
    368a:	4630      	mov	r0, r6
    368c:	6819      	ldr	r1, [r3, #0]
    368e:	f7ff fef5 	bl	347c <_malloc_trim_r>
    3692:	e78d      	b.n	35b0 <_free_r+0x94>
    3694:	2b14      	cmp	r3, #20
    3696:	d90a      	bls.n	36ae <_free_r+0x192>
    3698:	2b54      	cmp	r3, #84	; 0x54
    369a:	d81f      	bhi.n	36dc <_free_r+0x1c0>
    369c:	0b0b      	lsrs	r3, r1, #12
    369e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    36a2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    36a6:	00c3      	lsls	r3, r0, #3
    36a8:	e7b1      	b.n	360e <_free_r+0xf2>
    36aa:	4419      	add	r1, r3
    36ac:	e78d      	b.n	35ca <_free_r+0xae>
    36ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    36b2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    36b6:	00c3      	lsls	r3, r0, #3
    36b8:	e7a9      	b.n	360e <_free_r+0xf2>
    36ba:	f041 0301 	orr.w	r3, r1, #1
    36be:	e9c7 5504 	strd	r5, r5, [r7, #16]
    36c2:	e9c5 0002 	strd	r0, r0, [r5, #8]
    36c6:	606b      	str	r3, [r5, #4]
    36c8:	5069      	str	r1, [r5, r1]
    36ca:	e771      	b.n	35b0 <_free_r+0x94>
    36cc:	6879      	ldr	r1, [r7, #4]
    36ce:	1092      	asrs	r2, r2, #2
    36d0:	2401      	movs	r4, #1
    36d2:	fa04 f202 	lsl.w	r2, r4, r2
    36d6:	430a      	orrs	r2, r1
    36d8:	607a      	str	r2, [r7, #4]
    36da:	e7a6      	b.n	362a <_free_r+0x10e>
    36dc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    36e0:	d806      	bhi.n	36f0 <_free_r+0x1d4>
    36e2:	0bcb      	lsrs	r3, r1, #15
    36e4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    36e8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    36ec:	00c3      	lsls	r3, r0, #3
    36ee:	e78e      	b.n	360e <_free_r+0xf2>
    36f0:	f240 5254 	movw	r2, #1364	; 0x554
    36f4:	4293      	cmp	r3, r2
    36f6:	d806      	bhi.n	3706 <_free_r+0x1ea>
    36f8:	0c8b      	lsrs	r3, r1, #18
    36fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    36fe:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    3702:	00c3      	lsls	r3, r0, #3
    3704:	e783      	b.n	360e <_free_r+0xf2>
    3706:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    370a:	227e      	movs	r2, #126	; 0x7e
    370c:	e77f      	b.n	360e <_free_r+0xf2>
    370e:	f041 0301 	orr.w	r3, r1, #1
    3712:	606b      	str	r3, [r5, #4]
    3714:	f8cc 1000 	str.w	r1, [ip]
    3718:	e74a      	b.n	35b0 <_free_r+0x94>
    371a:	bf00      	nop
    371c:	20000c64 	.word	0x20000c64
    3720:	20001070 	.word	0x20001070
    3724:	200018ec 	.word	0x200018ec

00003728 <___reboot_Teensyduino__veneer>:
    3728:	f85f f000 	ldr.w	pc, [pc]	; 372c <___reboot_Teensyduino__veneer+0x4>
    372c:	60001f09 	.word	0x60001f09

00003730 <___init_veneer>:
    3730:	f85f f000 	ldr.w	pc, [pc]	; 3734 <___init_veneer+0x4>
    3734:	60001fb1 	.word	0x60001fb1

00003738 <___ZN7TwoWire5beginEv_veneer>:
    3738:	f85f f000 	ldr.w	pc, [pc]	; 373c <___ZN7TwoWire5beginEv_veneer+0x4>
    373c:	60001789 	.word	0x60001789

Disassembly of section .fini:

00003740 <_fini>:
    3740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3742:	bf00      	nop
